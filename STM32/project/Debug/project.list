
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008010  08008010  00018010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001dc  08008620  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08008620  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f751  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002096  00000000  00000000  0002f95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000319f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00032818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f0  00000000  00000000  00033570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb58  00000000  00000000  0004b860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b42d  00000000  00000000  0005b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f67e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d84  00000000  00000000  000f6838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ff8 	.word	0x08007ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007ff8 	.word	0x08007ff8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
}
 8000f64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <__NVIC_SystemReset+0x24>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f6e:	4904      	ldr	r1, [pc, #16]	; (8000f80 <__NVIC_SystemReset+0x24>)
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_SystemReset+0x28>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f76:	f3bf 8f4f 	dsb	sy
}
 8000f7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <__NVIC_SystemReset+0x20>
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0004 	.word	0x05fa0004

08000f88 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t time)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <delay+0x30>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<time);
 8000f9a:	bf00      	nop
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <delay+0x30>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d3f9      	bcc.n	8000f9c <delay+0x14>
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200002e8 	.word	0x200002e8

08000fbc <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0,timechk=0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f002 fa9a 	bl	8003524 <HAL_GPIO_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f002 fa7c 	bl	8003524 <HAL_GPIO_Init>
}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <DHT22_Start>:

void DHT22_Start (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
	Set_Pin_Output(GPIOx, GPIO_Pin); // set the pin as output
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4619      	mov	r1, r3
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffb9 	bl	8000fbc <Set_Pin_Output>
	HAL_GPIO_WritePin (GPIOx, GPIO_Pin, 0);   // pull the pin low
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	2200      	movs	r2, #0
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f002 fc03 	bl	800385c <HAL_GPIO_WritePin>
	delay(1200);   // wait for > 1ms
 8001056:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800105a:	f7ff ff95 	bl	8000f88 <delay>

	HAL_GPIO_WritePin (GPIOx, GPIO_Pin, 1);   // pull the pin high
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f002 fbf9 	bl	800385c <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 800106a:	2014      	movs	r0, #20
 800106c:	f7ff ff8c 	bl	8000f88 <delay>

	Set_Pin_Input(GPIOx, GPIO_Pin);   // set as input
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffbf 	bl	8000ff8 <Set_Pin_Input>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
	Set_Pin_Input(GPIOx, GPIO_Pin);   // set as input
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <Set_Pin_Input>
	uint8_t Response = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
	delay (40);  // wait for 40us
 800109c:	2028      	movs	r0, #40	; 0x28
 800109e:	f7ff ff73 	bl	8000f88 <delay>
	if (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin))) // if the pin is low
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	4619      	mov	r1, r3
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f002 fbc0 	bl	800382c <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <DHT22_Check_Response+0x50>
	{
		delay (80);   // wait for 80us
 80010b2:	2050      	movs	r0, #80	; 0x50
 80010b4:	f7ff ff68 	bl	8000f88 <delay>

		if ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin))) Response = 1;  // if the pin is high, response is ok
 80010b8:	887b      	ldrh	r3, [r7, #2]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f002 fbb5 	bl	800382c <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <DHT22_Check_Response+0x4c>
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e001      	b.n	80010d2 <DHT22_Check_Response+0x50>
		else Response = -1;
 80010ce:	23ff      	movs	r3, #255	; 0xff
 80010d0:	73fb      	strb	r3, [r7, #15]
	}

	while ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));   // wait for the pin to go low
 80010d2:	bf00      	nop
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4619      	mov	r1, r3
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f002 fba7 	bl	800382c <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f7      	bne.n	80010d4 <DHT22_Check_Response+0x52>
	return Response;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <DHT22_Read>:

uint8_t DHT22_Read (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	807b      	strh	r3, [r7, #2]
	uint8_t i,j;
	for (j=0;j<8;j++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
 80010fe:	e03a      	b.n	8001176 <DHT22_Read+0x88>
	{
		while (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));   // wait for the pin to go high
 8001100:	bf00      	nop
 8001102:	887b      	ldrh	r3, [r7, #2]
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f002 fb90 	bl	800382c <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f7      	beq.n	8001102 <DHT22_Read+0x14>
		delay (40);   // wait for 40 us
 8001112:	2028      	movs	r0, #40	; 0x28
 8001114:	f7ff ff38 	bl	8000f88 <delay>

		if (!(HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)))   // if the pin is low
 8001118:	887b      	ldrh	r3, [r7, #2]
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f002 fb85 	bl	800382c <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10e      	bne.n	8001146 <DHT22_Read+0x58>
		{
			i&= ~(1<<(7-j));   // write 0
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2201      	movs	r2, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	b25b      	sxtb	r3, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	b25a      	sxtb	r2, r3
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4013      	ands	r3, r2
 8001140:	b25b      	sxtb	r3, r3
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e00b      	b.n	800115e <DHT22_Read+0x70>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001146:	7bbb      	ldrb	r3, [r7, #14]
 8001148:	f1c3 0307 	rsb	r3, r3, #7
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	b25a      	sxtb	r2, r3
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	4313      	orrs	r3, r2
 800115a:	b25b      	sxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
		while ((HAL_GPIO_ReadPin (GPIOx, GPIO_Pin)));  // wait for the pin to go low
 800115e:	bf00      	nop
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	4619      	mov	r1, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f002 fb61 	bl	800382c <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f7      	bne.n	8001160 <DHT22_Read+0x72>
	for (j=0;j<8;j++)
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3301      	adds	r3, #1
 8001174:	73bb      	strb	r3, [r7, #14]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d9c1      	bls.n	8001100 <DHT22_Read+0x12>
	}

	return i;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <read_sensor>:

uint16_t adcbuff[2]={};
float dustandgas[2]={};


void read_sensor(ADC_HandleTypeDef* hadc,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	4613      	mov	r3, r2
 8001194:	80fb      	strh	r3, [r7, #6]
	int voMeasured = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
	float calcVoltage = 0;
 800119a:	f04f 0300 	mov.w	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
	float dust_voltage =0;
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
	float gas_voltage = 0;
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
	float gasDensity = 0;
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
	float dustDensity = 0;
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t sample =100;
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	75fb      	strb	r3, [r7, #23]

//read dust
	for(int i=0;i<sample;i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c0:	e042      	b.n	8001248 <read_sensor+0xc0>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f002 fb47 	bl	800385c <HAL_GPIO_WritePin>
	delay(280);
 80011ce:	f44f 708c 	mov.w	r0, #280	; 0x118
 80011d2:	f7ff fed9 	bl	8000f88 <delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcbuff , 2);
 80011d6:	2202      	movs	r2, #2
 80011d8:	4957      	ldr	r1, [pc, #348]	; (8001338 <read_sensor+0x1b0>)
 80011da:	4858      	ldr	r0, [pc, #352]	; (800133c <read_sensor+0x1b4>)
 80011dc:	f001 f962 	bl	80024a4 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f001 f8f7 	bl	80023d4 <HAL_Delay>
	dust_voltage+= adcbuff[0]*(5.0/4096);
 80011e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011e8:	f7ff f9b6 	bl	8000558 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <read_sensor+0x1b0>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f99d 	bl	8000534 <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <read_sensor+0x1b8>)
 8001200:	f7ff fa02 	bl	8000608 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7ff f846 	bl	800029c <__adddf3>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fcce 	bl	8000bb8 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
	delay(280);
 8001220:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001224:	f7ff feb0 	bl	8000f88 <delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	68b8      	ldr	r0, [r7, #8]
 8001230:	f002 fb14 	bl	800385c <HAL_GPIO_WritePin>
	delay(9680);
 8001234:	f242 50d0 	movw	r0, #9680	; 0x25d0
 8001238:	f7ff fea6 	bl	8000f88 <delay>
	HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f001 f8c9 	bl	80023d4 <HAL_Delay>
	for(int i=0;i<sample;i++){
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	3301      	adds	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800124c:	429a      	cmp	r2, r3
 800124e:	dbb8      	blt.n	80011c2 <read_sensor+0x3a>

}

//read gas
	HAL_Delay(100);
 8001250:	2064      	movs	r0, #100	; 0x64
 8001252:	f001 f8bf 	bl	80023d4 <HAL_Delay>

	for(int i=0;i<sample;i++){
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	e02a      	b.n	80012b2 <read_sensor+0x12a>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcbuff , 2);
 800125c:	2202      	movs	r2, #2
 800125e:	4936      	ldr	r1, [pc, #216]	; (8001338 <read_sensor+0x1b0>)
 8001260:	4836      	ldr	r0, [pc, #216]	; (800133c <read_sensor+0x1b4>)
 8001262:	f001 f91f 	bl	80024a4 <HAL_ADC_Start_DMA>
	HAL_Delay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f001 f8b4 	bl	80023d4 <HAL_Delay>
	gas_voltage += adcbuff[1]*(5.0/4096);
 800126c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800126e:	f7ff f973 	bl	8000558 <__aeabi_f2d>
 8001272:	4604      	mov	r4, r0
 8001274:	460d      	mov	r5, r1
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <read_sensor+0x1b0>)
 8001278:	885b      	ldrh	r3, [r3, #2]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f95a 	bl	8000534 <__aeabi_i2d>
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <read_sensor+0x1b8>)
 8001286:	f7ff f9bf 	bl	8000608 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4620      	mov	r0, r4
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff f803 	bl	800029c <__adddf3>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fc8b 	bl	8000bb8 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_Delay(1);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 f894 	bl	80023d4 <HAL_Delay>
	for(int i=0;i<sample;i++){
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3301      	adds	r3, #1
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbd0      	blt.n	800125c <read_sensor+0xd4>
	}

	dust_voltage/=sample;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80012c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	gas_voltage/=sample;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80012de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	gasDensity = gas_voltage*1000;
 80012e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80012ea:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001344 <read_sensor+0x1bc>
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	edc7 7a06 	vstr	s15, [r7, #24]
	dustDensity = 172*dust_voltage-100;
 80012f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80012fa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001348 <read_sensor+0x1c0>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800134c <read_sensor+0x1c4>
 8001306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800130a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	  if ( dustDensity < 0)
 800130e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d502      	bpl.n	8001322 <read_sensor+0x19a>
	  {
	    dustDensity = 0.00;
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
	  }

	  dustandgas[0] =  dustDensity ;
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <read_sensor+0x1c8>)
 8001324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001326:	6013      	str	r3, [r2, #0]
	  dustandgas[1] = gasDensity;
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <read_sensor+0x1c8>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	6053      	str	r3, [r2, #4]

	//  return dustDensity;

}
 800132e:	bf00      	nop
 8001330:	3738      	adds	r7, #56	; 0x38
 8001332:	46bd      	mov	sp, r7
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	200003c4 	.word	0x200003c4
 800133c:	200001f8 	.word	0x200001f8
 8001340:	3f540000 	.word	0x3f540000
 8001344:	447a0000 	.word	0x447a0000
 8001348:	432c0000 	.word	0x432c0000
 800134c:	42c80000 	.word	0x42c80000
 8001350:	200003c8 	.word	0x200003c8

08001354 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

	timechk++;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001366:	701a      	strb	r2, [r3, #0]
	if(timechk==10){
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b0a      	cmp	r3, #10
 800136e:	d101      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x20>
		NVIC_SystemReset();
 8001370:	f7ff fdf4 	bl	8000f5c <__NVIC_SystemReset>
	}
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200003c3 	.word	0x200003c3

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b0b8      	sub	sp, #224	; 0xe0
 8001386:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 ffb2 	bl	80022f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 fab0 	bl	80018f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 fc88 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f000 fc66 	bl	8001c64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001398:	f000 fc3a 	bl	8001c10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800139c:	f000 fb12 	bl	80019c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013a0:	f000 fbbe 	bl	8001b20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80013a4:	f000 fc0a 	bl	8001bbc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80013a8:	f000 fb6c 	bl	8001a84 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_Base_Start_IT(&htim3);
 80013ac:	48e0      	ldr	r0, [pc, #896]	; (8001730 <main+0x3b0>)
 80013ae:	f002 ff57 	bl	8004260 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim2);
 80013b2:	48e0      	ldr	r0, [pc, #896]	; (8001734 <main+0x3b4>)
 80013b4:	f002 ff54 	bl	8004260 <HAL_TIM_Base_Start_IT>
	uint16_t pinar[3]={GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_4};
 80013b8:	4adf      	ldr	r2, [pc, #892]	; (8001738 <main+0x3b8>)
 80013ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c2:	6018      	str	r0, [r3, #0]
 80013c4:	3304      	adds	r3, #4
 80013c6:	8019      	strh	r1, [r3, #0]
	float tem,hu,dust,gas;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	48db      	ldr	r0, [pc, #876]	; (800173c <main+0x3bc>)
 80013ce:	f002 fa45 	bl	800385c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // dht22 read
	  DHT22_Start(GPIOB, GPIO_PIN_0);
 80013d2:	2101      	movs	r1, #1
 80013d4:	48da      	ldr	r0, [pc, #872]	; (8001740 <main+0x3c0>)
 80013d6:	f7ff fe2d 	bl	8001034 <DHT22_Start>
	  Presence = DHT22_Check_Response(GPIOB, GPIO_PIN_0);
 80013da:	2101      	movs	r1, #1
 80013dc:	48d8      	ldr	r0, [pc, #864]	; (8001740 <main+0x3c0>)
 80013de:	f7ff fe50 	bl	8001082 <DHT22_Check_Response>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4bd7      	ldr	r3, [pc, #860]	; (8001744 <main+0x3c4>)
 80013e8:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT22_Read (GPIOB, GPIO_PIN_0);
 80013ea:	2101      	movs	r1, #1
 80013ec:	48d4      	ldr	r0, [pc, #848]	; (8001740 <main+0x3c0>)
 80013ee:	f7ff fe7e 	bl	80010ee <DHT22_Read>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4bd4      	ldr	r3, [pc, #848]	; (8001748 <main+0x3c8>)
 80013f8:	701a      	strb	r2, [r3, #0]
   Rh_byte2 = DHT22_Read (GPIOB, GPIO_PIN_0);
 80013fa:	2101      	movs	r1, #1
 80013fc:	48d0      	ldr	r0, [pc, #832]	; (8001740 <main+0x3c0>)
 80013fe:	f7ff fe76 	bl	80010ee <DHT22_Read>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4bd1      	ldr	r3, [pc, #836]	; (800174c <main+0x3cc>)
 8001408:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT22_Read (GPIOB, GPIO_PIN_0);
 800140a:	2101      	movs	r1, #1
 800140c:	48cc      	ldr	r0, [pc, #816]	; (8001740 <main+0x3c0>)
 800140e:	f7ff fe6e 	bl	80010ee <DHT22_Read>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4bce      	ldr	r3, [pc, #824]	; (8001750 <main+0x3d0>)
 8001418:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT22_Read (GPIOB, GPIO_PIN_0);
 800141a:	2101      	movs	r1, #1
 800141c:	48c8      	ldr	r0, [pc, #800]	; (8001740 <main+0x3c0>)
 800141e:	f7ff fe66 	bl	80010ee <DHT22_Read>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4bcb      	ldr	r3, [pc, #812]	; (8001754 <main+0x3d4>)
 8001428:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read(GPIOB, GPIO_PIN_0);
 800142a:	2101      	movs	r1, #1
 800142c:	48c4      	ldr	r0, [pc, #784]	; (8001740 <main+0x3c0>)
 800142e:	f7ff fe5e 	bl	80010ee <DHT22_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4bc8      	ldr	r3, [pc, #800]	; (8001758 <main+0x3d8>)
 8001438:	801a      	strh	r2, [r3, #0]

	  TEMP = ((Temp_byte1<<8)|Temp_byte2);
 800143a:	4bc5      	ldr	r3, [pc, #788]	; (8001750 <main+0x3d0>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	021b      	lsls	r3, r3, #8
 8001440:	b21a      	sxth	r2, r3
 8001442:	4bc4      	ldr	r3, [pc, #784]	; (8001754 <main+0x3d4>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b21b      	sxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29a      	uxth	r2, r3
 800144e:	4bc3      	ldr	r3, [pc, #780]	; (800175c <main+0x3dc>)
 8001450:	801a      	strh	r2, [r3, #0]
	  RH = ((Rh_byte1<<8)|Rh_byte2);
 8001452:	4bbd      	ldr	r3, [pc, #756]	; (8001748 <main+0x3c8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	4bbc      	ldr	r3, [pc, #752]	; (800174c <main+0x3cc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21b      	sxth	r3, r3
 8001464:	b29a      	uxth	r2, r3
 8001466:	4bbe      	ldr	r3, [pc, #760]	; (8001760 <main+0x3e0>)
 8001468:	801a      	strh	r2, [r3, #0]

	  //Temperature = (float) (TEMP/10.0);
	  //Humidity = (float) (RH/10.0);
	  tem = (float) (TEMP/10.0);
 800146a:	4bbc      	ldr	r3, [pc, #752]	; (800175c <main+0x3dc>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f860 	bl	8000534 <__aeabi_i2d>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4bba      	ldr	r3, [pc, #744]	; (8001764 <main+0x3e4>)
 800147a:	f7ff f9ef 	bl	800085c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb97 	bl	8000bb8 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  hu = (float) (RH/10.0);
 8001490:	4bb3      	ldr	r3, [pc, #716]	; (8001760 <main+0x3e0>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f84d 	bl	8000534 <__aeabi_i2d>
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4bb1      	ldr	r3, [pc, #708]	; (8001764 <main+0x3e4>)
 80014a0:	f7ff f9dc 	bl	800085c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb84 	bl	8000bb8 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	  // cal HI(heatindex)
	  float HI = -8.78469475556 + 1.61139411 * tem + 2.33854883889 * hu
 80014b6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80014ba:	f7ff f84d 	bl	8000558 <__aeabi_f2d>
 80014be:	a38a      	add	r3, pc, #552	; (adr r3, 80016e8 <main+0x368>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8a0 	bl	8000608 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a387      	add	r3, pc, #540	; (adr r3, 80016f0 <main+0x370>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7fe fedf 	bl	8000298 <__aeabi_dsub>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4614      	mov	r4, r2
 80014e0:	461d      	mov	r5, r3
 80014e2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80014e6:	f7ff f837 	bl	8000558 <__aeabi_f2d>
 80014ea:	a383      	add	r3, pc, #524	; (adr r3, 80016f8 <main+0x378>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f88a 	bl	8000608 <__aeabi_dmul>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fece 	bl	800029c <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4614      	mov	r4, r2
 8001506:	461d      	mov	r5, r3
			  - 0.14611605 * tem * hu - 0.012308094 * tem * tem
 8001508:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800150c:	f7ff f824 	bl	8000558 <__aeabi_f2d>
 8001510:	a37b      	add	r3, pc, #492	; (adr r3, 8001700 <main+0x380>)
 8001512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001516:	f7ff f877 	bl	8000608 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4690      	mov	r8, r2
 8001520:	4699      	mov	r9, r3
 8001522:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001526:	f7ff f817 	bl	8000558 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4640      	mov	r0, r8
 8001530:	4649      	mov	r1, r9
 8001532:	f7ff f869 	bl	8000608 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe feab 	bl	8000298 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4614      	mov	r4, r2
 8001548:	461d      	mov	r5, r3
 800154a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	a36d      	add	r3, pc, #436	; (adr r3, 8001708 <main+0x388>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f856 	bl	8000608 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4690      	mov	r8, r2
 8001562:	4699      	mov	r9, r3
 8001564:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001568:	f7fe fff6 	bl	8000558 <__aeabi_f2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4640      	mov	r0, r8
 8001572:	4649      	mov	r1, r9
 8001574:	f7ff f848 	bl	8000608 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7fe fe8a 	bl	8000298 <__aeabi_dsub>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
			  - 0.0164248277778 * hu * hu + 0.002211732 * tem * tem * hu
 800158c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001590:	f7fe ffe2 	bl	8000558 <__aeabi_f2d>
 8001594:	a35e      	add	r3, pc, #376	; (adr r3, 8001710 <main+0x390>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4690      	mov	r8, r2
 80015a4:	4699      	mov	r9, r3
 80015a6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80015aa:	f7fe ffd5 	bl	8000558 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4640      	mov	r0, r8
 80015b4:	4649      	mov	r1, r9
 80015b6:	f7ff f827 	bl	8000608 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fe69 	bl	8000298 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4614      	mov	r4, r2
 80015cc:	461d      	mov	r5, r3
 80015ce:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80015d2:	f7fe ffc1 	bl	8000558 <__aeabi_f2d>
 80015d6:	a350      	add	r3, pc, #320	; (adr r3, 8001718 <main+0x398>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f814 	bl	8000608 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4690      	mov	r8, r2
 80015e6:	4699      	mov	r9, r3
 80015e8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80015ec:	f7fe ffb4 	bl	8000558 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4640      	mov	r0, r8
 80015f6:	4649      	mov	r1, r9
 80015f8:	f7ff f806 	bl	8000608 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4690      	mov	r8, r2
 8001602:	4699      	mov	r9, r3
 8001604:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001608:	f7fe ffa6 	bl	8000558 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4640      	mov	r0, r8
 8001612:	4649      	mov	r1, r9
 8001614:	f7fe fff8 	bl	8000608 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe fe3c 	bl	800029c <__adddf3>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4614      	mov	r4, r2
 800162a:	461d      	mov	r5, r3
			  + 0.00072546 * tem * hu * hu - 0.000003582 * tem * tem * hu * hu;
 800162c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001630:	f7fe ff92 	bl	8000558 <__aeabi_f2d>
 8001634:	a33a      	add	r3, pc, #232	; (adr r3, 8001720 <main+0x3a0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ffe5 	bl	8000608 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800164a:	f7fe ff85 	bl	8000558 <__aeabi_f2d>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4640      	mov	r0, r8
 8001654:	4649      	mov	r1, r9
 8001656:	f7fe ffd7 	bl	8000608 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4690      	mov	r8, r2
 8001660:	4699      	mov	r9, r3
 8001662:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001666:	f7fe ff77 	bl	8000558 <__aeabi_f2d>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4640      	mov	r0, r8
 8001670:	4649      	mov	r1, r9
 8001672:	f7fe ffc9 	bl	8000608 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe0d 	bl	800029c <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	a325      	add	r3, pc, #148	; (adr r3, 8001728 <main+0x3a8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffb6 	bl	8000608 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4690      	mov	r8, r2
 80016a2:	4699      	mov	r9, r3
 80016a4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80016a8:	f7fe ff56 	bl	8000558 <__aeabi_f2d>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4640      	mov	r0, r8
 80016b2:	4649      	mov	r1, r9
 80016b4:	f7fe ffa8 	bl	8000608 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4690      	mov	r8, r2
 80016be:	4699      	mov	r9, r3
 80016c0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016c4:	f7fe ff48 	bl	8000558 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4640      	mov	r0, r8
 80016ce:	4649      	mov	r1, r9
 80016d0:	f7fe ff9a 	bl	8000608 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4690      	mov	r8, r2
 80016da:	4699      	mov	r9, r3
 80016dc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80016e0:	f7fe ff3a 	bl	8000558 <__aeabi_f2d>
 80016e4:	e040      	b.n	8001768 <main+0x3e8>
 80016e6:	bf00      	nop
 80016e8:	30b6ac24 	.word	0x30b6ac24
 80016ec:	3ff9c845 	.word	0x3ff9c845
 80016f0:	82d0f222 	.word	0x82d0f222
 80016f4:	402191c3 	.word	0x402191c3
 80016f8:	17f90cf3 	.word	0x17f90cf3
 80016fc:	4002b559 	.word	0x4002b559
 8001700:	4415d986 	.word	0x4415d986
 8001704:	3fc2b3ee 	.word	0x3fc2b3ee
 8001708:	69a61485 	.word	0x69a61485
 800170c:	3f8934fc 	.word	0x3f8934fc
 8001710:	8897a32a 	.word	0x8897a32a
 8001714:	3f90d1ab 	.word	0x3f90d1ab
 8001718:	9370c6ce 	.word	0x9370c6ce
 800171c:	3f621e56 	.word	0x3f621e56
 8001720:	7cbe419a 	.word	0x7cbe419a
 8001724:	3f47c599 	.word	0x3f47c599
 8001728:	5349edcf 	.word	0x5349edcf
 800172c:	3ece0c49 	.word	0x3ece0c49
 8001730:	200002e8 	.word	0x200002e8
 8001734:	200002a0 	.word	0x200002a0
 8001738:	08008030 	.word	0x08008030
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	200003c2 	.word	0x200003c2
 8001748:	200003b8 	.word	0x200003b8
 800174c:	200003b9 	.word	0x200003b9
 8001750:	200003ba 	.word	0x200003ba
 8001754:	200003bb 	.word	0x200003bb
 8001758:	200003bc 	.word	0x200003bc
 800175c:	200003c0 	.word	0x200003c0
 8001760:	200003be 	.word	0x200003be
 8001764:	40240000 	.word	0x40240000
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4640      	mov	r0, r8
 800176e:	4649      	mov	r1, r9
 8001770:	f7fe ff4a 	bl	8000608 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4620      	mov	r0, r4
 800177a:	4629      	mov	r1, r5
 800177c:	f7fe fd8c 	bl	8000298 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
	  float HI = -8.78469475556 + 1.61139411 * tem + 2.33854883889 * hu
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fa16 	bl	8000bb8 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0


	  //read gas and dust
read_sensor(&hadc1, GPIOA, GPIO_PIN_6);
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	494b      	ldr	r1, [pc, #300]	; (80018c4 <main+0x544>)
 8001796:	484c      	ldr	r0, [pc, #304]	; (80018c8 <main+0x548>)
 8001798:	f7ff fcf6 	bl	8001188 <read_sensor>
	  dust = dustandgas[0];
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <main+0x54c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	  gas=dustandgas[1];
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <main+0x54c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	 // check error
	if(hu>100 || tem > 50 || HI > 70){
 80017ac:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80017b0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80018d0 <main+0x550>
 80017b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017bc:	dc11      	bgt.n	80017e2 <main+0x462>
 80017be:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80017c2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80018d4 <main+0x554>
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	dc08      	bgt.n	80017e2 <main+0x462>
 80017d0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80017d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80018d8 <main+0x558>
 80017d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	dd03      	ble.n	80017ea <main+0x46a>
		HAL_Delay(100);
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f000 fdf6 	bl	80023d4 <HAL_Delay>
 80017e8:	e5f3      	b.n	80013d2 <main+0x52>
		continue;
	}


	//transit
	uint8_t sz=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	char buffer[150]="";
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2292      	movs	r2, #146	; 0x92
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fd11 	bl	8005224 <memset>
	sprintf(buffer,"%.1f|%.1f|%.2f|%.2f|%.2f\n",
 8001802:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	e9c7 0100 	strd	r0, r1, [r7]
 800180e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001812:	f7fe fea1 	bl	8000558 <__aeabi_f2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4680      	mov	r8, r0
 8001824:	4689      	mov	r9, r1
 8001826:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800182a:	f7fe fe95 	bl	8000558 <__aeabi_f2d>
 800182e:	4682      	mov	sl, r0
 8001830:	468b      	mov	fp, r1
 8001832:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	f107 0008 	add.w	r0, r7, #8
 8001842:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001846:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800184a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800184e:	e9cd 4500 	strd	r4, r5, [sp]
 8001852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001856:	4921      	ldr	r1, [pc, #132]	; (80018dc <main+0x55c>)
 8001858:	f004 f956 	bl	8005b08 <siprintf>
	hu,tem,dust,HI,gas);

	while(buffer[sz])
 800185c:	e004      	b.n	8001868 <main+0x4e8>
			sz++;
 800185e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001862:	3301      	adds	r3, #1
 8001864:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	while(buffer[sz])
 8001868:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800186c:	33b8      	adds	r3, #184	; 0xb8
 800186e:	f107 0208 	add.w	r2, r7, #8
 8001872:	4413      	add	r3, r2
 8001874:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <main+0x4de>

	HAL_UART_Transmit(&huart2, buffer, sz, HAL_MAX_DELAY);
 800187c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001880:	b29a      	uxth	r2, r3
 8001882:	f107 0108 	add.w	r1, r7, #8
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	4815      	ldr	r0, [pc, #84]	; (80018e0 <main+0x560>)
 800188c:	f003 f92b 	bl	8004ae6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,"\r", 1, HAL_MAX_DELAY);
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	2201      	movs	r2, #1
 8001896:	4913      	ldr	r1, [pc, #76]	; (80018e4 <main+0x564>)
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <main+0x560>)
 800189a:	f003 f924 	bl	8004ae6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, buffer, sz, HAL_MAX_DELAY);
 800189e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ac:	480e      	ldr	r0, [pc, #56]	; (80018e8 <main+0x568>)
 80018ae:	f003 f91a 	bl	8004ae6 <HAL_UART_Transmit>


	//check respon
	timechk=0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <main+0x56c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]

	// main delay
	HAL_Delay(5000);
 80018b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018bc:	f000 fd8a 	bl	80023d4 <HAL_Delay>
  {
 80018c0:	e587      	b.n	80013d2 <main+0x52>
 80018c2:	bf00      	nop
 80018c4:	40020000 	.word	0x40020000
 80018c8:	200001f8 	.word	0x200001f8
 80018cc:	200003c8 	.word	0x200003c8
 80018d0:	42c80000 	.word	0x42c80000
 80018d4:	42480000 	.word	0x42480000
 80018d8:	428c0000 	.word	0x428c0000
 80018dc:	08008010 	.word	0x08008010
 80018e0:	20000374 	.word	0x20000374
 80018e4:	0800802c 	.word	0x0800802c
 80018e8:	20000330 	.word	0x20000330
 80018ec:	200003c3 	.word	0x200003c3

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b094      	sub	sp, #80	; 0x50
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 0320 	add.w	r3, r7, #32
 80018fa:	2230      	movs	r2, #48	; 0x30
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 fc90 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <SystemClock_Config+0xcc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <SystemClock_Config+0xcc>)
 800191e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001922:	6413      	str	r3, [r2, #64]	; 0x40
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <SystemClock_Config+0xd0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <SystemClock_Config+0xd0>)
 800193a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001950:	2301      	movs	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001954:	2310      	movs	r3, #16
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2302      	movs	r3, #2
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800195c:	2300      	movs	r3, #0
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001960:	2310      	movs	r3, #16
 8001962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001964:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800196a:	2304      	movs	r3, #4
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800196e:	2304      	movs	r3, #4
 8001970:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001972:	f107 0320 	add.w	r3, r7, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f001 ff8a 	bl	8003890 <HAL_RCC_OscConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001982:	f000 f9fd 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198a:	2302      	movs	r3, #2
 800198c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2102      	movs	r1, #2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 f9ec 	bl	8003d80 <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ae:	f000 f9e7 	bl	8001d80 <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3750      	adds	r7, #80	; 0x50
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019d8:	4a28      	ldr	r2, [pc, #160]	; (8001a7c <MX_ADC1_Init+0xb8>)
 80019da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019dc:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80019ea:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <MX_ADC1_Init+0xb4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a06:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <MX_ADC1_Init+0xbc>)
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a12:	2202      	movs	r2, #2
 8001a14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a24:	4814      	ldr	r0, [pc, #80]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a26:	f000 fcf9 	bl	800241c <HAL_ADC_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a30:	f000 f9a6 	bl	8001d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a34:	230b      	movs	r3, #11
 8001a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a46:	f000 fe3b 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a50:	f000 f996 	bl	8001d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_ADC1_Init+0xb4>)
 8001a62:	f000 fe2d 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a6c:	f000 f988 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200001f8 	.word	0x200001f8
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	0f000001 	.word	0x0f000001

08001a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001aaa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aca:	4814      	ldr	r0, [pc, #80]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001acc:	f002 fb78 	bl	80041c0 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ad6:	f000 f953 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001ae8:	f002 fd24 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001af2:	f000 f945 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM2_Init+0x98>)
 8001b04:	f002 ff20 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b0e:	f000 f937 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002a0 	.word	0x200002a0

08001b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <MX_TIM3_Init+0x98>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b44:	2253      	movs	r2, #83	; 0x53
 8001b46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b62:	4814      	ldr	r0, [pc, #80]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b64:	f002 fb2c 	bl	80041c0 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f907 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b80:	f002 fcd8 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b8a:	f000 f8f9 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_TIM3_Init+0x94>)
 8001b9c:	f002 fed4 	bl	8004948 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ba6:	f000 f8eb 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002e8 	.word	0x200002e8
 8001bb8:	40000400 	.word	0x40000400

08001bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	4a12      	ldr	r2, [pc, #72]	; (8001c0c <MX_USART1_UART_Init+0x50>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	f002 ff2a 	bl	8004a4c <HAL_UART_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bfe:	f000 f8bf 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000330 	.word	0x20000330
 8001c0c:	40011000 	.word	0x40011000

08001c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <MX_USART2_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <MX_USART2_UART_Init+0x4c>)
 8001c48:	f002 ff00 	bl	8004a4c <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f000 f895 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000374 	.word	0x20000374
 8001c60:	40004400 	.word	0x40004400

08001c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_DMA_Init+0x3c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2038      	movs	r0, #56	; 0x38
 8001c8c:	f001 f8a3 	bl	8002dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c90:	2038      	movs	r0, #56	; 0x38
 8001c92:	f001 f8bc 	bl	8002e0e <HAL_NVIC_EnableIRQ>

}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a2c      	ldr	r2, [pc, #176]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a25      	ldr	r2, [pc, #148]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_GPIO_Init+0xd0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2160      	movs	r1, #96	; 0x60
 8001d2e:	4812      	ldr	r0, [pc, #72]	; (8001d78 <MX_GPIO_Init+0xd4>)
 8001d30:	f001 fd94 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MX_GPIO_Init+0xd8>)
 8001d4c:	f001 fbea 	bl	8003524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 8001d50:	2360      	movs	r3, #96	; 0x60
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <MX_GPIO_Init+0xd4>)
 8001d68:	f001 fbdc 	bl	8003524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020800 	.word	0x40020800

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
	...

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f000 fff8 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <HAL_ADC_MspInit+0x10c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d170      	bne.n	8001ee0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a39      	ldr	r2, [pc, #228]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b37      	ldr	r3, [pc, #220]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a32      	ldr	r2, [pc, #200]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_ADC_MspInit+0x110>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e52:	2302      	movs	r3, #2
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e56:	2303      	movs	r3, #3
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4822      	ldr	r0, [pc, #136]	; (8001ef0 <HAL_ADC_MspInit+0x114>)
 8001e66:	f001 fb5d 	bl	8003524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481d      	ldr	r0, [pc, #116]	; (8001ef4 <HAL_ADC_MspInit+0x118>)
 8001e7e:	f001 fb51 	bl	8003524 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_ADC_MspInit+0x120>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001ec6:	f000 ffbd 	bl	8002e44 <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001ed0:	f7ff ff56 	bl	8001d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eda:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_ADC_MspInit+0x11c>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40012000 	.word	0x40012000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	20000240 	.word	0x20000240
 8001efc:	40026410 	.word	0x40026410

08001f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f10:	d116      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2102      	movs	r1, #2
 8001f32:	201c      	movs	r0, #28
 8001f34:	f000 ff4f 	bl	8002dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f38:	201c      	movs	r0, #28
 8001f3a:	f000 ff68 	bl	8002e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f3e:	e012      	b.n	8001f66 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <HAL_TIM_Base_MspInit+0x74>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10d      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_TIM_Base_MspInit+0x70>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40000400 	.word	0x40000400

08001f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08c      	sub	sp, #48	; 0x30
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a32      	ldr	r2, [pc, #200]	; (8002060 <HAL_UART_MspInit+0xe8>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12d      	bne.n	8001ff6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fa4:	f043 0310 	orr.w	r3, r3, #16
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_UART_MspInit+0xec>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	481e      	ldr	r0, [pc, #120]	; (8002068 <HAL_UART_MspInit+0xf0>)
 8001ff0:	f001 fa98 	bl	8003524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff4:	e030      	b.n	8002058 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_UART_MspInit+0xf4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d12b      	bne.n	8002058 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_UART_MspInit+0xec>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_UART_MspInit+0xec>)
 800200a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_UART_MspInit+0xec>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_UART_MspInit+0xec>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_UART_MspInit+0xec>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_UART_MspInit+0xec>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002038:	230c      	movs	r3, #12
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002048:	2307      	movs	r3, #7
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_UART_MspInit+0xf0>)
 8002054:	f001 fa66 	bl	8003524 <HAL_GPIO_Init>
}
 8002058:	bf00      	nop
 800205a:	3730      	adds	r7, #48	; 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40011000 	.word	0x40011000
 8002064:	40023800 	.word	0x40023800
 8002068:	40020000 	.word	0x40020000
 800206c:	40004400 	.word	0x40004400

08002070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <NMI_Handler+0x4>

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 f96a 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <TIM2_IRQHandler+0x10>)
 80020ca:	f002 f92b 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200002a0 	.word	0x200002a0

080020d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA2_Stream0_IRQHandler+0x10>)
 80020de:	f000 ffb7 	bl	8003050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000240 	.word	0x20000240

080020ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_kill>:

int _kill(int pid, int sig)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002106:	f003 f863 	bl	80051d0 <__errno>
 800210a:	4603      	mov	r3, r0
 800210c:	2216      	movs	r2, #22
 800210e:	601a      	str	r2, [r3, #0]
  return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_exit>:

void _exit (int status)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffe7 	bl	80020fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800212e:	e7fe      	b.n	800212e <_exit+0x12>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
  }

  return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
  }
  return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
  return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f002 ffc8 	bl	80051d0 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20020000 	.word	0x20020000
 800226c:	00000400 	.word	0x00000400
 8002270:	200003d0 	.word	0x200003d0
 8002274:	200003e8 	.word	0x200003e8

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a2:	490e      	ldr	r1, [pc, #56]	; (80022dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b8:	4c0b      	ldr	r4, [pc, #44]	; (80022e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c6:	f7ff ffd7 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f002 ff87 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff f857 	bl	8001380 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80022e0:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 80022e4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80022e8:	200003e8 	.word	0x200003e8

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_Init+0x40>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_Init+0x40>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_Init+0x40>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 fd51 	bl	8002dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f808 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fd32 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd69 	bl	8002e2a <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f000 fd31 	bl	8002dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000000 	.word	0x20000000
 800238c:	20000008 	.word	0x20000008
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008
 80023b8:	200003d4 	.word	0x200003d4

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200003d4 	.word	0x200003d4

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000008 	.word	0x20000008

0800241c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e033      	b.n	800249a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fcce 	bl	8001ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d118      	bne.n	800248c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002462:	f023 0302 	bic.w	r3, r3, #2
 8002466:	f043 0202 	orr.w	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa58 	bl	8002924 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f023 0303 	bic.w	r3, r3, #3
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40
 800248a:	e001      	b.n	8002490 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_ADC_Start_DMA+0x1e>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0ce      	b.n	8002660 <HAL_ADC_Start_DMA+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d018      	beq.n	800250a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e8:	4b5f      	ldr	r3, [pc, #380]	; (8002668 <HAL_ADC_Start_DMA+0x1c4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5f      	ldr	r2, [pc, #380]	; (800266c <HAL_ADC_Start_DMA+0x1c8>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0c9a      	lsrs	r2, r3, #18
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024fc:	e002      	b.n	8002504 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	3b01      	subs	r3, #1
 8002502:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002518:	d107      	bne.n	800252a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002528:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 8086 	bne.w	8002646 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002564:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002578:	d106      	bne.n	8002588 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f023 0206 	bic.w	r2, r3, #6
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
 8002586:	e002      	b.n	800258e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_ADC_Start_DMA+0x1cc>)
 8002598:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	4a35      	ldr	r2, [pc, #212]	; (8002674 <HAL_ADC_Start_DMA+0x1d0>)
 80025a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	4a34      	ldr	r2, [pc, #208]	; (8002678 <HAL_ADC_Start_DMA+0x1d4>)
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_ADC_Start_DMA+0x1d8>)
 80025b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	334c      	adds	r3, #76	; 0x4c
 80025e6:	4619      	mov	r1, r3
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f000 fcd8 	bl	8002fa0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10f      	bne.n	800261c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d129      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	e020      	b.n	800265e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_ADC_Start_DMA+0x1dc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d11b      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d114      	bne.n	800265e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	e00b      	b.n	800265e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000000 	.word	0x20000000
 800266c:	431bde83 	.word	0x431bde83
 8002670:	40012300 	.word	0x40012300
 8002674:	08002b1d 	.word	0x08002b1d
 8002678:	08002bd7 	.word	0x08002bd7
 800267c:	08002bf3 	.word	0x08002bf3
 8002680:	40012000 	.word	0x40012000

08002684 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x1c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e113      	b.n	8002904 <HAL_ADC_ConfigChannel+0x244>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d925      	bls.n	8002738 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68d9      	ldr	r1, [r3, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	3b1e      	subs	r3, #30
 8002702:	2207      	movs	r2, #7
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43da      	mvns	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	400a      	ands	r2, r1
 8002710:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68d9      	ldr	r1, [r3, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	4603      	mov	r3, r0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4403      	add	r3, r0
 800272a:	3b1e      	subs	r3, #30
 800272c:	409a      	lsls	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	e022      	b.n	800277e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	2207      	movs	r2, #7
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	400a      	ands	r2, r1
 800275a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6919      	ldr	r1, [r3, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	4603      	mov	r3, r0
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4403      	add	r3, r0
 8002774:	409a      	lsls	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d824      	bhi.n	80027d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	3b05      	subs	r3, #5
 8002798:	221f      	movs	r2, #31
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b05      	subs	r3, #5
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	635a      	str	r2, [r3, #52]	; 0x34
 80027ce:	e04c      	b.n	800286a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d824      	bhi.n	8002822 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b23      	subs	r3, #35	; 0x23
 80027ea:	221f      	movs	r2, #31
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	4618      	mov	r0, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	3b23      	subs	r3, #35	; 0x23
 8002814:	fa00 f203 	lsl.w	r2, r0, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	e023      	b.n	800286a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b41      	subs	r3, #65	; 0x41
 8002834:	221f      	movs	r2, #31
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	400a      	ands	r2, r1
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	4618      	mov	r0, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b41      	subs	r3, #65	; 0x41
 800285e:	fa00 f203 	lsl.w	r2, r0, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_ADC_ConfigChannel+0x250>)
 800286c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_ADC_ConfigChannel+0x254>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10f      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1d8>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b12      	cmp	r3, #18
 800287e:	d10b      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a1d      	ldr	r2, [pc, #116]	; (8002914 <HAL_ADC_ConfigChannel+0x254>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d12b      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x23a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1c      	ldr	r2, [pc, #112]	; (8002918 <HAL_ADC_ConfigChannel+0x258>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d003      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x1f4>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b11      	cmp	r3, #17
 80028b2:	d122      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_ADC_ConfigChannel+0x258>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d111      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028d6:	4b11      	ldr	r3, [pc, #68]	; (800291c <HAL_ADC_ConfigChannel+0x25c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_ADC_ConfigChannel+0x260>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	0c9a      	lsrs	r2, r3, #18
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f9      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40012300 	.word	0x40012300
 8002914:	40012000 	.word	0x40012000
 8002918:	10000012 	.word	0x10000012
 800291c:	20000000 	.word	0x20000000
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292c:	4b79      	ldr	r3, [pc, #484]	; (8002b14 <ADC_Init+0x1f0>)
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	431a      	orrs	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800297c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6899      	ldr	r1, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <ADC_Init+0x1f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	e00f      	b.n	8002a22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0202 	bic.w	r2, r2, #2
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	035a      	lsls	r2, r3, #13
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	e007      	b.n	8002a98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	051a      	lsls	r2, r3, #20
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ada:	025a      	lsls	r2, r3, #9
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6899      	ldr	r1, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	029a      	lsls	r2, r3, #10
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	40012300 	.word	0x40012300
 8002b18:	0f000001 	.word	0x0f000001

08002b1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13c      	bne.n	8002bb0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d12b      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d127      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d119      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0220 	bic.w	r2, r2, #32
 8002b82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd6b 	bl	8002684 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bae:	e00e      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fd75 	bl	80026ac <HAL_ADC_ErrorCallback>
}
 8002bc2:	e004      	b.n	8002bce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	4798      	blx	r3
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff fd57 	bl	8002698 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2240      	movs	r2, #64	; 0x40
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff fd4a 	bl	80026ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <__NVIC_SetPriorityGrouping>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c52:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <__NVIC_SetPriorityGrouping+0x44>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	60d3      	str	r3, [r2, #12]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_GetPriorityGrouping>:
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <__NVIC_GetPriorityGrouping+0x18>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	f003 0307 	and.w	r3, r3, #7
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_EnableIRQ>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	db0b      	blt.n	8002cae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	f003 021f 	and.w	r2, r3, #31
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <__NVIC_EnableIRQ+0x38>)
 8002c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8002caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <__NVIC_SetPriority>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db0a      	blt.n	8002cea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	490c      	ldr	r1, [pc, #48]	; (8002d0c <__NVIC_SetPriority+0x4c>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	0112      	lsls	r2, r2, #4
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ce8:	e00a      	b.n	8002d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4908      	ldr	r1, [pc, #32]	; (8002d10 <__NVIC_SetPriority+0x50>)
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	761a      	strb	r2, [r3, #24]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000e100 	.word	0xe000e100
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <NVIC_EncodePriority>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f1c3 0307 	rsb	r3, r3, #7
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	bf28      	it	cs
 8002d32:	2304      	movcs	r3, #4
 8002d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d902      	bls.n	8002d44 <NVIC_EncodePriority+0x30>
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3b03      	subs	r3, #3
 8002d42:	e000      	b.n	8002d46 <NVIC_EncodePriority+0x32>
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	401a      	ands	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	fa01 f303 	lsl.w	r3, r1, r3
 8002d66:	43d9      	mvns	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d6c:	4313      	orrs	r3, r2
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d8c:	d301      	bcc.n	8002d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e00f      	b.n	8002db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <SysTick_Config+0x40>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	f7ff ff8e 	bl	8002cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <SysTick_Config+0x40>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <SysTick_Config+0x40>)
 8002dac:	2207      	movs	r2, #7
 8002dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	e000e010 	.word	0xe000e010

08002dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff29 	bl	8002c20 <__NVIC_SetPriorityGrouping>
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de8:	f7ff ff3e 	bl	8002c68 <__NVIC_GetPriorityGrouping>
 8002dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	6978      	ldr	r0, [r7, #20]
 8002df4:	f7ff ff8e 	bl	8002d14 <NVIC_EncodePriority>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff5d 	bl	8002cc0 <__NVIC_SetPriority>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff31 	bl	8002c84 <__NVIC_EnableIRQ>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffa2 	bl	8002d7c <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff fab4 	bl	80023bc <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e099      	b.n	8002f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e80:	e00f      	b.n	8002ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e82:	f7ff fa9b 	bl	80023bc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d908      	bls.n	8002ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e078      	b.n	8002f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e8      	bne.n	8002e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_DMA_Init+0x158>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d107      	bne.n	8002f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	4313      	orrs	r3, r2
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0307 	bic.w	r3, r3, #7
 8002f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d117      	bne.n	8002f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00e      	beq.n	8002f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fa6f 	bl	800342c <DMA_CheckFifoParam>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f62:	2301      	movs	r3, #1
 8002f64:	e016      	b.n	8002f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa26 	bl	80033c0 <DMA_CalcBaseAndBitshift>
 8002f74:	4603      	mov	r3, r0
 8002f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	223f      	movs	r2, #63	; 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	f010803f 	.word	0xf010803f

08002fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_Start_IT+0x26>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e040      	b.n	8003048 <HAL_DMA_Start_IT+0xa8>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d12f      	bne.n	800303a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f9b8 	bl	8003364 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	223f      	movs	r2, #63	; 0x3f
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0216 	orr.w	r2, r2, #22
 800300e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e005      	b.n	8003046 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003046:	7dfb      	ldrb	r3, [r7, #23]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800305c:	4b8e      	ldr	r3, [pc, #568]	; (8003298 <HAL_DMA_IRQHandler+0x248>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8e      	ldr	r2, [pc, #568]	; (800329c <HAL_DMA_IRQHandler+0x24c>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0a9b      	lsrs	r3, r3, #10
 8003068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2208      	movs	r2, #8
 800307c:	409a      	lsls	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0204 	bic.w	r2, r2, #4
 80030a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	2208      	movs	r2, #8
 80030aa:	409a      	lsls	r2, r3
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	2201      	movs	r2, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2201      	movs	r2, #1
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	2204      	movs	r2, #4
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d012      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003114:	2204      	movs	r2, #4
 8003116:	409a      	lsls	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f043 0204 	orr.w	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	2210      	movs	r2, #16
 800312e:	409a      	lsls	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d043      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03c      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314a:	2210      	movs	r2, #16
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d018      	beq.n	8003192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d024      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
 800317e:	e01f      	b.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003184:	2b00      	cmp	r3, #0
 8003186:	d01b      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
 8003190:	e016      	b.n	80031c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0208 	bic.w	r2, r2, #8
 80031ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2220      	movs	r2, #32
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 808f 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8087 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	2220      	movs	r2, #32
 80031e8:	409a      	lsls	r2, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d136      	bne.n	8003268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0216 	bic.w	r2, r2, #22
 8003208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_DMA_IRQHandler+0x1da>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0208 	bic.w	r2, r2, #8
 8003238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	223f      	movs	r2, #63	; 0x3f
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d07e      	beq.n	800335c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
        }
        return;
 8003266:	e079      	b.n	800335c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	2b00      	cmp	r3, #0
 800328a:	d031      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e02c      	b.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000
 800329c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e01e      	b.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0210 	bic.w	r2, r2, #16
 80032ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d032      	beq.n	800335e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d022      	beq.n	800334a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2205      	movs	r2, #5
 8003308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3301      	adds	r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	429a      	cmp	r2, r3
 8003326:	d307      	bcc.n	8003338 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f2      	bne.n	800331c <HAL_DMA_IRQHandler+0x2cc>
 8003336:	e000      	b.n	800333a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003338:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
 800335a:	e000      	b.n	800335e <HAL_DMA_IRQHandler+0x30e>
        return;
 800335c:	bf00      	nop
    }
  }
}
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003380:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d108      	bne.n	80033a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033a2:	e007      	b.n	80033b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3b10      	subs	r3, #16
 80033d0:	4a14      	ldr	r2, [pc, #80]	; (8003424 <DMA_CalcBaseAndBitshift+0x64>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	091b      	lsrs	r3, r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033da:	4a13      	ldr	r2, [pc, #76]	; (8003428 <DMA_CalcBaseAndBitshift+0x68>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d909      	bls.n	8003402 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	1d1a      	adds	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	659a      	str	r2, [r3, #88]	; 0x58
 8003400:	e007      	b.n	8003412 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	aaaaaaab 	.word	0xaaaaaaab
 8003428:	08008050 	.word	0x08008050

0800342c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11f      	bne.n	8003486 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d856      	bhi.n	80034fa <DMA_CheckFifoParam+0xce>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <DMA_CheckFifoParam+0x28>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003465 	.word	0x08003465
 8003458:	08003477 	.word	0x08003477
 800345c:	08003465 	.word	0x08003465
 8003460:	080034fb 	.word	0x080034fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d046      	beq.n	80034fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003474:	e043      	b.n	80034fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800347e:	d140      	bne.n	8003502 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e03d      	b.n	8003502 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d121      	bne.n	80034d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d837      	bhi.n	8003506 <DMA_CheckFifoParam+0xda>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <DMA_CheckFifoParam+0x70>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	080034b3 	.word	0x080034b3
 80034a4:	080034ad 	.word	0x080034ad
 80034a8:	080034c5 	.word	0x080034c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      break;
 80034b0:	e030      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d025      	beq.n	800350a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c2:	e022      	b.n	800350a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d2:	e01c      	b.n	800350e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d903      	bls.n	80034e2 <DMA_CheckFifoParam+0xb6>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d003      	beq.n	80034e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e0:	e018      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
      break;
 80034e6:	e015      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00e      	beq.n	8003512 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e00b      	b.n	8003512 <DMA_CheckFifoParam+0xe6>
      break;
 80034fa:	bf00      	nop
 80034fc:	e00a      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
 8003500:	e008      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e006      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e004      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e002      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;   
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <DMA_CheckFifoParam+0xe8>
      break;
 8003512:	bf00      	nop
    }
  } 
  
  return status; 
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	; 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	e159      	b.n	80037f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003540:	2201      	movs	r2, #1
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	429a      	cmp	r2, r3
 800355a:	f040 8148 	bne.w	80037ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d005      	beq.n	8003576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003572:	2b02      	cmp	r3, #2
 8003574:	d130      	bne.n	80035d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ac:	2201      	movs	r2, #1
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 0201 	and.w	r2, r3, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d017      	beq.n	8003614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d123      	bne.n	8003668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	08da      	lsrs	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3208      	adds	r2, #8
 8003628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	69b9      	ldr	r1, [r7, #24]
 8003664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	2203      	movs	r2, #3
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a2 	beq.w	80037ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <HAL_GPIO_Init+0x2e8>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	4a56      	ldr	r2, [pc, #344]	; (800380c <HAL_GPIO_Init+0x2e8>)
 80036b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_GPIO_Init+0x2e8>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036c6:	4a52      	ldr	r2, [pc, #328]	; (8003810 <HAL_GPIO_Init+0x2ec>)
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	3302      	adds	r3, #2
 80036ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	220f      	movs	r2, #15
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a49      	ldr	r2, [pc, #292]	; (8003814 <HAL_GPIO_Init+0x2f0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d019      	beq.n	8003726 <HAL_GPIO_Init+0x202>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a48      	ldr	r2, [pc, #288]	; (8003818 <HAL_GPIO_Init+0x2f4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_GPIO_Init+0x1fe>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a47      	ldr	r2, [pc, #284]	; (800381c <HAL_GPIO_Init+0x2f8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_GPIO_Init+0x1fa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <HAL_GPIO_Init+0x2fc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_GPIO_Init+0x1f6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a45      	ldr	r2, [pc, #276]	; (8003824 <HAL_GPIO_Init+0x300>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_GPIO_Init+0x1f2>
 8003712:	2304      	movs	r3, #4
 8003714:	e008      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003716:	2307      	movs	r3, #7
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x204>
 800371a:	2303      	movs	r3, #3
 800371c:	e004      	b.n	8003728 <HAL_GPIO_Init+0x204>
 800371e:	2302      	movs	r3, #2
 8003720:	e002      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_GPIO_Init+0x204>
 8003726:	2300      	movs	r3, #0
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f002 0203 	and.w	r2, r2, #3
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	4093      	lsls	r3, r2
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003738:	4935      	ldr	r1, [pc, #212]	; (8003810 <HAL_GPIO_Init+0x2ec>)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	3302      	adds	r3, #2
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003746:	4b38      	ldr	r3, [pc, #224]	; (8003828 <HAL_GPIO_Init+0x304>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <HAL_GPIO_Init+0x304>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003794:	4a24      	ldr	r2, [pc, #144]	; (8003828 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_GPIO_Init+0x304>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037be:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_GPIO_Init+0x304>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c4:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_GPIO_Init+0x304>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e8:	4a0f      	ldr	r2, [pc, #60]	; (8003828 <HAL_GPIO_Init+0x304>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	f67f aea2 	bls.w	8003540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	40013800 	.word	0x40013800
 8003814:	40020000 	.word	0x40020000
 8003818:	40020400 	.word	0x40020400
 800381c:	40020800 	.word	0x40020800
 8003820:	40020c00 	.word	0x40020c00
 8003824:	40021000 	.word	0x40021000
 8003828:	40013c00 	.word	0x40013c00

0800382c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
 8003848:	e001      	b.n	800384e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	619a      	str	r2, [r3, #24]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e267      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d075      	beq.n	800399a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ae:	4b88      	ldr	r3, [pc, #544]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d00c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ba:	4b85      	ldr	r3, [pc, #532]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d112      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c6:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038d2:	d10b      	bne.n	80038ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d05b      	beq.n	8003998 <HAL_RCC_OscConfig+0x108>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d157      	bne.n	8003998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e242      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x74>
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a75      	ldr	r2, [pc, #468]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e01d      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x98>
 800390e:	4b70      	ldr	r3, [pc, #448]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6f      	ldr	r2, [pc, #444]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a6c      	ldr	r2, [pc, #432]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e00b      	b.n	8003940 <HAL_RCC_OscConfig+0xb0>
 8003928:	4b69      	ldr	r3, [pc, #420]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a68      	ldr	r2, [pc, #416]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 800392e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	4b66      	ldr	r3, [pc, #408]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a65      	ldr	r2, [pc, #404]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 800393a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fd38 	bl	80023bc <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7fe fd34 	bl	80023bc <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e207      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b5b      	ldr	r3, [pc, #364]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0xc0>
 800396e:	e014      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fd24 	bl	80023bc <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe fd20 	bl	80023bc <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	; 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1f3      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0xe8>
 8003996:	e000      	b.n	800399a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d063      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039a6:	4b4a      	ldr	r3, [pc, #296]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b2:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d11c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039be:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d005      	beq.n	80039e2 <HAL_RCC_OscConfig+0x152>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d001      	beq.n	80039e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e1c7      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e2:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f6:	e03a      	b.n	8003a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a00:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x244>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe fcd9 	bl	80023bc <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe fcd5 	bl	80023bc <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e1a8      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0f0      	beq.n	8003a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2c:	4b28      	ldr	r3, [pc, #160]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4925      	ldr	r1, [pc, #148]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]
 8003a40:	e015      	b.n	8003a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_OscConfig+0x244>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fcb8 	bl	80023bc <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a50:	f7fe fcb4 	bl	80023bc <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e187      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d036      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a82:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <HAL_RCC_OscConfig+0x248>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fe fc98 	bl	80023bc <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fe fc94 	bl	80023bc <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e167      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x200>
 8003aae:	e01b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_OscConfig+0x248>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fc81 	bl	80023bc <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abc:	e00e      	b.n	8003adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003abe:	f7fe fc7d 	bl	80023bc <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d907      	bls.n	8003adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e150      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	42470000 	.word	0x42470000
 8003ad8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003adc:	4b88      	ldr	r3, [pc, #544]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ea      	bne.n	8003abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8097 	beq.w	8003c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afa:	4b81      	ldr	r3, [pc, #516]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	4b7d      	ldr	r3, [pc, #500]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	4a7c      	ldr	r2, [pc, #496]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6413      	str	r3, [r2, #64]	; 0x40
 8003b16:	4b7a      	ldr	r3, [pc, #488]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b77      	ldr	r3, [pc, #476]	; (8003d04 <HAL_RCC_OscConfig+0x474>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b74      	ldr	r3, [pc, #464]	; (8003d04 <HAL_RCC_OscConfig+0x474>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a73      	ldr	r2, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x474>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe fc3d 	bl	80023bc <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fe fc39 	bl	80023bc <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e10c      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x474>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x2ea>
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a63      	ldr	r2, [pc, #396]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
 8003b78:	e01c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x324>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x30c>
 8003b82:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b86:	4a5e      	ldr	r2, [pc, #376]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8e:	4b5c      	ldr	r3, [pc, #368]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a5b      	ldr	r2, [pc, #364]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0x324>
 8003b9c:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a57      	ldr	r2, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a54      	ldr	r2, [pc, #336]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003bae:	f023 0304 	bic.w	r3, r3, #4
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d015      	beq.n	8003be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fe fbfe 	bl	80023bc <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fbfa 	bl	80023bc <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e0cb      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0ee      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x334>
 8003be6:	e014      	b.n	8003c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be8:	f7fe fbe8 	bl	80023bc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fbe4 	bl	80023bc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0b5      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c06:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ee      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	4a38      	ldr	r2, [pc, #224]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80a1 	beq.w	8003d70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c2e:	4b34      	ldr	r3, [pc, #208]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d05c      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d141      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_RCC_OscConfig+0x478>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe fbb8 	bl	80023bc <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe fbb4 	bl	80023bc <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e087      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	3b01      	subs	r3, #1
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	061b      	lsls	r3, r3, #24
 8003c92:	491b      	ldr	r1, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <HAL_RCC_OscConfig+0x478>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fb8d 	bl	80023bc <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fb89 	bl	80023bc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e05c      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x416>
 8003cc4:	e054      	b.n	8003d70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_OscConfig+0x478>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fb76 	bl	80023bc <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe fb72 	bl	80023bc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e045      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x444>
 8003cf2:	e03d      	b.n	8003d70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e038      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40007000 	.word	0x40007000
 8003d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x4ec>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d028      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d121      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d11a      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d111      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	3b01      	subs	r3, #1
 8003d56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800

08003d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0cc      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d90c      	bls.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b63      	ldr	r3, [pc, #396]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0b8      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d020      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a52      	ldr	r2, [pc, #328]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b50      	ldr	r3, [pc, #320]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	494d      	ldr	r1, [pc, #308]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d044      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d107      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1e:	4b47      	ldr	r3, [pc, #284]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d119      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e06f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e067      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e5e:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4934      	ldr	r1, [pc, #208]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fe faa4 	bl	80023bc <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e78:	f7fe faa0 	bl	80023bc <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e04f      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 020c 	and.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d1eb      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d20c      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e032      	b.n	8003f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f06:	f000 f821 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	490a      	ldr	r1, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x1c0>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fa04 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023c00 	.word	0x40023c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08008038 	.word	0x08008038
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f50:	b094      	sub	sp, #80	; 0x50
 8003f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	647b      	str	r3, [r7, #68]	; 0x44
 8003f58:	2300      	movs	r3, #0
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d00d      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x40>
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	f200 80e1 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7e:	e0db      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f80:	4b73      	ldr	r3, [pc, #460]	; (8004150 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f84:	e0db      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f86:	4b73      	ldr	r3, [pc, #460]	; (8004154 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8a:	e0d8      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d063      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd0:	0150      	lsls	r0, r2, #5
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	1a51      	subs	r1, r2, r1
 8003fda:	6139      	str	r1, [r7, #16]
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ff0:	4659      	mov	r1, fp
 8003ff2:	018b      	lsls	r3, r1, #6
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffa:	4651      	mov	r1, sl
 8003ffc:	018a      	lsls	r2, r1, #6
 8003ffe:	4651      	mov	r1, sl
 8004000:	ebb2 0801 	subs.w	r8, r2, r1
 8004004:	4659      	mov	r1, fp
 8004006:	eb63 0901 	sbc.w	r9, r3, r1
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800401e:	4690      	mov	r8, r2
 8004020:	4699      	mov	r9, r3
 8004022:	4623      	mov	r3, r4
 8004024:	eb18 0303 	adds.w	r3, r8, r3
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	462b      	mov	r3, r5
 800402c:	eb49 0303 	adc.w	r3, r9, r3
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800403e:	4629      	mov	r1, r5
 8004040:	024b      	lsls	r3, r1, #9
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004048:	4621      	mov	r1, r4
 800404a:	024a      	lsls	r2, r1, #9
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004052:	2200      	movs	r2, #0
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800405c:	f7fc fdfc 	bl	8000c58 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4613      	mov	r3, r2
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004068:	e058      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406a:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	2200      	movs	r2, #0
 8004072:	4618      	mov	r0, r3
 8004074:	4611      	mov	r1, r2
 8004076:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	2300      	movs	r3, #0
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
 8004080:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004084:	4642      	mov	r2, r8
 8004086:	464b      	mov	r3, r9
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004096:	0150      	lsls	r0, r2, #5
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4641      	mov	r1, r8
 800409e:	ebb2 0a01 	subs.w	sl, r2, r1
 80040a2:	4649      	mov	r1, r9
 80040a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040bc:	ebb2 040a 	subs.w	r4, r2, sl
 80040c0:	eb63 050b 	sbc.w	r5, r3, fp
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	00eb      	lsls	r3, r5, #3
 80040ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d2:	00e2      	lsls	r2, r4, #3
 80040d4:	4614      	mov	r4, r2
 80040d6:	461d      	mov	r5, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	18e3      	adds	r3, r4, r3
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	464b      	mov	r3, r9
 80040e0:	eb45 0303 	adc.w	r3, r5, r3
 80040e4:	607b      	str	r3, [r7, #4]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f2:	4629      	mov	r1, r5
 80040f4:	028b      	lsls	r3, r1, #10
 80040f6:	4621      	mov	r1, r4
 80040f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040fc:	4621      	mov	r1, r4
 80040fe:	028a      	lsls	r2, r1, #10
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004106:	2200      	movs	r2, #0
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	61fa      	str	r2, [r7, #28]
 800410c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004110:	f7fc fda2 	bl	8000c58 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4613      	mov	r3, r2
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_GetSysClockFreq+0x200>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	3301      	adds	r3, #1
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800412c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004136:	e002      	b.n	800413e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x204>)
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800413c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800413e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004140:	4618      	mov	r0, r3
 8004142:	3750      	adds	r7, #80	; 0x50
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	00f42400 	.word	0x00f42400
 8004154:	007a1200 	.word	0x007a1200

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000000 	.word	0x20000000

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08008048 	.word	0x08008048

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff ffdc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	08008048 	.word	0x08008048

080041c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e041      	b.n	8004256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd fe8a 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4619      	mov	r1, r3
 80041fe:	4610      	mov	r0, r2
 8004200:	f000 fa88 	bl	8004714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e044      	b.n	8004302 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <HAL_TIM_Base_Start_IT+0xb0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a2:	d013      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1a      	ldr	r2, [pc, #104]	; (8004314 <HAL_TIM_Base_Start_IT+0xb4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a19      	ldr	r2, [pc, #100]	; (8004318 <HAL_TIM_Base_Start_IT+0xb8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	; (800431c <HAL_TIM_Base_Start_IT+0xbc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_TIM_Base_Start_IT+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	; (8004320 <HAL_TIM_Base_Start_IT+0xc0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d010      	beq.n	8004300 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042ee:	e007      	b.n	8004300 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	d122      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b02      	cmp	r3, #2
 8004346:	d11b      	bne.n	8004380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0202 	mvn.w	r2, #2
 8004350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f9b5 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 800436c:	e005      	b.n	800437a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f9a7 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f9b8 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b04      	cmp	r3, #4
 800438c:	d122      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d11b      	bne.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0204 	mvn.w	r2, #4
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f98b 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f97d 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f98e 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d122      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d11b      	bne.n	8004428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0208 	mvn.w	r2, #8
 80043f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2204      	movs	r2, #4
 80043fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f961 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 8004414:	e005      	b.n	8004422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f953 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f964 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b10      	cmp	r3, #16
 8004434:	d122      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d11b      	bne.n	800447c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f06f 0210 	mvn.w	r2, #16
 800444c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2208      	movs	r2, #8
 8004452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f937 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 8004468:	e005      	b.n	8004476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f929 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f93a 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0201 	mvn.w	r2, #1
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc ff56 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d10e      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d107      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fab2 	bl	8004a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d10e      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d107      	bne.n	8004500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8ff 	bl	80046fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d10e      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d107      	bne.n	800452c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0220 	mvn.w	r2, #32
 8004524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa7c 	bl	8004a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIM_ConfigClockSource+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0b4      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x186>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	d03e      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xd4>
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458e:	f200 8087 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	f000 8086 	beq.w	80046a6 <HAL_TIM_ConfigClockSource+0x172>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	d87f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d01a      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xa6>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d87b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b60      	cmp	r3, #96	; 0x60
 80045aa:	d050      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x11a>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d877      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b50      	cmp	r3, #80	; 0x50
 80045b2:	d03c      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xfa>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d873      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d058      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x13a>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d86f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b30      	cmp	r3, #48	; 0x30
 80045c2:	d064      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d867      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d05a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	e062      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f000 f98d 	bl	8004908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f000 f976 	bl	8004908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	f000 f8ea 	bl	8004814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f943 	bl	80048d2 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	461a      	mov	r2, r3
 800465c:	f000 f909 	bl	8004872 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f933 	bl	80048d2 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f000 f8ca 	bl	8004814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f923 	bl	80048d2 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 f91a 	bl	80048d2 <TIM_ITRx_SetConfig>
      break;
 800469e:	e003      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a34      	ldr	r2, [pc, #208]	; (80047f8 <TIM_Base_SetConfig+0xe4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00f      	beq.n	800474c <TIM_Base_SetConfig+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d00b      	beq.n	800474c <TIM_Base_SetConfig+0x38>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a31      	ldr	r2, [pc, #196]	; (80047fc <TIM_Base_SetConfig+0xe8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d007      	beq.n	800474c <TIM_Base_SetConfig+0x38>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a30      	ldr	r2, [pc, #192]	; (8004800 <TIM_Base_SetConfig+0xec>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d003      	beq.n	800474c <TIM_Base_SetConfig+0x38>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2f      	ldr	r2, [pc, #188]	; (8004804 <TIM_Base_SetConfig+0xf0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d108      	bne.n	800475e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <TIM_Base_SetConfig+0xe4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01b      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d017      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a22      	ldr	r2, [pc, #136]	; (80047fc <TIM_Base_SetConfig+0xe8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a21      	ldr	r2, [pc, #132]	; (8004800 <TIM_Base_SetConfig+0xec>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00f      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <TIM_Base_SetConfig+0xf0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <TIM_Base_SetConfig+0xf4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1e      	ldr	r2, [pc, #120]	; (800480c <TIM_Base_SetConfig+0xf8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x8a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <TIM_Base_SetConfig+0xfc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <TIM_Base_SetConfig+0xe4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000
 800480c:	40014400 	.word	0x40014400
 8004810:	40014800 	.word	0x40014800

08004814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 030a 	bic.w	r3, r3, #10
 8004850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004872:	b480      	push	{r7}
 8004874:	b087      	sub	sp, #28
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	f023 0210 	bic.w	r2, r3, #16
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800489c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f043 0307 	orr.w	r3, r3, #7
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	609a      	str	r2, [r3, #8]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	021a      	lsls	r2, r3, #8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	431a      	orrs	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800495c:	2302      	movs	r3, #2
 800495e:	e050      	b.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d013      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10c      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40014000 	.word	0x40014000

08004a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e03f      	b.n	8004ade <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fa80 	bl	8001f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2224      	movs	r2, #36	; 0x24
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f929 	bl	8004ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08a      	sub	sp, #40	; 0x28
 8004aea:	af02      	add	r7, sp, #8
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b20      	cmp	r3, #32
 8004b04:	d17c      	bne.n	8004c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <HAL_UART_Transmit+0x2c>
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e075      	b.n	8004c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_UART_Transmit+0x3e>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e06e      	b.n	8004c02 <HAL_UART_Transmit+0x11c>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2221      	movs	r2, #33	; 0x21
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3a:	f7fd fc3f 	bl	80023bc <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b54:	d108      	bne.n	8004b68 <HAL_UART_Transmit+0x82>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b78:	e02a      	b.n	8004bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f840 	bl	8004c0a <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e036      	b.n	8004c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	3302      	adds	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e007      	b.n	8004bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1cf      	bne.n	8004b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2140      	movs	r1, #64	; 0x40
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f810 	bl	8004c0a <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e006      	b.n	8004c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b090      	sub	sp, #64	; 0x40
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1a:	e050      	b.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d04c      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2a:	f7fd fbc7 	bl	80023bc <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d241      	bcs.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c5a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e5      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8e:	623a      	str	r2, [r7, #32]
 8004c90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	69f9      	ldr	r1, [r7, #28]
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00f      	b.n	8004cde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d09f      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3740      	adds	r7, #64	; 0x40
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b0c0      	sub	sp, #256	; 0x100
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	ea40 0301 	orr.w	r3, r0, r1
 8004d10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d40:	f021 010c 	bic.w	r1, r1, #12
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	6999      	ldr	r1, [r3, #24]
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	ea40 0301 	orr.w	r3, r0, r1
 8004d6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b8f      	ldr	r3, [pc, #572]	; (8004fb4 <UART_SetConfig+0x2cc>)
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d005      	beq.n	8004d88 <UART_SetConfig+0xa0>
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b8d      	ldr	r3, [pc, #564]	; (8004fb8 <UART_SetConfig+0x2d0>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d104      	bne.n	8004d92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7ff fa06 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d90:	e003      	b.n	8004d9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d92:	f7ff f9ed 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8004d96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da4:	f040 810c 	bne.w	8004fc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004db6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	1891      	adds	r1, r2, r2
 8004dc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc2:	415b      	adcs	r3, r3
 8004dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dca:	4621      	mov	r1, r4
 8004dcc:	eb12 0801 	adds.w	r8, r2, r1
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	eb43 0901 	adc.w	r9, r3, r1
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dea:	4690      	mov	r8, r2
 8004dec:	4699      	mov	r9, r3
 8004dee:	4623      	mov	r3, r4
 8004df0:	eb18 0303 	adds.w	r3, r8, r3
 8004df4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004df8:	462b      	mov	r3, r5
 8004dfa:	eb49 0303 	adc.w	r3, r9, r3
 8004dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e16:	460b      	mov	r3, r1
 8004e18:	18db      	adds	r3, r3, r3
 8004e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	eb42 0303 	adc.w	r3, r2, r3
 8004e22:	657b      	str	r3, [r7, #84]	; 0x54
 8004e24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e2c:	f7fb ff14 	bl	8000c58 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b61      	ldr	r3, [pc, #388]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e60:	4641      	mov	r1, r8
 8004e62:	eb12 0a01 	adds.w	sl, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0b01 	adc.w	fp, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e80:	4692      	mov	sl, r2
 8004e82:	469b      	mov	fp, r3
 8004e84:	4643      	mov	r3, r8
 8004e86:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	eb4b 0303 	adc.w	r3, fp, r3
 8004e94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ea8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eac:	460b      	mov	r3, r1
 8004eae:	18db      	adds	r3, r3, r3
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	eb42 0303 	adc.w	r3, r2, r3
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ebe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ec2:	f7fb fec9 	bl	8000c58 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004ece:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	2264      	movs	r2, #100	; 0x64
 8004ed6:	fb02 f303 	mul.w	r3, r2, r3
 8004eda:	1acb      	subs	r3, r1, r3
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ee2:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004ee4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ef0:	441c      	add	r4, r3
 8004ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004efc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f48:	464b      	mov	r3, r9
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f7e:	f7fb fe6b 	bl	8000c58 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004f88:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	2164      	movs	r1, #100	; 0x64
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	3332      	adds	r3, #50	; 0x32
 8004f9a:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <UART_SetConfig+0x2d4>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	f003 0207 	and.w	r2, r3, #7
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4422      	add	r2, r4
 8004fae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb0:	e105      	b.n	80051be <UART_SetConfig+0x4d6>
 8004fb2:	bf00      	nop
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	6239      	str	r1, [r7, #32]
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1854      	adds	r4, r2, r1
 8004fe6:	4649      	mov	r1, r9
 8004fe8:	eb43 0501 	adc.w	r5, r3, r1
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	f04f 0300 	mov.w	r3, #0
 8004ff4:	00eb      	lsls	r3, r5, #3
 8004ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffa:	00e2      	lsls	r2, r4, #3
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	461d      	mov	r5, r3
 8005000:	4643      	mov	r3, r8
 8005002:	18e3      	adds	r3, r4, r3
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005008:	464b      	mov	r3, r9
 800500a:	eb45 0303 	adc.w	r3, r5, r3
 800500e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800501e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800502e:	4629      	mov	r1, r5
 8005030:	008b      	lsls	r3, r1, #2
 8005032:	4621      	mov	r1, r4
 8005034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005038:	4621      	mov	r1, r4
 800503a:	008a      	lsls	r2, r1, #2
 800503c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005040:	f7fb fe0a 	bl	8000c58 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4b60      	ldr	r3, [pc, #384]	; (80051cc <UART_SetConfig+0x4e4>)
 800504a:	fba3 2302 	umull	r2, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	011c      	lsls	r4, r3, #4
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005060:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	1891      	adds	r1, r2, r2
 800506a:	61b9      	str	r1, [r7, #24]
 800506c:	415b      	adcs	r3, r3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005074:	4641      	mov	r1, r8
 8005076:	1851      	adds	r1, r2, r1
 8005078:	6139      	str	r1, [r7, #16]
 800507a:	4649      	mov	r1, r9
 800507c:	414b      	adcs	r3, r1
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800508c:	4659      	mov	r1, fp
 800508e:	00cb      	lsls	r3, r1, #3
 8005090:	4651      	mov	r1, sl
 8005092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005096:	4651      	mov	r1, sl
 8005098:	00ca      	lsls	r2, r1, #3
 800509a:	4610      	mov	r0, r2
 800509c:	4619      	mov	r1, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	4642      	mov	r2, r8
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050a8:	464b      	mov	r3, r9
 80050aa:	460a      	mov	r2, r1
 80050ac:	eb42 0303 	adc.w	r3, r2, r3
 80050b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80050be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050cc:	4649      	mov	r1, r9
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	4641      	mov	r1, r8
 80050d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050d6:	4641      	mov	r1, r8
 80050d8:	008a      	lsls	r2, r1, #2
 80050da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050de:	f7fb fdbb 	bl	8000c58 <__aeabi_uldivmod>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <UART_SetConfig+0x4e4>)
 80050e8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2164      	movs	r1, #100	; 0x64
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	; 0x32
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <UART_SetConfig+0x4e4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005106:	441c      	add	r4, r3
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	673b      	str	r3, [r7, #112]	; 0x70
 8005110:	677a      	str	r2, [r7, #116]	; 0x74
 8005112:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005116:	4642      	mov	r2, r8
 8005118:	464b      	mov	r3, r9
 800511a:	1891      	adds	r1, r2, r2
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	415b      	adcs	r3, r3
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005126:	4641      	mov	r1, r8
 8005128:	1851      	adds	r1, r2, r1
 800512a:	6039      	str	r1, [r7, #0]
 800512c:	4649      	mov	r1, r9
 800512e:	414b      	adcs	r3, r1
 8005130:	607b      	str	r3, [r7, #4]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800513e:	4659      	mov	r1, fp
 8005140:	00cb      	lsls	r3, r1, #3
 8005142:	4651      	mov	r1, sl
 8005144:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005148:	4651      	mov	r1, sl
 800514a:	00ca      	lsls	r2, r1, #3
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	4603      	mov	r3, r0
 8005152:	4642      	mov	r2, r8
 8005154:	189b      	adds	r3, r3, r2
 8005156:	66bb      	str	r3, [r7, #104]	; 0x68
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	663b      	str	r3, [r7, #96]	; 0x60
 800516c:	667a      	str	r2, [r7, #100]	; 0x64
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800517a:	4649      	mov	r1, r9
 800517c:	008b      	lsls	r3, r1, #2
 800517e:	4641      	mov	r1, r8
 8005180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005184:	4641      	mov	r1, r8
 8005186:	008a      	lsls	r2, r1, #2
 8005188:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800518c:	f7fb fd64 	bl	8000c58 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <UART_SetConfig+0x4e4>)
 8005196:	fba3 1302 	umull	r1, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	2164      	movs	r1, #100	; 0x64
 800519e:	fb01 f303 	mul.w	r3, r1, r3
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	3332      	adds	r3, #50	; 0x32
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <UART_SetConfig+0x4e4>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	f003 020f 	and.w	r2, r3, #15
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4422      	add	r2, r4
 80051bc:	609a      	str	r2, [r3, #8]
}
 80051be:	bf00      	nop
 80051c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ca:	bf00      	nop
 80051cc:	51eb851f 	.word	0x51eb851f

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	; (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	; (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	; (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <__libc_init_array+0x44>)
 80051f0:	f002 ff02 	bl	8007ff8 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	0800843c 	.word	0x0800843c
 8005218:	0800843c 	.word	0x0800843c
 800521c:	0800843c 	.word	0x0800843c
 8005220:	08008440 	.word	0x08008440

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <__cvt>:
 8005234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	ec55 4b10 	vmov	r4, r5, d0
 800523c:	2d00      	cmp	r5, #0
 800523e:	460e      	mov	r6, r1
 8005240:	4619      	mov	r1, r3
 8005242:	462b      	mov	r3, r5
 8005244:	bfbb      	ittet	lt
 8005246:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800524a:	461d      	movlt	r5, r3
 800524c:	2300      	movge	r3, #0
 800524e:	232d      	movlt	r3, #45	; 0x2d
 8005250:	700b      	strb	r3, [r1, #0]
 8005252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005254:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005258:	4691      	mov	r9, r2
 800525a:	f023 0820 	bic.w	r8, r3, #32
 800525e:	bfbc      	itt	lt
 8005260:	4622      	movlt	r2, r4
 8005262:	4614      	movlt	r4, r2
 8005264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005268:	d005      	beq.n	8005276 <__cvt+0x42>
 800526a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800526e:	d100      	bne.n	8005272 <__cvt+0x3e>
 8005270:	3601      	adds	r6, #1
 8005272:	2102      	movs	r1, #2
 8005274:	e000      	b.n	8005278 <__cvt+0x44>
 8005276:	2103      	movs	r1, #3
 8005278:	ab03      	add	r3, sp, #12
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	ab02      	add	r3, sp, #8
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	ec45 4b10 	vmov	d0, r4, r5
 8005284:	4653      	mov	r3, sl
 8005286:	4632      	mov	r2, r6
 8005288:	f000 fcea 	bl	8005c60 <_dtoa_r>
 800528c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005290:	4607      	mov	r7, r0
 8005292:	d102      	bne.n	800529a <__cvt+0x66>
 8005294:	f019 0f01 	tst.w	r9, #1
 8005298:	d022      	beq.n	80052e0 <__cvt+0xac>
 800529a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800529e:	eb07 0906 	add.w	r9, r7, r6
 80052a2:	d110      	bne.n	80052c6 <__cvt+0x92>
 80052a4:	783b      	ldrb	r3, [r7, #0]
 80052a6:	2b30      	cmp	r3, #48	; 0x30
 80052a8:	d10a      	bne.n	80052c0 <__cvt+0x8c>
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80052b6:	b918      	cbnz	r0, 80052c0 <__cvt+0x8c>
 80052b8:	f1c6 0601 	rsb	r6, r6, #1
 80052bc:	f8ca 6000 	str.w	r6, [sl]
 80052c0:	f8da 3000 	ldr.w	r3, [sl]
 80052c4:	4499      	add	r9, r3
 80052c6:	2200      	movs	r2, #0
 80052c8:	2300      	movs	r3, #0
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7fb fc03 	bl	8000ad8 <__aeabi_dcmpeq>
 80052d2:	b108      	cbz	r0, 80052d8 <__cvt+0xa4>
 80052d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80052d8:	2230      	movs	r2, #48	; 0x30
 80052da:	9b03      	ldr	r3, [sp, #12]
 80052dc:	454b      	cmp	r3, r9
 80052de:	d307      	bcc.n	80052f0 <__cvt+0xbc>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052e4:	1bdb      	subs	r3, r3, r7
 80052e6:	4638      	mov	r0, r7
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	b004      	add	sp, #16
 80052ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	9103      	str	r1, [sp, #12]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e7f0      	b.n	80052da <__cvt+0xa6>

080052f8 <__exponent>:
 80052f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fa:	4603      	mov	r3, r0
 80052fc:	2900      	cmp	r1, #0
 80052fe:	bfb8      	it	lt
 8005300:	4249      	neglt	r1, r1
 8005302:	f803 2b02 	strb.w	r2, [r3], #2
 8005306:	bfb4      	ite	lt
 8005308:	222d      	movlt	r2, #45	; 0x2d
 800530a:	222b      	movge	r2, #43	; 0x2b
 800530c:	2909      	cmp	r1, #9
 800530e:	7042      	strb	r2, [r0, #1]
 8005310:	dd2a      	ble.n	8005368 <__exponent+0x70>
 8005312:	f10d 0407 	add.w	r4, sp, #7
 8005316:	46a4      	mov	ip, r4
 8005318:	270a      	movs	r7, #10
 800531a:	46a6      	mov	lr, r4
 800531c:	460a      	mov	r2, r1
 800531e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005322:	fb07 1516 	mls	r5, r7, r6, r1
 8005326:	3530      	adds	r5, #48	; 0x30
 8005328:	2a63      	cmp	r2, #99	; 0x63
 800532a:	f104 34ff 	add.w	r4, r4, #4294967295
 800532e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005332:	4631      	mov	r1, r6
 8005334:	dcf1      	bgt.n	800531a <__exponent+0x22>
 8005336:	3130      	adds	r1, #48	; 0x30
 8005338:	f1ae 0502 	sub.w	r5, lr, #2
 800533c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005340:	1c44      	adds	r4, r0, #1
 8005342:	4629      	mov	r1, r5
 8005344:	4561      	cmp	r1, ip
 8005346:	d30a      	bcc.n	800535e <__exponent+0x66>
 8005348:	f10d 0209 	add.w	r2, sp, #9
 800534c:	eba2 020e 	sub.w	r2, r2, lr
 8005350:	4565      	cmp	r5, ip
 8005352:	bf88      	it	hi
 8005354:	2200      	movhi	r2, #0
 8005356:	4413      	add	r3, r2
 8005358:	1a18      	subs	r0, r3, r0
 800535a:	b003      	add	sp, #12
 800535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800535e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005362:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005366:	e7ed      	b.n	8005344 <__exponent+0x4c>
 8005368:	2330      	movs	r3, #48	; 0x30
 800536a:	3130      	adds	r1, #48	; 0x30
 800536c:	7083      	strb	r3, [r0, #2]
 800536e:	70c1      	strb	r1, [r0, #3]
 8005370:	1d03      	adds	r3, r0, #4
 8005372:	e7f1      	b.n	8005358 <__exponent+0x60>

08005374 <_printf_float>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	ed2d 8b02 	vpush	{d8}
 800537c:	b08d      	sub	sp, #52	; 0x34
 800537e:	460c      	mov	r4, r1
 8005380:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005384:	4616      	mov	r6, r2
 8005386:	461f      	mov	r7, r3
 8005388:	4605      	mov	r5, r0
 800538a:	f001 fa57 	bl	800683c <_localeconv_r>
 800538e:	f8d0 a000 	ldr.w	sl, [r0]
 8005392:	4650      	mov	r0, sl
 8005394:	f7fa ff24 	bl	80001e0 <strlen>
 8005398:	2300      	movs	r3, #0
 800539a:	930a      	str	r3, [sp, #40]	; 0x28
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	f8d8 3000 	ldr.w	r3, [r8]
 80053a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053a8:	3307      	adds	r3, #7
 80053aa:	f023 0307 	bic.w	r3, r3, #7
 80053ae:	f103 0208 	add.w	r2, r3, #8
 80053b2:	f8c8 2000 	str.w	r2, [r8]
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053cc:	ee08 0a10 	vmov	s16, r0
 80053d0:	4b9f      	ldr	r3, [pc, #636]	; (8005650 <_printf_float+0x2dc>)
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	f04f 32ff 	mov.w	r2, #4294967295
 80053da:	f7fb fbaf 	bl	8000b3c <__aeabi_dcmpun>
 80053de:	bb88      	cbnz	r0, 8005444 <_printf_float+0xd0>
 80053e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053e4:	4b9a      	ldr	r3, [pc, #616]	; (8005650 <_printf_float+0x2dc>)
 80053e6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ea:	f7fb fb89 	bl	8000b00 <__aeabi_dcmple>
 80053ee:	bb48      	cbnz	r0, 8005444 <_printf_float+0xd0>
 80053f0:	2200      	movs	r2, #0
 80053f2:	2300      	movs	r3, #0
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb fb78 	bl	8000aec <__aeabi_dcmplt>
 80053fc:	b110      	cbz	r0, 8005404 <_printf_float+0x90>
 80053fe:	232d      	movs	r3, #45	; 0x2d
 8005400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005404:	4b93      	ldr	r3, [pc, #588]	; (8005654 <_printf_float+0x2e0>)
 8005406:	4894      	ldr	r0, [pc, #592]	; (8005658 <_printf_float+0x2e4>)
 8005408:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800540c:	bf94      	ite	ls
 800540e:	4698      	movls	r8, r3
 8005410:	4680      	movhi	r8, r0
 8005412:	2303      	movs	r3, #3
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	9b05      	ldr	r3, [sp, #20]
 8005418:	f023 0204 	bic.w	r2, r3, #4
 800541c:	6022      	str	r2, [r4, #0]
 800541e:	f04f 0900 	mov.w	r9, #0
 8005422:	9700      	str	r7, [sp, #0]
 8005424:	4633      	mov	r3, r6
 8005426:	aa0b      	add	r2, sp, #44	; 0x2c
 8005428:	4621      	mov	r1, r4
 800542a:	4628      	mov	r0, r5
 800542c:	f000 f9d8 	bl	80057e0 <_printf_common>
 8005430:	3001      	adds	r0, #1
 8005432:	f040 8090 	bne.w	8005556 <_printf_float+0x1e2>
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	b00d      	add	sp, #52	; 0x34
 800543c:	ecbd 8b02 	vpop	{d8}
 8005440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005444:	4642      	mov	r2, r8
 8005446:	464b      	mov	r3, r9
 8005448:	4640      	mov	r0, r8
 800544a:	4649      	mov	r1, r9
 800544c:	f7fb fb76 	bl	8000b3c <__aeabi_dcmpun>
 8005450:	b140      	cbz	r0, 8005464 <_printf_float+0xf0>
 8005452:	464b      	mov	r3, r9
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfbc      	itt	lt
 8005458:	232d      	movlt	r3, #45	; 0x2d
 800545a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800545e:	487f      	ldr	r0, [pc, #508]	; (800565c <_printf_float+0x2e8>)
 8005460:	4b7f      	ldr	r3, [pc, #508]	; (8005660 <_printf_float+0x2ec>)
 8005462:	e7d1      	b.n	8005408 <_printf_float+0x94>
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800546a:	9206      	str	r2, [sp, #24]
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	d13f      	bne.n	80054f0 <_printf_float+0x17c>
 8005470:	2306      	movs	r3, #6
 8005472:	6063      	str	r3, [r4, #4]
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	6861      	ldr	r1, [r4, #4]
 8005478:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800547c:	2300      	movs	r3, #0
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	ab0a      	add	r3, sp, #40	; 0x28
 8005482:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005486:	ab09      	add	r3, sp, #36	; 0x24
 8005488:	ec49 8b10 	vmov	d0, r8, r9
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	6022      	str	r2, [r4, #0]
 8005490:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005494:	4628      	mov	r0, r5
 8005496:	f7ff fecd 	bl	8005234 <__cvt>
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800549e:	2b47      	cmp	r3, #71	; 0x47
 80054a0:	4680      	mov	r8, r0
 80054a2:	d108      	bne.n	80054b6 <_printf_float+0x142>
 80054a4:	1cc8      	adds	r0, r1, #3
 80054a6:	db02      	blt.n	80054ae <_printf_float+0x13a>
 80054a8:	6863      	ldr	r3, [r4, #4]
 80054aa:	4299      	cmp	r1, r3
 80054ac:	dd41      	ble.n	8005532 <_printf_float+0x1be>
 80054ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80054b2:	fa5f fb8b 	uxtb.w	fp, fp
 80054b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ba:	d820      	bhi.n	80054fe <_printf_float+0x18a>
 80054bc:	3901      	subs	r1, #1
 80054be:	465a      	mov	r2, fp
 80054c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054c4:	9109      	str	r1, [sp, #36]	; 0x24
 80054c6:	f7ff ff17 	bl	80052f8 <__exponent>
 80054ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054cc:	1813      	adds	r3, r2, r0
 80054ce:	2a01      	cmp	r2, #1
 80054d0:	4681      	mov	r9, r0
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	dc02      	bgt.n	80054dc <_printf_float+0x168>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	07d2      	lsls	r2, r2, #31
 80054da:	d501      	bpl.n	80054e0 <_printf_float+0x16c>
 80054dc:	3301      	adds	r3, #1
 80054de:	6123      	str	r3, [r4, #16]
 80054e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d09c      	beq.n	8005422 <_printf_float+0xae>
 80054e8:	232d      	movs	r3, #45	; 0x2d
 80054ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ee:	e798      	b.n	8005422 <_printf_float+0xae>
 80054f0:	9a06      	ldr	r2, [sp, #24]
 80054f2:	2a47      	cmp	r2, #71	; 0x47
 80054f4:	d1be      	bne.n	8005474 <_printf_float+0x100>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1bc      	bne.n	8005474 <_printf_float+0x100>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7b9      	b.n	8005472 <_printf_float+0xfe>
 80054fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005502:	d118      	bne.n	8005536 <_printf_float+0x1c2>
 8005504:	2900      	cmp	r1, #0
 8005506:	6863      	ldr	r3, [r4, #4]
 8005508:	dd0b      	ble.n	8005522 <_printf_float+0x1ae>
 800550a:	6121      	str	r1, [r4, #16]
 800550c:	b913      	cbnz	r3, 8005514 <_printf_float+0x1a0>
 800550e:	6822      	ldr	r2, [r4, #0]
 8005510:	07d0      	lsls	r0, r2, #31
 8005512:	d502      	bpl.n	800551a <_printf_float+0x1a6>
 8005514:	3301      	adds	r3, #1
 8005516:	440b      	add	r3, r1
 8005518:	6123      	str	r3, [r4, #16]
 800551a:	65a1      	str	r1, [r4, #88]	; 0x58
 800551c:	f04f 0900 	mov.w	r9, #0
 8005520:	e7de      	b.n	80054e0 <_printf_float+0x16c>
 8005522:	b913      	cbnz	r3, 800552a <_printf_float+0x1b6>
 8005524:	6822      	ldr	r2, [r4, #0]
 8005526:	07d2      	lsls	r2, r2, #31
 8005528:	d501      	bpl.n	800552e <_printf_float+0x1ba>
 800552a:	3302      	adds	r3, #2
 800552c:	e7f4      	b.n	8005518 <_printf_float+0x1a4>
 800552e:	2301      	movs	r3, #1
 8005530:	e7f2      	b.n	8005518 <_printf_float+0x1a4>
 8005532:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	4299      	cmp	r1, r3
 800553a:	db05      	blt.n	8005548 <_printf_float+0x1d4>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	6121      	str	r1, [r4, #16]
 8005540:	07d8      	lsls	r0, r3, #31
 8005542:	d5ea      	bpl.n	800551a <_printf_float+0x1a6>
 8005544:	1c4b      	adds	r3, r1, #1
 8005546:	e7e7      	b.n	8005518 <_printf_float+0x1a4>
 8005548:	2900      	cmp	r1, #0
 800554a:	bfd4      	ite	le
 800554c:	f1c1 0202 	rsble	r2, r1, #2
 8005550:	2201      	movgt	r2, #1
 8005552:	4413      	add	r3, r2
 8005554:	e7e0      	b.n	8005518 <_printf_float+0x1a4>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	055a      	lsls	r2, r3, #21
 800555a:	d407      	bmi.n	800556c <_printf_float+0x1f8>
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	4642      	mov	r2, r8
 8005560:	4631      	mov	r1, r6
 8005562:	4628      	mov	r0, r5
 8005564:	47b8      	blx	r7
 8005566:	3001      	adds	r0, #1
 8005568:	d12c      	bne.n	80055c4 <_printf_float+0x250>
 800556a:	e764      	b.n	8005436 <_printf_float+0xc2>
 800556c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005570:	f240 80e0 	bls.w	8005734 <_printf_float+0x3c0>
 8005574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005578:	2200      	movs	r2, #0
 800557a:	2300      	movs	r3, #0
 800557c:	f7fb faac 	bl	8000ad8 <__aeabi_dcmpeq>
 8005580:	2800      	cmp	r0, #0
 8005582:	d034      	beq.n	80055ee <_printf_float+0x27a>
 8005584:	4a37      	ldr	r2, [pc, #220]	; (8005664 <_printf_float+0x2f0>)
 8005586:	2301      	movs	r3, #1
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af51 	beq.w	8005436 <_printf_float+0xc2>
 8005594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005598:	429a      	cmp	r2, r3
 800559a:	db02      	blt.n	80055a2 <_printf_float+0x22e>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	07d8      	lsls	r0, r3, #31
 80055a0:	d510      	bpl.n	80055c4 <_printf_float+0x250>
 80055a2:	ee18 3a10 	vmov	r3, s16
 80055a6:	4652      	mov	r2, sl
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	f43f af41 	beq.w	8005436 <_printf_float+0xc2>
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	f104 091a 	add.w	r9, r4, #26
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055be:	3b01      	subs	r3, #1
 80055c0:	4543      	cmp	r3, r8
 80055c2:	dc09      	bgt.n	80055d8 <_printf_float+0x264>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	079b      	lsls	r3, r3, #30
 80055c8:	f100 8105 	bmi.w	80057d6 <_printf_float+0x462>
 80055cc:	68e0      	ldr	r0, [r4, #12]
 80055ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d0:	4298      	cmp	r0, r3
 80055d2:	bfb8      	it	lt
 80055d4:	4618      	movlt	r0, r3
 80055d6:	e730      	b.n	800543a <_printf_float+0xc6>
 80055d8:	2301      	movs	r3, #1
 80055da:	464a      	mov	r2, r9
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f af27 	beq.w	8005436 <_printf_float+0xc2>
 80055e8:	f108 0801 	add.w	r8, r8, #1
 80055ec:	e7e6      	b.n	80055bc <_printf_float+0x248>
 80055ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dc39      	bgt.n	8005668 <_printf_float+0x2f4>
 80055f4:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <_printf_float+0x2f0>)
 80055f6:	2301      	movs	r3, #1
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	f43f af19 	beq.w	8005436 <_printf_float+0xc2>
 8005604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005608:	4313      	orrs	r3, r2
 800560a:	d102      	bne.n	8005612 <_printf_float+0x29e>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07d9      	lsls	r1, r3, #31
 8005610:	d5d8      	bpl.n	80055c4 <_printf_float+0x250>
 8005612:	ee18 3a10 	vmov	r3, s16
 8005616:	4652      	mov	r2, sl
 8005618:	4631      	mov	r1, r6
 800561a:	4628      	mov	r0, r5
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f af09 	beq.w	8005436 <_printf_float+0xc2>
 8005624:	f04f 0900 	mov.w	r9, #0
 8005628:	f104 0a1a 	add.w	sl, r4, #26
 800562c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800562e:	425b      	negs	r3, r3
 8005630:	454b      	cmp	r3, r9
 8005632:	dc01      	bgt.n	8005638 <_printf_float+0x2c4>
 8005634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005636:	e792      	b.n	800555e <_printf_float+0x1ea>
 8005638:	2301      	movs	r3, #1
 800563a:	4652      	mov	r2, sl
 800563c:	4631      	mov	r1, r6
 800563e:	4628      	mov	r0, r5
 8005640:	47b8      	blx	r7
 8005642:	3001      	adds	r0, #1
 8005644:	f43f aef7 	beq.w	8005436 <_printf_float+0xc2>
 8005648:	f109 0901 	add.w	r9, r9, #1
 800564c:	e7ee      	b.n	800562c <_printf_float+0x2b8>
 800564e:	bf00      	nop
 8005650:	7fefffff 	.word	0x7fefffff
 8005654:	0800805c 	.word	0x0800805c
 8005658:	08008060 	.word	0x08008060
 800565c:	08008068 	.word	0x08008068
 8005660:	08008064 	.word	0x08008064
 8005664:	0800806c 	.word	0x0800806c
 8005668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800566c:	429a      	cmp	r2, r3
 800566e:	bfa8      	it	ge
 8005670:	461a      	movge	r2, r3
 8005672:	2a00      	cmp	r2, #0
 8005674:	4691      	mov	r9, r2
 8005676:	dc37      	bgt.n	80056e8 <_printf_float+0x374>
 8005678:	f04f 0b00 	mov.w	fp, #0
 800567c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005680:	f104 021a 	add.w	r2, r4, #26
 8005684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	eba3 0309 	sub.w	r3, r3, r9
 800568c:	455b      	cmp	r3, fp
 800568e:	dc33      	bgt.n	80056f8 <_printf_float+0x384>
 8005690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005694:	429a      	cmp	r2, r3
 8005696:	db3b      	blt.n	8005710 <_printf_float+0x39c>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	07da      	lsls	r2, r3, #31
 800569c:	d438      	bmi.n	8005710 <_printf_float+0x39c>
 800569e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a0:	9a05      	ldr	r2, [sp, #20]
 80056a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a4:	1a9a      	subs	r2, r3, r2
 80056a6:	eba3 0901 	sub.w	r9, r3, r1
 80056aa:	4591      	cmp	r9, r2
 80056ac:	bfa8      	it	ge
 80056ae:	4691      	movge	r9, r2
 80056b0:	f1b9 0f00 	cmp.w	r9, #0
 80056b4:	dc35      	bgt.n	8005722 <_printf_float+0x3ae>
 80056b6:	f04f 0800 	mov.w	r8, #0
 80056ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056be:	f104 0a1a 	add.w	sl, r4, #26
 80056c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	eba3 0309 	sub.w	r3, r3, r9
 80056cc:	4543      	cmp	r3, r8
 80056ce:	f77f af79 	ble.w	80055c4 <_printf_float+0x250>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4652      	mov	r2, sl
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f aeaa 	beq.w	8005436 <_printf_float+0xc2>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	e7ec      	b.n	80056c2 <_printf_float+0x34e>
 80056e8:	4613      	mov	r3, r2
 80056ea:	4631      	mov	r1, r6
 80056ec:	4642      	mov	r2, r8
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	d1c0      	bne.n	8005678 <_printf_float+0x304>
 80056f6:	e69e      	b.n	8005436 <_printf_float+0xc2>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	9205      	str	r2, [sp, #20]
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f ae97 	beq.w	8005436 <_printf_float+0xc2>
 8005708:	9a05      	ldr	r2, [sp, #20]
 800570a:	f10b 0b01 	add.w	fp, fp, #1
 800570e:	e7b9      	b.n	8005684 <_printf_float+0x310>
 8005710:	ee18 3a10 	vmov	r3, s16
 8005714:	4652      	mov	r2, sl
 8005716:	4631      	mov	r1, r6
 8005718:	4628      	mov	r0, r5
 800571a:	47b8      	blx	r7
 800571c:	3001      	adds	r0, #1
 800571e:	d1be      	bne.n	800569e <_printf_float+0x32a>
 8005720:	e689      	b.n	8005436 <_printf_float+0xc2>
 8005722:	9a05      	ldr	r2, [sp, #20]
 8005724:	464b      	mov	r3, r9
 8005726:	4442      	add	r2, r8
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	d1c1      	bne.n	80056b6 <_printf_float+0x342>
 8005732:	e680      	b.n	8005436 <_printf_float+0xc2>
 8005734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005736:	2a01      	cmp	r2, #1
 8005738:	dc01      	bgt.n	800573e <_printf_float+0x3ca>
 800573a:	07db      	lsls	r3, r3, #31
 800573c:	d538      	bpl.n	80057b0 <_printf_float+0x43c>
 800573e:	2301      	movs	r3, #1
 8005740:	4642      	mov	r2, r8
 8005742:	4631      	mov	r1, r6
 8005744:	4628      	mov	r0, r5
 8005746:	47b8      	blx	r7
 8005748:	3001      	adds	r0, #1
 800574a:	f43f ae74 	beq.w	8005436 <_printf_float+0xc2>
 800574e:	ee18 3a10 	vmov	r3, s16
 8005752:	4652      	mov	r2, sl
 8005754:	4631      	mov	r1, r6
 8005756:	4628      	mov	r0, r5
 8005758:	47b8      	blx	r7
 800575a:	3001      	adds	r0, #1
 800575c:	f43f ae6b 	beq.w	8005436 <_printf_float+0xc2>
 8005760:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005764:	2200      	movs	r2, #0
 8005766:	2300      	movs	r3, #0
 8005768:	f7fb f9b6 	bl	8000ad8 <__aeabi_dcmpeq>
 800576c:	b9d8      	cbnz	r0, 80057a6 <_printf_float+0x432>
 800576e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005770:	f108 0201 	add.w	r2, r8, #1
 8005774:	3b01      	subs	r3, #1
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	d10e      	bne.n	800579e <_printf_float+0x42a>
 8005780:	e659      	b.n	8005436 <_printf_float+0xc2>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f ae52 	beq.w	8005436 <_printf_float+0xc2>
 8005792:	f108 0801 	add.w	r8, r8, #1
 8005796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005798:	3b01      	subs	r3, #1
 800579a:	4543      	cmp	r3, r8
 800579c:	dcf1      	bgt.n	8005782 <_printf_float+0x40e>
 800579e:	464b      	mov	r3, r9
 80057a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057a4:	e6dc      	b.n	8005560 <_printf_float+0x1ec>
 80057a6:	f04f 0800 	mov.w	r8, #0
 80057aa:	f104 0a1a 	add.w	sl, r4, #26
 80057ae:	e7f2      	b.n	8005796 <_printf_float+0x422>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4642      	mov	r2, r8
 80057b4:	e7df      	b.n	8005776 <_printf_float+0x402>
 80057b6:	2301      	movs	r3, #1
 80057b8:	464a      	mov	r2, r9
 80057ba:	4631      	mov	r1, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	47b8      	blx	r7
 80057c0:	3001      	adds	r0, #1
 80057c2:	f43f ae38 	beq.w	8005436 <_printf_float+0xc2>
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ce:	1a5b      	subs	r3, r3, r1
 80057d0:	4543      	cmp	r3, r8
 80057d2:	dcf0      	bgt.n	80057b6 <_printf_float+0x442>
 80057d4:	e6fa      	b.n	80055cc <_printf_float+0x258>
 80057d6:	f04f 0800 	mov.w	r8, #0
 80057da:	f104 0919 	add.w	r9, r4, #25
 80057de:	e7f4      	b.n	80057ca <_printf_float+0x456>

080057e0 <_printf_common>:
 80057e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e4:	4616      	mov	r6, r2
 80057e6:	4699      	mov	r9, r3
 80057e8:	688a      	ldr	r2, [r1, #8]
 80057ea:	690b      	ldr	r3, [r1, #16]
 80057ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bfb8      	it	lt
 80057f4:	4613      	movlt	r3, r2
 80057f6:	6033      	str	r3, [r6, #0]
 80057f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057fc:	4607      	mov	r7, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	b10a      	cbz	r2, 8005806 <_printf_common+0x26>
 8005802:	3301      	adds	r3, #1
 8005804:	6033      	str	r3, [r6, #0]
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	0699      	lsls	r1, r3, #26
 800580a:	bf42      	ittt	mi
 800580c:	6833      	ldrmi	r3, [r6, #0]
 800580e:	3302      	addmi	r3, #2
 8005810:	6033      	strmi	r3, [r6, #0]
 8005812:	6825      	ldr	r5, [r4, #0]
 8005814:	f015 0506 	ands.w	r5, r5, #6
 8005818:	d106      	bne.n	8005828 <_printf_common+0x48>
 800581a:	f104 0a19 	add.w	sl, r4, #25
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	6832      	ldr	r2, [r6, #0]
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	42ab      	cmp	r3, r5
 8005826:	dc26      	bgt.n	8005876 <_printf_common+0x96>
 8005828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800582c:	1e13      	subs	r3, r2, #0
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	2301      	movne	r3, #1
 8005834:	0692      	lsls	r2, r2, #26
 8005836:	d42b      	bmi.n	8005890 <_printf_common+0xb0>
 8005838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800583c:	4649      	mov	r1, r9
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	3001      	adds	r0, #1
 8005844:	d01e      	beq.n	8005884 <_printf_common+0xa4>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	68e5      	ldr	r5, [r4, #12]
 800584a:	6832      	ldr	r2, [r6, #0]
 800584c:	f003 0306 	and.w	r3, r3, #6
 8005850:	2b04      	cmp	r3, #4
 8005852:	bf08      	it	eq
 8005854:	1aad      	subeq	r5, r5, r2
 8005856:	68a3      	ldr	r3, [r4, #8]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	bf0c      	ite	eq
 800585c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005860:	2500      	movne	r5, #0
 8005862:	4293      	cmp	r3, r2
 8005864:	bfc4      	itt	gt
 8005866:	1a9b      	subgt	r3, r3, r2
 8005868:	18ed      	addgt	r5, r5, r3
 800586a:	2600      	movs	r6, #0
 800586c:	341a      	adds	r4, #26
 800586e:	42b5      	cmp	r5, r6
 8005870:	d11a      	bne.n	80058a8 <_printf_common+0xc8>
 8005872:	2000      	movs	r0, #0
 8005874:	e008      	b.n	8005888 <_printf_common+0xa8>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4649      	mov	r1, r9
 800587c:	4638      	mov	r0, r7
 800587e:	47c0      	blx	r8
 8005880:	3001      	adds	r0, #1
 8005882:	d103      	bne.n	800588c <_printf_common+0xac>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	3501      	adds	r5, #1
 800588e:	e7c6      	b.n	800581e <_printf_common+0x3e>
 8005890:	18e1      	adds	r1, r4, r3
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	2030      	movs	r0, #48	; 0x30
 8005896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589a:	4422      	add	r2, r4
 800589c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a4:	3302      	adds	r3, #2
 80058a6:	e7c7      	b.n	8005838 <_printf_common+0x58>
 80058a8:	2301      	movs	r3, #1
 80058aa:	4622      	mov	r2, r4
 80058ac:	4649      	mov	r1, r9
 80058ae:	4638      	mov	r0, r7
 80058b0:	47c0      	blx	r8
 80058b2:	3001      	adds	r0, #1
 80058b4:	d0e6      	beq.n	8005884 <_printf_common+0xa4>
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7d9      	b.n	800586e <_printf_common+0x8e>
	...

080058bc <_printf_i>:
 80058bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c0:	7e0f      	ldrb	r7, [r1, #24]
 80058c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058c4:	2f78      	cmp	r7, #120	; 0x78
 80058c6:	4691      	mov	r9, r2
 80058c8:	4680      	mov	r8, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	469a      	mov	sl, r3
 80058ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058d2:	d807      	bhi.n	80058e4 <_printf_i+0x28>
 80058d4:	2f62      	cmp	r7, #98	; 0x62
 80058d6:	d80a      	bhi.n	80058ee <_printf_i+0x32>
 80058d8:	2f00      	cmp	r7, #0
 80058da:	f000 80d8 	beq.w	8005a8e <_printf_i+0x1d2>
 80058de:	2f58      	cmp	r7, #88	; 0x58
 80058e0:	f000 80a3 	beq.w	8005a2a <_printf_i+0x16e>
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ec:	e03a      	b.n	8005964 <_printf_i+0xa8>
 80058ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f2:	2b15      	cmp	r3, #21
 80058f4:	d8f6      	bhi.n	80058e4 <_printf_i+0x28>
 80058f6:	a101      	add	r1, pc, #4	; (adr r1, 80058fc <_printf_i+0x40>)
 80058f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058fc:	08005955 	.word	0x08005955
 8005900:	08005969 	.word	0x08005969
 8005904:	080058e5 	.word	0x080058e5
 8005908:	080058e5 	.word	0x080058e5
 800590c:	080058e5 	.word	0x080058e5
 8005910:	080058e5 	.word	0x080058e5
 8005914:	08005969 	.word	0x08005969
 8005918:	080058e5 	.word	0x080058e5
 800591c:	080058e5 	.word	0x080058e5
 8005920:	080058e5 	.word	0x080058e5
 8005924:	080058e5 	.word	0x080058e5
 8005928:	08005a75 	.word	0x08005a75
 800592c:	08005999 	.word	0x08005999
 8005930:	08005a57 	.word	0x08005a57
 8005934:	080058e5 	.word	0x080058e5
 8005938:	080058e5 	.word	0x080058e5
 800593c:	08005a97 	.word	0x08005a97
 8005940:	080058e5 	.word	0x080058e5
 8005944:	08005999 	.word	0x08005999
 8005948:	080058e5 	.word	0x080058e5
 800594c:	080058e5 	.word	0x080058e5
 8005950:	08005a5f 	.word	0x08005a5f
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	602a      	str	r2, [r5, #0]
 800595c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005964:	2301      	movs	r3, #1
 8005966:	e0a3      	b.n	8005ab0 <_printf_i+0x1f4>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	6829      	ldr	r1, [r5, #0]
 800596c:	0606      	lsls	r6, r0, #24
 800596e:	f101 0304 	add.w	r3, r1, #4
 8005972:	d50a      	bpl.n	800598a <_printf_i+0xce>
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	602b      	str	r3, [r5, #0]
 8005978:	2e00      	cmp	r6, #0
 800597a:	da03      	bge.n	8005984 <_printf_i+0xc8>
 800597c:	232d      	movs	r3, #45	; 0x2d
 800597e:	4276      	negs	r6, r6
 8005980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005984:	485e      	ldr	r0, [pc, #376]	; (8005b00 <_printf_i+0x244>)
 8005986:	230a      	movs	r3, #10
 8005988:	e019      	b.n	80059be <_printf_i+0x102>
 800598a:	680e      	ldr	r6, [r1, #0]
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005992:	bf18      	it	ne
 8005994:	b236      	sxthne	r6, r6
 8005996:	e7ef      	b.n	8005978 <_printf_i+0xbc>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	6820      	ldr	r0, [r4, #0]
 800599c:	1d19      	adds	r1, r3, #4
 800599e:	6029      	str	r1, [r5, #0]
 80059a0:	0601      	lsls	r1, r0, #24
 80059a2:	d501      	bpl.n	80059a8 <_printf_i+0xec>
 80059a4:	681e      	ldr	r6, [r3, #0]
 80059a6:	e002      	b.n	80059ae <_printf_i+0xf2>
 80059a8:	0646      	lsls	r6, r0, #25
 80059aa:	d5fb      	bpl.n	80059a4 <_printf_i+0xe8>
 80059ac:	881e      	ldrh	r6, [r3, #0]
 80059ae:	4854      	ldr	r0, [pc, #336]	; (8005b00 <_printf_i+0x244>)
 80059b0:	2f6f      	cmp	r7, #111	; 0x6f
 80059b2:	bf0c      	ite	eq
 80059b4:	2308      	moveq	r3, #8
 80059b6:	230a      	movne	r3, #10
 80059b8:	2100      	movs	r1, #0
 80059ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059be:	6865      	ldr	r5, [r4, #4]
 80059c0:	60a5      	str	r5, [r4, #8]
 80059c2:	2d00      	cmp	r5, #0
 80059c4:	bfa2      	ittt	ge
 80059c6:	6821      	ldrge	r1, [r4, #0]
 80059c8:	f021 0104 	bicge.w	r1, r1, #4
 80059cc:	6021      	strge	r1, [r4, #0]
 80059ce:	b90e      	cbnz	r6, 80059d4 <_printf_i+0x118>
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	d04d      	beq.n	8005a70 <_printf_i+0x1b4>
 80059d4:	4615      	mov	r5, r2
 80059d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80059da:	fb03 6711 	mls	r7, r3, r1, r6
 80059de:	5dc7      	ldrb	r7, [r0, r7]
 80059e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059e4:	4637      	mov	r7, r6
 80059e6:	42bb      	cmp	r3, r7
 80059e8:	460e      	mov	r6, r1
 80059ea:	d9f4      	bls.n	80059d6 <_printf_i+0x11a>
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d10b      	bne.n	8005a08 <_printf_i+0x14c>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	07de      	lsls	r6, r3, #31
 80059f4:	d508      	bpl.n	8005a08 <_printf_i+0x14c>
 80059f6:	6923      	ldr	r3, [r4, #16]
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4299      	cmp	r1, r3
 80059fc:	bfde      	ittt	le
 80059fe:	2330      	movle	r3, #48	; 0x30
 8005a00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a08:	1b52      	subs	r2, r2, r5
 8005a0a:	6122      	str	r2, [r4, #16]
 8005a0c:	f8cd a000 	str.w	sl, [sp]
 8005a10:	464b      	mov	r3, r9
 8005a12:	aa03      	add	r2, sp, #12
 8005a14:	4621      	mov	r1, r4
 8005a16:	4640      	mov	r0, r8
 8005a18:	f7ff fee2 	bl	80057e0 <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d14c      	bne.n	8005aba <_printf_i+0x1fe>
 8005a20:	f04f 30ff 	mov.w	r0, #4294967295
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2a:	4835      	ldr	r0, [pc, #212]	; (8005b00 <_printf_i+0x244>)
 8005a2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a38:	6029      	str	r1, [r5, #0]
 8005a3a:	061d      	lsls	r5, r3, #24
 8005a3c:	d514      	bpl.n	8005a68 <_printf_i+0x1ac>
 8005a3e:	07df      	lsls	r7, r3, #31
 8005a40:	bf44      	itt	mi
 8005a42:	f043 0320 	orrmi.w	r3, r3, #32
 8005a46:	6023      	strmi	r3, [r4, #0]
 8005a48:	b91e      	cbnz	r6, 8005a52 <_printf_i+0x196>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f023 0320 	bic.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2310      	movs	r3, #16
 8005a54:	e7b0      	b.n	80059b8 <_printf_i+0xfc>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f043 0320 	orr.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2378      	movs	r3, #120	; 0x78
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <_printf_i+0x248>)
 8005a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a66:	e7e3      	b.n	8005a30 <_printf_i+0x174>
 8005a68:	0659      	lsls	r1, r3, #25
 8005a6a:	bf48      	it	mi
 8005a6c:	b2b6      	uxthmi	r6, r6
 8005a6e:	e7e6      	b.n	8005a3e <_printf_i+0x182>
 8005a70:	4615      	mov	r5, r2
 8005a72:	e7bb      	b.n	80059ec <_printf_i+0x130>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	6826      	ldr	r6, [r4, #0]
 8005a78:	6961      	ldr	r1, [r4, #20]
 8005a7a:	1d18      	adds	r0, r3, #4
 8005a7c:	6028      	str	r0, [r5, #0]
 8005a7e:	0635      	lsls	r5, r6, #24
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	d501      	bpl.n	8005a88 <_printf_i+0x1cc>
 8005a84:	6019      	str	r1, [r3, #0]
 8005a86:	e002      	b.n	8005a8e <_printf_i+0x1d2>
 8005a88:	0670      	lsls	r0, r6, #25
 8005a8a:	d5fb      	bpl.n	8005a84 <_printf_i+0x1c8>
 8005a8c:	8019      	strh	r1, [r3, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	4615      	mov	r5, r2
 8005a94:	e7ba      	b.n	8005a0c <_printf_i+0x150>
 8005a96:	682b      	ldr	r3, [r5, #0]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	602a      	str	r2, [r5, #0]
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f7fa fba4 	bl	80001f0 <memchr>
 8005aa8:	b108      	cbz	r0, 8005aae <_printf_i+0x1f2>
 8005aaa:	1b40      	subs	r0, r0, r5
 8005aac:	6060      	str	r0, [r4, #4]
 8005aae:	6863      	ldr	r3, [r4, #4]
 8005ab0:	6123      	str	r3, [r4, #16]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	e7a8      	b.n	8005a0c <_printf_i+0x150>
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4649      	mov	r1, r9
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	47d0      	blx	sl
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ab      	beq.n	8005a20 <_printf_i+0x164>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d413      	bmi.n	8005af6 <_printf_i+0x23a>
 8005ace:	68e0      	ldr	r0, [r4, #12]
 8005ad0:	9b03      	ldr	r3, [sp, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	bfb8      	it	lt
 8005ad6:	4618      	movlt	r0, r3
 8005ad8:	e7a4      	b.n	8005a24 <_printf_i+0x168>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4632      	mov	r2, r6
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	47d0      	blx	sl
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d09b      	beq.n	8005a20 <_printf_i+0x164>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	68e3      	ldr	r3, [r4, #12]
 8005aec:	9903      	ldr	r1, [sp, #12]
 8005aee:	1a5b      	subs	r3, r3, r1
 8005af0:	42ab      	cmp	r3, r5
 8005af2:	dcf2      	bgt.n	8005ada <_printf_i+0x21e>
 8005af4:	e7eb      	b.n	8005ace <_printf_i+0x212>
 8005af6:	2500      	movs	r5, #0
 8005af8:	f104 0619 	add.w	r6, r4, #25
 8005afc:	e7f5      	b.n	8005aea <_printf_i+0x22e>
 8005afe:	bf00      	nop
 8005b00:	0800806e 	.word	0x0800806e
 8005b04:	0800807f 	.word	0x0800807f

08005b08 <siprintf>:
 8005b08:	b40e      	push	{r1, r2, r3}
 8005b0a:	b500      	push	{lr}
 8005b0c:	b09c      	sub	sp, #112	; 0x70
 8005b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b10:	9002      	str	r0, [sp, #8]
 8005b12:	9006      	str	r0, [sp, #24]
 8005b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b18:	4809      	ldr	r0, [pc, #36]	; (8005b40 <siprintf+0x38>)
 8005b1a:	9107      	str	r1, [sp, #28]
 8005b1c:	9104      	str	r1, [sp, #16]
 8005b1e:	4909      	ldr	r1, [pc, #36]	; (8005b44 <siprintf+0x3c>)
 8005b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	6800      	ldr	r0, [r0, #0]
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	a902      	add	r1, sp, #8
 8005b2c:	f001 fb76 	bl	800721c <_svfiprintf_r>
 8005b30:	9b02      	ldr	r3, [sp, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
 8005b36:	b01c      	add	sp, #112	; 0x70
 8005b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b3c:	b003      	add	sp, #12
 8005b3e:	4770      	bx	lr
 8005b40:	2000000c 	.word	0x2000000c
 8005b44:	ffff0208 	.word	0xffff0208

08005b48 <quorem>:
 8005b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	6903      	ldr	r3, [r0, #16]
 8005b4e:	690c      	ldr	r4, [r1, #16]
 8005b50:	42a3      	cmp	r3, r4
 8005b52:	4607      	mov	r7, r0
 8005b54:	f2c0 8081 	blt.w	8005c5a <quorem+0x112>
 8005b58:	3c01      	subs	r4, #1
 8005b5a:	f101 0814 	add.w	r8, r1, #20
 8005b5e:	f100 0514 	add.w	r5, r0, #20
 8005b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b70:	3301      	adds	r3, #1
 8005b72:	429a      	cmp	r2, r3
 8005b74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b80:	d331      	bcc.n	8005be6 <quorem+0x9e>
 8005b82:	f04f 0e00 	mov.w	lr, #0
 8005b86:	4640      	mov	r0, r8
 8005b88:	46ac      	mov	ip, r5
 8005b8a:	46f2      	mov	sl, lr
 8005b8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b90:	b293      	uxth	r3, r2
 8005b92:	fb06 e303 	mla	r3, r6, r3, lr
 8005b96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	ebaa 0303 	sub.w	r3, sl, r3
 8005ba0:	f8dc a000 	ldr.w	sl, [ip]
 8005ba4:	0c12      	lsrs	r2, r2, #16
 8005ba6:	fa13 f38a 	uxtah	r3, r3, sl
 8005baa:	fb06 e202 	mla	r2, r6, r2, lr
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	9b00      	ldr	r3, [sp, #0]
 8005bb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bc4:	4581      	cmp	r9, r0
 8005bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bca:	f84c 3b04 	str.w	r3, [ip], #4
 8005bce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bd2:	d2db      	bcs.n	8005b8c <quorem+0x44>
 8005bd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bd8:	b92b      	cbnz	r3, 8005be6 <quorem+0x9e>
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	429d      	cmp	r5, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	d32e      	bcc.n	8005c42 <quorem+0xfa>
 8005be4:	613c      	str	r4, [r7, #16]
 8005be6:	4638      	mov	r0, r7
 8005be8:	f001 f8c4 	bl	8006d74 <__mcmp>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	db24      	blt.n	8005c3a <quorem+0xf2>
 8005bf0:	3601      	adds	r6, #1
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f04f 0c00 	mov.w	ip, #0
 8005bf8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bfc:	f8d0 e000 	ldr.w	lr, [r0]
 8005c00:	b293      	uxth	r3, r2
 8005c02:	ebac 0303 	sub.w	r3, ip, r3
 8005c06:	0c12      	lsrs	r2, r2, #16
 8005c08:	fa13 f38e 	uxtah	r3, r3, lr
 8005c0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c1a:	45c1      	cmp	r9, r8
 8005c1c:	f840 3b04 	str.w	r3, [r0], #4
 8005c20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c24:	d2e8      	bcs.n	8005bf8 <quorem+0xb0>
 8005c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c2e:	b922      	cbnz	r2, 8005c3a <quorem+0xf2>
 8005c30:	3b04      	subs	r3, #4
 8005c32:	429d      	cmp	r5, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	d30a      	bcc.n	8005c4e <quorem+0x106>
 8005c38:	613c      	str	r4, [r7, #16]
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	b003      	add	sp, #12
 8005c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	3b04      	subs	r3, #4
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d1cc      	bne.n	8005be4 <quorem+0x9c>
 8005c4a:	3c01      	subs	r4, #1
 8005c4c:	e7c7      	b.n	8005bde <quorem+0x96>
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	d1f0      	bne.n	8005c38 <quorem+0xf0>
 8005c56:	3c01      	subs	r4, #1
 8005c58:	e7eb      	b.n	8005c32 <quorem+0xea>
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e7ee      	b.n	8005c3c <quorem+0xf4>
	...

08005c60 <_dtoa_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	ed2d 8b04 	vpush	{d8-d9}
 8005c68:	ec57 6b10 	vmov	r6, r7, d0
 8005c6c:	b093      	sub	sp, #76	; 0x4c
 8005c6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c74:	9106      	str	r1, [sp, #24]
 8005c76:	ee10 aa10 	vmov	sl, s0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c80:	46bb      	mov	fp, r7
 8005c82:	b975      	cbnz	r5, 8005ca2 <_dtoa_r+0x42>
 8005c84:	2010      	movs	r0, #16
 8005c86:	f000 fddd 	bl	8006844 <malloc>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c8e:	b920      	cbnz	r0, 8005c9a <_dtoa_r+0x3a>
 8005c90:	4ba7      	ldr	r3, [pc, #668]	; (8005f30 <_dtoa_r+0x2d0>)
 8005c92:	21ea      	movs	r1, #234	; 0xea
 8005c94:	48a7      	ldr	r0, [pc, #668]	; (8005f34 <_dtoa_r+0x2d4>)
 8005c96:	f001 fbd1 	bl	800743c <__assert_func>
 8005c9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c9e:	6005      	str	r5, [r0, #0]
 8005ca0:	60c5      	str	r5, [r0, #12]
 8005ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	b151      	cbz	r1, 8005cbe <_dtoa_r+0x5e>
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	604a      	str	r2, [r1, #4]
 8005cac:	2301      	movs	r3, #1
 8005cae:	4093      	lsls	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	f000 fe1c 	bl	80068f0 <_Bfree>
 8005cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
 8005cbe:	1e3b      	subs	r3, r7, #0
 8005cc0:	bfaa      	itet	ge
 8005cc2:	2300      	movge	r3, #0
 8005cc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005cc8:	f8c8 3000 	strge.w	r3, [r8]
 8005ccc:	4b9a      	ldr	r3, [pc, #616]	; (8005f38 <_dtoa_r+0x2d8>)
 8005cce:	bfbc      	itt	lt
 8005cd0:	2201      	movlt	r2, #1
 8005cd2:	f8c8 2000 	strlt.w	r2, [r8]
 8005cd6:	ea33 030b 	bics.w	r3, r3, fp
 8005cda:	d11b      	bne.n	8005d14 <_dtoa_r+0xb4>
 8005cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cde:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ce2:	6013      	str	r3, [r2, #0]
 8005ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ce8:	4333      	orrs	r3, r6
 8005cea:	f000 8592 	beq.w	8006812 <_dtoa_r+0xbb2>
 8005cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cf0:	b963      	cbnz	r3, 8005d0c <_dtoa_r+0xac>
 8005cf2:	4b92      	ldr	r3, [pc, #584]	; (8005f3c <_dtoa_r+0x2dc>)
 8005cf4:	e022      	b.n	8005d3c <_dtoa_r+0xdc>
 8005cf6:	4b92      	ldr	r3, [pc, #584]	; (8005f40 <_dtoa_r+0x2e0>)
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	9801      	ldr	r0, [sp, #4]
 8005d02:	b013      	add	sp, #76	; 0x4c
 8005d04:	ecbd 8b04 	vpop	{d8-d9}
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0c:	4b8b      	ldr	r3, [pc, #556]	; (8005f3c <_dtoa_r+0x2dc>)
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	3303      	adds	r3, #3
 8005d12:	e7f3      	b.n	8005cfc <_dtoa_r+0x9c>
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	4650      	mov	r0, sl
 8005d1a:	4659      	mov	r1, fp
 8005d1c:	f7fa fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d20:	ec4b ab19 	vmov	d9, sl, fp
 8005d24:	4680      	mov	r8, r0
 8005d26:	b158      	cbz	r0, 8005d40 <_dtoa_r+0xe0>
 8005d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 856b 	beq.w	800680c <_dtoa_r+0xbac>
 8005d36:	4883      	ldr	r0, [pc, #524]	; (8005f44 <_dtoa_r+0x2e4>)
 8005d38:	6018      	str	r0, [r3, #0]
 8005d3a:	1e43      	subs	r3, r0, #1
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	e7df      	b.n	8005d00 <_dtoa_r+0xa0>
 8005d40:	ec4b ab10 	vmov	d0, sl, fp
 8005d44:	aa10      	add	r2, sp, #64	; 0x40
 8005d46:	a911      	add	r1, sp, #68	; 0x44
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f001 f8b9 	bl	8006ec0 <__d2b>
 8005d4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005d52:	ee08 0a10 	vmov	s16, r0
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f000 8084 	beq.w	8005e64 <_dtoa_r+0x204>
 8005d5c:	ee19 3a90 	vmov	r3, s19
 8005d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d68:	4656      	mov	r6, sl
 8005d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005d76:	4b74      	ldr	r3, [pc, #464]	; (8005f48 <_dtoa_r+0x2e8>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa fa8b 	bl	8000298 <__aeabi_dsub>
 8005d82:	a365      	add	r3, pc, #404	; (adr r3, 8005f18 <_dtoa_r+0x2b8>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fc3e 	bl	8000608 <__aeabi_dmul>
 8005d8c:	a364      	add	r3, pc, #400	; (adr r3, 8005f20 <_dtoa_r+0x2c0>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fa83 	bl	800029c <__adddf3>
 8005d96:	4606      	mov	r6, r0
 8005d98:	4628      	mov	r0, r5
 8005d9a:	460f      	mov	r7, r1
 8005d9c:	f7fa fbca 	bl	8000534 <__aeabi_i2d>
 8005da0:	a361      	add	r3, pc, #388	; (adr r3, 8005f28 <_dtoa_r+0x2c8>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fc2f 	bl	8000608 <__aeabi_dmul>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4630      	mov	r0, r6
 8005db0:	4639      	mov	r1, r7
 8005db2:	f7fa fa73 	bl	800029c <__adddf3>
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	f7fa fed5 	bl	8000b68 <__aeabi_d2iz>
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	9000      	str	r0, [sp, #0]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	f7fa fe90 	bl	8000aec <__aeabi_dcmplt>
 8005dcc:	b150      	cbz	r0, 8005de4 <_dtoa_r+0x184>
 8005dce:	9800      	ldr	r0, [sp, #0]
 8005dd0:	f7fa fbb0 	bl	8000534 <__aeabi_i2d>
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	f7fa fe7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ddc:	b910      	cbnz	r0, 8005de4 <_dtoa_r+0x184>
 8005dde:	9b00      	ldr	r3, [sp, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	2b16      	cmp	r3, #22
 8005de8:	d85a      	bhi.n	8005ea0 <_dtoa_r+0x240>
 8005dea:	9a00      	ldr	r2, [sp, #0]
 8005dec:	4b57      	ldr	r3, [pc, #348]	; (8005f4c <_dtoa_r+0x2ec>)
 8005dee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	ec51 0b19 	vmov	r0, r1, d9
 8005dfa:	f7fa fe77 	bl	8000aec <__aeabi_dcmplt>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d050      	beq.n	8005ea4 <_dtoa_r+0x244>
 8005e02:	9b00      	ldr	r3, [sp, #0]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e0e:	1b5d      	subs	r5, r3, r5
 8005e10:	1e6b      	subs	r3, r5, #1
 8005e12:	9305      	str	r3, [sp, #20]
 8005e14:	bf45      	ittet	mi
 8005e16:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e1a:	9304      	strmi	r3, [sp, #16]
 8005e1c:	2300      	movpl	r3, #0
 8005e1e:	2300      	movmi	r3, #0
 8005e20:	bf4c      	ite	mi
 8005e22:	9305      	strmi	r3, [sp, #20]
 8005e24:	9304      	strpl	r3, [sp, #16]
 8005e26:	9b00      	ldr	r3, [sp, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db3d      	blt.n	8005ea8 <_dtoa_r+0x248>
 8005e2c:	9b05      	ldr	r3, [sp, #20]
 8005e2e:	9a00      	ldr	r2, [sp, #0]
 8005e30:	920a      	str	r2, [sp, #40]	; 0x28
 8005e32:	4413      	add	r3, r2
 8005e34:	9305      	str	r3, [sp, #20]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9307      	str	r3, [sp, #28]
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2b09      	cmp	r3, #9
 8005e3e:	f200 8089 	bhi.w	8005f54 <_dtoa_r+0x2f4>
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	bfc4      	itt	gt
 8005e46:	3b04      	subgt	r3, #4
 8005e48:	9306      	strgt	r3, [sp, #24]
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	f1a3 0302 	sub.w	r3, r3, #2
 8005e50:	bfcc      	ite	gt
 8005e52:	2500      	movgt	r5, #0
 8005e54:	2501      	movle	r5, #1
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	f200 8087 	bhi.w	8005f6a <_dtoa_r+0x30a>
 8005e5c:	e8df f003 	tbb	[pc, r3]
 8005e60:	59383a2d 	.word	0x59383a2d
 8005e64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e68:	441d      	add	r5, r3
 8005e6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	bfc1      	itttt	gt
 8005e72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e82:	bfda      	itte	le
 8005e84:	f1c3 0320 	rsble	r3, r3, #32
 8005e88:	fa06 f003 	lslle.w	r0, r6, r3
 8005e8c:	4318      	orrgt	r0, r3
 8005e8e:	f7fa fb41 	bl	8000514 <__aeabi_ui2d>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4606      	mov	r6, r0
 8005e96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e9a:	3d01      	subs	r5, #1
 8005e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005e9e:	e76a      	b.n	8005d76 <_dtoa_r+0x116>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e7b2      	b.n	8005e0a <_dtoa_r+0x1aa>
 8005ea4:	900b      	str	r0, [sp, #44]	; 0x2c
 8005ea6:	e7b1      	b.n	8005e0c <_dtoa_r+0x1ac>
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	9a00      	ldr	r2, [sp, #0]
 8005eac:	1a9b      	subs	r3, r3, r2
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	4253      	negs	r3, r2
 8005eb2:	9307      	str	r3, [sp, #28]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb8:	e7bf      	b.n	8005e3a <_dtoa_r+0x1da>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9308      	str	r3, [sp, #32]
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	dc55      	bgt.n	8005f70 <_dtoa_r+0x310>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ece:	e00c      	b.n	8005eea <_dtoa_r+0x28a>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e7f3      	b.n	8005ebc <_dtoa_r+0x25c>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed8:	9308      	str	r3, [sp, #32]
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	9302      	str	r3, [sp, #8]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	9303      	str	r3, [sp, #12]
 8005ee6:	bfb8      	it	lt
 8005ee8:	2301      	movlt	r3, #1
 8005eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005eec:	2200      	movs	r2, #0
 8005eee:	6042      	str	r2, [r0, #4]
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	f102 0614 	add.w	r6, r2, #20
 8005ef6:	429e      	cmp	r6, r3
 8005ef8:	6841      	ldr	r1, [r0, #4]
 8005efa:	d93d      	bls.n	8005f78 <_dtoa_r+0x318>
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fcb7 	bl	8006870 <_Balloc>
 8005f02:	9001      	str	r0, [sp, #4]
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d13b      	bne.n	8005f80 <_dtoa_r+0x320>
 8005f08:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <_dtoa_r+0x2f0>)
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f10:	e6c0      	b.n	8005c94 <_dtoa_r+0x34>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e7df      	b.n	8005ed6 <_dtoa_r+0x276>
 8005f16:	bf00      	nop
 8005f18:	636f4361 	.word	0x636f4361
 8005f1c:	3fd287a7 	.word	0x3fd287a7
 8005f20:	8b60c8b3 	.word	0x8b60c8b3
 8005f24:	3fc68a28 	.word	0x3fc68a28
 8005f28:	509f79fb 	.word	0x509f79fb
 8005f2c:	3fd34413 	.word	0x3fd34413
 8005f30:	0800809d 	.word	0x0800809d
 8005f34:	080080b4 	.word	0x080080b4
 8005f38:	7ff00000 	.word	0x7ff00000
 8005f3c:	08008099 	.word	0x08008099
 8005f40:	08008090 	.word	0x08008090
 8005f44:	0800806d 	.word	0x0800806d
 8005f48:	3ff80000 	.word	0x3ff80000
 8005f4c:	080081a8 	.word	0x080081a8
 8005f50:	0800810f 	.word	0x0800810f
 8005f54:	2501      	movs	r5, #1
 8005f56:	2300      	movs	r3, #0
 8005f58:	9306      	str	r3, [sp, #24]
 8005f5a:	9508      	str	r5, [sp, #32]
 8005f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2312      	movs	r3, #18
 8005f68:	e7b0      	b.n	8005ecc <_dtoa_r+0x26c>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	9308      	str	r3, [sp, #32]
 8005f6e:	e7f5      	b.n	8005f5c <_dtoa_r+0x2fc>
 8005f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f76:	e7b8      	b.n	8005eea <_dtoa_r+0x28a>
 8005f78:	3101      	adds	r1, #1
 8005f7a:	6041      	str	r1, [r0, #4]
 8005f7c:	0052      	lsls	r2, r2, #1
 8005f7e:	e7b8      	b.n	8005ef2 <_dtoa_r+0x292>
 8005f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f82:	9a01      	ldr	r2, [sp, #4]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	2b0e      	cmp	r3, #14
 8005f8a:	f200 809d 	bhi.w	80060c8 <_dtoa_r+0x468>
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	f000 809a 	beq.w	80060c8 <_dtoa_r+0x468>
 8005f94:	9b00      	ldr	r3, [sp, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	dd32      	ble.n	8006000 <_dtoa_r+0x3a0>
 8005f9a:	4ab7      	ldr	r2, [pc, #732]	; (8006278 <_dtoa_r+0x618>)
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fa8:	9b00      	ldr	r3, [sp, #0]
 8005faa:	05d8      	lsls	r0, r3, #23
 8005fac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005fb0:	d516      	bpl.n	8005fe0 <_dtoa_r+0x380>
 8005fb2:	4bb2      	ldr	r3, [pc, #712]	; (800627c <_dtoa_r+0x61c>)
 8005fb4:	ec51 0b19 	vmov	r0, r1, d9
 8005fb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fbc:	f7fa fc4e 	bl	800085c <__aeabi_ddiv>
 8005fc0:	f007 070f 	and.w	r7, r7, #15
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	2503      	movs	r5, #3
 8005fca:	4eac      	ldr	r6, [pc, #688]	; (800627c <_dtoa_r+0x61c>)
 8005fcc:	b957      	cbnz	r7, 8005fe4 <_dtoa_r+0x384>
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	f7fa fc41 	bl	800085c <__aeabi_ddiv>
 8005fda:	4682      	mov	sl, r0
 8005fdc:	468b      	mov	fp, r1
 8005fde:	e028      	b.n	8006032 <_dtoa_r+0x3d2>
 8005fe0:	2502      	movs	r5, #2
 8005fe2:	e7f2      	b.n	8005fca <_dtoa_r+0x36a>
 8005fe4:	07f9      	lsls	r1, r7, #31
 8005fe6:	d508      	bpl.n	8005ffa <_dtoa_r+0x39a>
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ff0:	f7fa fb0a 	bl	8000608 <__aeabi_dmul>
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	4689      	mov	r9, r1
 8005ffa:	107f      	asrs	r7, r7, #1
 8005ffc:	3608      	adds	r6, #8
 8005ffe:	e7e5      	b.n	8005fcc <_dtoa_r+0x36c>
 8006000:	f000 809b 	beq.w	800613a <_dtoa_r+0x4da>
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	4f9d      	ldr	r7, [pc, #628]	; (800627c <_dtoa_r+0x61c>)
 8006008:	425e      	negs	r6, r3
 800600a:	4b9b      	ldr	r3, [pc, #620]	; (8006278 <_dtoa_r+0x618>)
 800600c:	f006 020f 	and.w	r2, r6, #15
 8006010:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	ec51 0b19 	vmov	r0, r1, d9
 800601c:	f7fa faf4 	bl	8000608 <__aeabi_dmul>
 8006020:	1136      	asrs	r6, r6, #4
 8006022:	4682      	mov	sl, r0
 8006024:	468b      	mov	fp, r1
 8006026:	2300      	movs	r3, #0
 8006028:	2502      	movs	r5, #2
 800602a:	2e00      	cmp	r6, #0
 800602c:	d17a      	bne.n	8006124 <_dtoa_r+0x4c4>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1d3      	bne.n	8005fda <_dtoa_r+0x37a>
 8006032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8082 	beq.w	800613e <_dtoa_r+0x4de>
 800603a:	4b91      	ldr	r3, [pc, #580]	; (8006280 <_dtoa_r+0x620>)
 800603c:	2200      	movs	r2, #0
 800603e:	4650      	mov	r0, sl
 8006040:	4659      	mov	r1, fp
 8006042:	f7fa fd53 	bl	8000aec <__aeabi_dcmplt>
 8006046:	2800      	cmp	r0, #0
 8006048:	d079      	beq.n	800613e <_dtoa_r+0x4de>
 800604a:	9b03      	ldr	r3, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d076      	beq.n	800613e <_dtoa_r+0x4de>
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	dd36      	ble.n	80060c4 <_dtoa_r+0x464>
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	4650      	mov	r0, sl
 800605a:	4659      	mov	r1, fp
 800605c:	1e5f      	subs	r7, r3, #1
 800605e:	2200      	movs	r2, #0
 8006060:	4b88      	ldr	r3, [pc, #544]	; (8006284 <_dtoa_r+0x624>)
 8006062:	f7fa fad1 	bl	8000608 <__aeabi_dmul>
 8006066:	9e02      	ldr	r6, [sp, #8]
 8006068:	4682      	mov	sl, r0
 800606a:	468b      	mov	fp, r1
 800606c:	3501      	adds	r5, #1
 800606e:	4628      	mov	r0, r5
 8006070:	f7fa fa60 	bl	8000534 <__aeabi_i2d>
 8006074:	4652      	mov	r2, sl
 8006076:	465b      	mov	r3, fp
 8006078:	f7fa fac6 	bl	8000608 <__aeabi_dmul>
 800607c:	4b82      	ldr	r3, [pc, #520]	; (8006288 <_dtoa_r+0x628>)
 800607e:	2200      	movs	r2, #0
 8006080:	f7fa f90c 	bl	800029c <__adddf3>
 8006084:	46d0      	mov	r8, sl
 8006086:	46d9      	mov	r9, fp
 8006088:	4682      	mov	sl, r0
 800608a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800608e:	2e00      	cmp	r6, #0
 8006090:	d158      	bne.n	8006144 <_dtoa_r+0x4e4>
 8006092:	4b7e      	ldr	r3, [pc, #504]	; (800628c <_dtoa_r+0x62c>)
 8006094:	2200      	movs	r2, #0
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f7fa f8fd 	bl	8000298 <__aeabi_dsub>
 800609e:	4652      	mov	r2, sl
 80060a0:	465b      	mov	r3, fp
 80060a2:	4680      	mov	r8, r0
 80060a4:	4689      	mov	r9, r1
 80060a6:	f7fa fd3f 	bl	8000b28 <__aeabi_dcmpgt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f040 8295 	bne.w	80065da <_dtoa_r+0x97a>
 80060b0:	4652      	mov	r2, sl
 80060b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f7fa fd17 	bl	8000aec <__aeabi_dcmplt>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f040 8289 	bne.w	80065d6 <_dtoa_r+0x976>
 80060c4:	ec5b ab19 	vmov	sl, fp, d9
 80060c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f2c0 8148 	blt.w	8006360 <_dtoa_r+0x700>
 80060d0:	9a00      	ldr	r2, [sp, #0]
 80060d2:	2a0e      	cmp	r2, #14
 80060d4:	f300 8144 	bgt.w	8006360 <_dtoa_r+0x700>
 80060d8:	4b67      	ldr	r3, [pc, #412]	; (8006278 <_dtoa_r+0x618>)
 80060da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f280 80d5 	bge.w	8006294 <_dtoa_r+0x634>
 80060ea:	9b03      	ldr	r3, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f300 80d1 	bgt.w	8006294 <_dtoa_r+0x634>
 80060f2:	f040 826f 	bne.w	80065d4 <_dtoa_r+0x974>
 80060f6:	4b65      	ldr	r3, [pc, #404]	; (800628c <_dtoa_r+0x62c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa fa83 	bl	8000608 <__aeabi_dmul>
 8006102:	4652      	mov	r2, sl
 8006104:	465b      	mov	r3, fp
 8006106:	f7fa fd05 	bl	8000b14 <__aeabi_dcmpge>
 800610a:	9e03      	ldr	r6, [sp, #12]
 800610c:	4637      	mov	r7, r6
 800610e:	2800      	cmp	r0, #0
 8006110:	f040 8245 	bne.w	800659e <_dtoa_r+0x93e>
 8006114:	9d01      	ldr	r5, [sp, #4]
 8006116:	2331      	movs	r3, #49	; 0x31
 8006118:	f805 3b01 	strb.w	r3, [r5], #1
 800611c:	9b00      	ldr	r3, [sp, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	e240      	b.n	80065a6 <_dtoa_r+0x946>
 8006124:	07f2      	lsls	r2, r6, #31
 8006126:	d505      	bpl.n	8006134 <_dtoa_r+0x4d4>
 8006128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800612c:	f7fa fa6c 	bl	8000608 <__aeabi_dmul>
 8006130:	3501      	adds	r5, #1
 8006132:	2301      	movs	r3, #1
 8006134:	1076      	asrs	r6, r6, #1
 8006136:	3708      	adds	r7, #8
 8006138:	e777      	b.n	800602a <_dtoa_r+0x3ca>
 800613a:	2502      	movs	r5, #2
 800613c:	e779      	b.n	8006032 <_dtoa_r+0x3d2>
 800613e:	9f00      	ldr	r7, [sp, #0]
 8006140:	9e03      	ldr	r6, [sp, #12]
 8006142:	e794      	b.n	800606e <_dtoa_r+0x40e>
 8006144:	9901      	ldr	r1, [sp, #4]
 8006146:	4b4c      	ldr	r3, [pc, #304]	; (8006278 <_dtoa_r+0x618>)
 8006148:	4431      	add	r1, r6
 800614a:	910d      	str	r1, [sp, #52]	; 0x34
 800614c:	9908      	ldr	r1, [sp, #32]
 800614e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006152:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006156:	2900      	cmp	r1, #0
 8006158:	d043      	beq.n	80061e2 <_dtoa_r+0x582>
 800615a:	494d      	ldr	r1, [pc, #308]	; (8006290 <_dtoa_r+0x630>)
 800615c:	2000      	movs	r0, #0
 800615e:	f7fa fb7d 	bl	800085c <__aeabi_ddiv>
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	f7fa f897 	bl	8000298 <__aeabi_dsub>
 800616a:	9d01      	ldr	r5, [sp, #4]
 800616c:	4682      	mov	sl, r0
 800616e:	468b      	mov	fp, r1
 8006170:	4649      	mov	r1, r9
 8006172:	4640      	mov	r0, r8
 8006174:	f7fa fcf8 	bl	8000b68 <__aeabi_d2iz>
 8006178:	4606      	mov	r6, r0
 800617a:	f7fa f9db 	bl	8000534 <__aeabi_i2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4640      	mov	r0, r8
 8006184:	4649      	mov	r1, r9
 8006186:	f7fa f887 	bl	8000298 <__aeabi_dsub>
 800618a:	3630      	adds	r6, #48	; 0x30
 800618c:	f805 6b01 	strb.w	r6, [r5], #1
 8006190:	4652      	mov	r2, sl
 8006192:	465b      	mov	r3, fp
 8006194:	4680      	mov	r8, r0
 8006196:	4689      	mov	r9, r1
 8006198:	f7fa fca8 	bl	8000aec <__aeabi_dcmplt>
 800619c:	2800      	cmp	r0, #0
 800619e:	d163      	bne.n	8006268 <_dtoa_r+0x608>
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	4936      	ldr	r1, [pc, #216]	; (8006280 <_dtoa_r+0x620>)
 80061a6:	2000      	movs	r0, #0
 80061a8:	f7fa f876 	bl	8000298 <__aeabi_dsub>
 80061ac:	4652      	mov	r2, sl
 80061ae:	465b      	mov	r3, fp
 80061b0:	f7fa fc9c 	bl	8000aec <__aeabi_dcmplt>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f040 80b5 	bne.w	8006324 <_dtoa_r+0x6c4>
 80061ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061bc:	429d      	cmp	r5, r3
 80061be:	d081      	beq.n	80060c4 <_dtoa_r+0x464>
 80061c0:	4b30      	ldr	r3, [pc, #192]	; (8006284 <_dtoa_r+0x624>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	4650      	mov	r0, sl
 80061c6:	4659      	mov	r1, fp
 80061c8:	f7fa fa1e 	bl	8000608 <__aeabi_dmul>
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <_dtoa_r+0x624>)
 80061ce:	4682      	mov	sl, r0
 80061d0:	468b      	mov	fp, r1
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	2200      	movs	r2, #0
 80061d8:	f7fa fa16 	bl	8000608 <__aeabi_dmul>
 80061dc:	4680      	mov	r8, r0
 80061de:	4689      	mov	r9, r1
 80061e0:	e7c6      	b.n	8006170 <_dtoa_r+0x510>
 80061e2:	4650      	mov	r0, sl
 80061e4:	4659      	mov	r1, fp
 80061e6:	f7fa fa0f 	bl	8000608 <__aeabi_dmul>
 80061ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ec:	9d01      	ldr	r5, [sp, #4]
 80061ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80061f0:	4682      	mov	sl, r0
 80061f2:	468b      	mov	fp, r1
 80061f4:	4649      	mov	r1, r9
 80061f6:	4640      	mov	r0, r8
 80061f8:	f7fa fcb6 	bl	8000b68 <__aeabi_d2iz>
 80061fc:	4606      	mov	r6, r0
 80061fe:	f7fa f999 	bl	8000534 <__aeabi_i2d>
 8006202:	3630      	adds	r6, #48	; 0x30
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4640      	mov	r0, r8
 800620a:	4649      	mov	r1, r9
 800620c:	f7fa f844 	bl	8000298 <__aeabi_dsub>
 8006210:	f805 6b01 	strb.w	r6, [r5], #1
 8006214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006216:	429d      	cmp	r5, r3
 8006218:	4680      	mov	r8, r0
 800621a:	4689      	mov	r9, r1
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	d124      	bne.n	800626c <_dtoa_r+0x60c>
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <_dtoa_r+0x630>)
 8006224:	4650      	mov	r0, sl
 8006226:	4659      	mov	r1, fp
 8006228:	f7fa f838 	bl	800029c <__adddf3>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa fc78 	bl	8000b28 <__aeabi_dcmpgt>
 8006238:	2800      	cmp	r0, #0
 800623a:	d173      	bne.n	8006324 <_dtoa_r+0x6c4>
 800623c:	4652      	mov	r2, sl
 800623e:	465b      	mov	r3, fp
 8006240:	4913      	ldr	r1, [pc, #76]	; (8006290 <_dtoa_r+0x630>)
 8006242:	2000      	movs	r0, #0
 8006244:	f7fa f828 	bl	8000298 <__aeabi_dsub>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4640      	mov	r0, r8
 800624e:	4649      	mov	r1, r9
 8006250:	f7fa fc4c 	bl	8000aec <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f43f af35 	beq.w	80060c4 <_dtoa_r+0x464>
 800625a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800625c:	1e6b      	subs	r3, r5, #1
 800625e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006260:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	d0f8      	beq.n	800625a <_dtoa_r+0x5fa>
 8006268:	9700      	str	r7, [sp, #0]
 800626a:	e049      	b.n	8006300 <_dtoa_r+0x6a0>
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <_dtoa_r+0x624>)
 800626e:	f7fa f9cb 	bl	8000608 <__aeabi_dmul>
 8006272:	4680      	mov	r8, r0
 8006274:	4689      	mov	r9, r1
 8006276:	e7bd      	b.n	80061f4 <_dtoa_r+0x594>
 8006278:	080081a8 	.word	0x080081a8
 800627c:	08008180 	.word	0x08008180
 8006280:	3ff00000 	.word	0x3ff00000
 8006284:	40240000 	.word	0x40240000
 8006288:	401c0000 	.word	0x401c0000
 800628c:	40140000 	.word	0x40140000
 8006290:	3fe00000 	.word	0x3fe00000
 8006294:	9d01      	ldr	r5, [sp, #4]
 8006296:	4656      	mov	r6, sl
 8006298:	465f      	mov	r7, fp
 800629a:	4642      	mov	r2, r8
 800629c:	464b      	mov	r3, r9
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa fadb 	bl	800085c <__aeabi_ddiv>
 80062a6:	f7fa fc5f 	bl	8000b68 <__aeabi_d2iz>
 80062aa:	4682      	mov	sl, r0
 80062ac:	f7fa f942 	bl	8000534 <__aeabi_i2d>
 80062b0:	4642      	mov	r2, r8
 80062b2:	464b      	mov	r3, r9
 80062b4:	f7fa f9a8 	bl	8000608 <__aeabi_dmul>
 80062b8:	4602      	mov	r2, r0
 80062ba:	460b      	mov	r3, r1
 80062bc:	4630      	mov	r0, r6
 80062be:	4639      	mov	r1, r7
 80062c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80062c4:	f7f9 ffe8 	bl	8000298 <__aeabi_dsub>
 80062c8:	f805 6b01 	strb.w	r6, [r5], #1
 80062cc:	9e01      	ldr	r6, [sp, #4]
 80062ce:	9f03      	ldr	r7, [sp, #12]
 80062d0:	1bae      	subs	r6, r5, r6
 80062d2:	42b7      	cmp	r7, r6
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	d135      	bne.n	8006346 <_dtoa_r+0x6e6>
 80062da:	f7f9 ffdf 	bl	800029c <__adddf3>
 80062de:	4642      	mov	r2, r8
 80062e0:	464b      	mov	r3, r9
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	f7fa fc1f 	bl	8000b28 <__aeabi_dcmpgt>
 80062ea:	b9d0      	cbnz	r0, 8006322 <_dtoa_r+0x6c2>
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	4630      	mov	r0, r6
 80062f2:	4639      	mov	r1, r7
 80062f4:	f7fa fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80062f8:	b110      	cbz	r0, 8006300 <_dtoa_r+0x6a0>
 80062fa:	f01a 0f01 	tst.w	sl, #1
 80062fe:	d110      	bne.n	8006322 <_dtoa_r+0x6c2>
 8006300:	4620      	mov	r0, r4
 8006302:	ee18 1a10 	vmov	r1, s16
 8006306:	f000 faf3 	bl	80068f0 <_Bfree>
 800630a:	2300      	movs	r3, #0
 800630c:	9800      	ldr	r0, [sp, #0]
 800630e:	702b      	strb	r3, [r5, #0]
 8006310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006312:	3001      	adds	r0, #1
 8006314:	6018      	str	r0, [r3, #0]
 8006316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006318:	2b00      	cmp	r3, #0
 800631a:	f43f acf1 	beq.w	8005d00 <_dtoa_r+0xa0>
 800631e:	601d      	str	r5, [r3, #0]
 8006320:	e4ee      	b.n	8005d00 <_dtoa_r+0xa0>
 8006322:	9f00      	ldr	r7, [sp, #0]
 8006324:	462b      	mov	r3, r5
 8006326:	461d      	mov	r5, r3
 8006328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800632c:	2a39      	cmp	r2, #57	; 0x39
 800632e:	d106      	bne.n	800633e <_dtoa_r+0x6de>
 8006330:	9a01      	ldr	r2, [sp, #4]
 8006332:	429a      	cmp	r2, r3
 8006334:	d1f7      	bne.n	8006326 <_dtoa_r+0x6c6>
 8006336:	9901      	ldr	r1, [sp, #4]
 8006338:	2230      	movs	r2, #48	; 0x30
 800633a:	3701      	adds	r7, #1
 800633c:	700a      	strb	r2, [r1, #0]
 800633e:	781a      	ldrb	r2, [r3, #0]
 8006340:	3201      	adds	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e790      	b.n	8006268 <_dtoa_r+0x608>
 8006346:	4ba6      	ldr	r3, [pc, #664]	; (80065e0 <_dtoa_r+0x980>)
 8006348:	2200      	movs	r2, #0
 800634a:	f7fa f95d 	bl	8000608 <__aeabi_dmul>
 800634e:	2200      	movs	r2, #0
 8006350:	2300      	movs	r3, #0
 8006352:	4606      	mov	r6, r0
 8006354:	460f      	mov	r7, r1
 8006356:	f7fa fbbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800635a:	2800      	cmp	r0, #0
 800635c:	d09d      	beq.n	800629a <_dtoa_r+0x63a>
 800635e:	e7cf      	b.n	8006300 <_dtoa_r+0x6a0>
 8006360:	9a08      	ldr	r2, [sp, #32]
 8006362:	2a00      	cmp	r2, #0
 8006364:	f000 80d7 	beq.w	8006516 <_dtoa_r+0x8b6>
 8006368:	9a06      	ldr	r2, [sp, #24]
 800636a:	2a01      	cmp	r2, #1
 800636c:	f300 80ba 	bgt.w	80064e4 <_dtoa_r+0x884>
 8006370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006372:	2a00      	cmp	r2, #0
 8006374:	f000 80b2 	beq.w	80064dc <_dtoa_r+0x87c>
 8006378:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800637c:	9e07      	ldr	r6, [sp, #28]
 800637e:	9d04      	ldr	r5, [sp, #16]
 8006380:	9a04      	ldr	r2, [sp, #16]
 8006382:	441a      	add	r2, r3
 8006384:	9204      	str	r2, [sp, #16]
 8006386:	9a05      	ldr	r2, [sp, #20]
 8006388:	2101      	movs	r1, #1
 800638a:	441a      	add	r2, r3
 800638c:	4620      	mov	r0, r4
 800638e:	9205      	str	r2, [sp, #20]
 8006390:	f000 fb66 	bl	8006a60 <__i2b>
 8006394:	4607      	mov	r7, r0
 8006396:	2d00      	cmp	r5, #0
 8006398:	dd0c      	ble.n	80063b4 <_dtoa_r+0x754>
 800639a:	9b05      	ldr	r3, [sp, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dd09      	ble.n	80063b4 <_dtoa_r+0x754>
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	9a04      	ldr	r2, [sp, #16]
 80063a4:	bfa8      	it	ge
 80063a6:	462b      	movge	r3, r5
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	9204      	str	r2, [sp, #16]
 80063ac:	9a05      	ldr	r2, [sp, #20]
 80063ae:	1aed      	subs	r5, r5, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	9305      	str	r3, [sp, #20]
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	b31b      	cbz	r3, 8006400 <_dtoa_r+0x7a0>
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80af 	beq.w	800651e <_dtoa_r+0x8be>
 80063c0:	2e00      	cmp	r6, #0
 80063c2:	dd13      	ble.n	80063ec <_dtoa_r+0x78c>
 80063c4:	4639      	mov	r1, r7
 80063c6:	4632      	mov	r2, r6
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fc09 	bl	8006be0 <__pow5mult>
 80063ce:	ee18 2a10 	vmov	r2, s16
 80063d2:	4601      	mov	r1, r0
 80063d4:	4607      	mov	r7, r0
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fb58 	bl	8006a8c <__multiply>
 80063dc:	ee18 1a10 	vmov	r1, s16
 80063e0:	4680      	mov	r8, r0
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fa84 	bl	80068f0 <_Bfree>
 80063e8:	ee08 8a10 	vmov	s16, r8
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	1b9a      	subs	r2, r3, r6
 80063f0:	d006      	beq.n	8006400 <_dtoa_r+0x7a0>
 80063f2:	ee18 1a10 	vmov	r1, s16
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 fbf2 	bl	8006be0 <__pow5mult>
 80063fc:	ee08 0a10 	vmov	s16, r0
 8006400:	2101      	movs	r1, #1
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fb2c 	bl	8006a60 <__i2b>
 8006408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	4606      	mov	r6, r0
 800640e:	f340 8088 	ble.w	8006522 <_dtoa_r+0x8c2>
 8006412:	461a      	mov	r2, r3
 8006414:	4601      	mov	r1, r0
 8006416:	4620      	mov	r0, r4
 8006418:	f000 fbe2 	bl	8006be0 <__pow5mult>
 800641c:	9b06      	ldr	r3, [sp, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	4606      	mov	r6, r0
 8006422:	f340 8081 	ble.w	8006528 <_dtoa_r+0x8c8>
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	6933      	ldr	r3, [r6, #16]
 800642c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006430:	6918      	ldr	r0, [r3, #16]
 8006432:	f000 fac5 	bl	80069c0 <__hi0bits>
 8006436:	f1c0 0020 	rsb	r0, r0, #32
 800643a:	9b05      	ldr	r3, [sp, #20]
 800643c:	4418      	add	r0, r3
 800643e:	f010 001f 	ands.w	r0, r0, #31
 8006442:	f000 8092 	beq.w	800656a <_dtoa_r+0x90a>
 8006446:	f1c0 0320 	rsb	r3, r0, #32
 800644a:	2b04      	cmp	r3, #4
 800644c:	f340 808a 	ble.w	8006564 <_dtoa_r+0x904>
 8006450:	f1c0 001c 	rsb	r0, r0, #28
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	4403      	add	r3, r0
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	9b05      	ldr	r3, [sp, #20]
 800645c:	4403      	add	r3, r0
 800645e:	4405      	add	r5, r0
 8006460:	9305      	str	r3, [sp, #20]
 8006462:	9b04      	ldr	r3, [sp, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	dd07      	ble.n	8006478 <_dtoa_r+0x818>
 8006468:	ee18 1a10 	vmov	r1, s16
 800646c:	461a      	mov	r2, r3
 800646e:	4620      	mov	r0, r4
 8006470:	f000 fc10 	bl	8006c94 <__lshift>
 8006474:	ee08 0a10 	vmov	s16, r0
 8006478:	9b05      	ldr	r3, [sp, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	dd05      	ble.n	800648a <_dtoa_r+0x82a>
 800647e:	4631      	mov	r1, r6
 8006480:	461a      	mov	r2, r3
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fc06 	bl	8006c94 <__lshift>
 8006488:	4606      	mov	r6, r0
 800648a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d06e      	beq.n	800656e <_dtoa_r+0x90e>
 8006490:	ee18 0a10 	vmov	r0, s16
 8006494:	4631      	mov	r1, r6
 8006496:	f000 fc6d 	bl	8006d74 <__mcmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	da67      	bge.n	800656e <_dtoa_r+0x90e>
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	ee18 1a10 	vmov	r1, s16
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	220a      	movs	r2, #10
 80064aa:	2300      	movs	r3, #0
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fa41 	bl	8006934 <__multadd>
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	ee08 0a10 	vmov	s16, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 81b1 	beq.w	8006820 <_dtoa_r+0xbc0>
 80064be:	2300      	movs	r3, #0
 80064c0:	4639      	mov	r1, r7
 80064c2:	220a      	movs	r2, #10
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fa35 	bl	8006934 <__multadd>
 80064ca:	9b02      	ldr	r3, [sp, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	4607      	mov	r7, r0
 80064d0:	f300 808e 	bgt.w	80065f0 <_dtoa_r+0x990>
 80064d4:	9b06      	ldr	r3, [sp, #24]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	dc51      	bgt.n	800657e <_dtoa_r+0x91e>
 80064da:	e089      	b.n	80065f0 <_dtoa_r+0x990>
 80064dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064e2:	e74b      	b.n	800637c <_dtoa_r+0x71c>
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	1e5e      	subs	r6, r3, #1
 80064e8:	9b07      	ldr	r3, [sp, #28]
 80064ea:	42b3      	cmp	r3, r6
 80064ec:	bfbf      	itttt	lt
 80064ee:	9b07      	ldrlt	r3, [sp, #28]
 80064f0:	9607      	strlt	r6, [sp, #28]
 80064f2:	1af2      	sublt	r2, r6, r3
 80064f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064f6:	bfb6      	itet	lt
 80064f8:	189b      	addlt	r3, r3, r2
 80064fa:	1b9e      	subge	r6, r3, r6
 80064fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	bfb8      	it	lt
 8006502:	2600      	movlt	r6, #0
 8006504:	2b00      	cmp	r3, #0
 8006506:	bfb7      	itett	lt
 8006508:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800650c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006510:	1a9d      	sublt	r5, r3, r2
 8006512:	2300      	movlt	r3, #0
 8006514:	e734      	b.n	8006380 <_dtoa_r+0x720>
 8006516:	9e07      	ldr	r6, [sp, #28]
 8006518:	9d04      	ldr	r5, [sp, #16]
 800651a:	9f08      	ldr	r7, [sp, #32]
 800651c:	e73b      	b.n	8006396 <_dtoa_r+0x736>
 800651e:	9a07      	ldr	r2, [sp, #28]
 8006520:	e767      	b.n	80063f2 <_dtoa_r+0x792>
 8006522:	9b06      	ldr	r3, [sp, #24]
 8006524:	2b01      	cmp	r3, #1
 8006526:	dc18      	bgt.n	800655a <_dtoa_r+0x8fa>
 8006528:	f1ba 0f00 	cmp.w	sl, #0
 800652c:	d115      	bne.n	800655a <_dtoa_r+0x8fa>
 800652e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006532:	b993      	cbnz	r3, 800655a <_dtoa_r+0x8fa>
 8006534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006538:	0d1b      	lsrs	r3, r3, #20
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	b183      	cbz	r3, 8006560 <_dtoa_r+0x900>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	3301      	adds	r3, #1
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	9b05      	ldr	r3, [sp, #20]
 8006546:	3301      	adds	r3, #1
 8006548:	9305      	str	r3, [sp, #20]
 800654a:	f04f 0801 	mov.w	r8, #1
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	2b00      	cmp	r3, #0
 8006552:	f47f af6a 	bne.w	800642a <_dtoa_r+0x7ca>
 8006556:	2001      	movs	r0, #1
 8006558:	e76f      	b.n	800643a <_dtoa_r+0x7da>
 800655a:	f04f 0800 	mov.w	r8, #0
 800655e:	e7f6      	b.n	800654e <_dtoa_r+0x8ee>
 8006560:	4698      	mov	r8, r3
 8006562:	e7f4      	b.n	800654e <_dtoa_r+0x8ee>
 8006564:	f43f af7d 	beq.w	8006462 <_dtoa_r+0x802>
 8006568:	4618      	mov	r0, r3
 800656a:	301c      	adds	r0, #28
 800656c:	e772      	b.n	8006454 <_dtoa_r+0x7f4>
 800656e:	9b03      	ldr	r3, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	dc37      	bgt.n	80065e4 <_dtoa_r+0x984>
 8006574:	9b06      	ldr	r3, [sp, #24]
 8006576:	2b02      	cmp	r3, #2
 8006578:	dd34      	ble.n	80065e4 <_dtoa_r+0x984>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	b96b      	cbnz	r3, 800659e <_dtoa_r+0x93e>
 8006582:	4631      	mov	r1, r6
 8006584:	2205      	movs	r2, #5
 8006586:	4620      	mov	r0, r4
 8006588:	f000 f9d4 	bl	8006934 <__multadd>
 800658c:	4601      	mov	r1, r0
 800658e:	4606      	mov	r6, r0
 8006590:	ee18 0a10 	vmov	r0, s16
 8006594:	f000 fbee 	bl	8006d74 <__mcmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	f73f adbb 	bgt.w	8006114 <_dtoa_r+0x4b4>
 800659e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a0:	9d01      	ldr	r5, [sp, #4]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	4631      	mov	r1, r6
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 f99f 	bl	80068f0 <_Bfree>
 80065b2:	2f00      	cmp	r7, #0
 80065b4:	f43f aea4 	beq.w	8006300 <_dtoa_r+0x6a0>
 80065b8:	f1b8 0f00 	cmp.w	r8, #0
 80065bc:	d005      	beq.n	80065ca <_dtoa_r+0x96a>
 80065be:	45b8      	cmp	r8, r7
 80065c0:	d003      	beq.n	80065ca <_dtoa_r+0x96a>
 80065c2:	4641      	mov	r1, r8
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f993 	bl	80068f0 <_Bfree>
 80065ca:	4639      	mov	r1, r7
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f98f 	bl	80068f0 <_Bfree>
 80065d2:	e695      	b.n	8006300 <_dtoa_r+0x6a0>
 80065d4:	2600      	movs	r6, #0
 80065d6:	4637      	mov	r7, r6
 80065d8:	e7e1      	b.n	800659e <_dtoa_r+0x93e>
 80065da:	9700      	str	r7, [sp, #0]
 80065dc:	4637      	mov	r7, r6
 80065de:	e599      	b.n	8006114 <_dtoa_r+0x4b4>
 80065e0:	40240000 	.word	0x40240000
 80065e4:	9b08      	ldr	r3, [sp, #32]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 80ca 	beq.w	8006780 <_dtoa_r+0xb20>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	dd05      	ble.n	8006600 <_dtoa_r+0x9a0>
 80065f4:	4639      	mov	r1, r7
 80065f6:	462a      	mov	r2, r5
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fb4b 	bl	8006c94 <__lshift>
 80065fe:	4607      	mov	r7, r0
 8006600:	f1b8 0f00 	cmp.w	r8, #0
 8006604:	d05b      	beq.n	80066be <_dtoa_r+0xa5e>
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f931 	bl	8006870 <_Balloc>
 800660e:	4605      	mov	r5, r0
 8006610:	b928      	cbnz	r0, 800661e <_dtoa_r+0x9be>
 8006612:	4b87      	ldr	r3, [pc, #540]	; (8006830 <_dtoa_r+0xbd0>)
 8006614:	4602      	mov	r2, r0
 8006616:	f240 21ea 	movw	r1, #746	; 0x2ea
 800661a:	f7ff bb3b 	b.w	8005c94 <_dtoa_r+0x34>
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	3202      	adds	r2, #2
 8006622:	0092      	lsls	r2, r2, #2
 8006624:	f107 010c 	add.w	r1, r7, #12
 8006628:	300c      	adds	r0, #12
 800662a:	f000 f913 	bl	8006854 <memcpy>
 800662e:	2201      	movs	r2, #1
 8006630:	4629      	mov	r1, r5
 8006632:	4620      	mov	r0, r4
 8006634:	f000 fb2e 	bl	8006c94 <__lshift>
 8006638:	9b01      	ldr	r3, [sp, #4]
 800663a:	f103 0901 	add.w	r9, r3, #1
 800663e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006642:	4413      	add	r3, r2
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	f00a 0301 	and.w	r3, sl, #1
 800664a:	46b8      	mov	r8, r7
 800664c:	9304      	str	r3, [sp, #16]
 800664e:	4607      	mov	r7, r0
 8006650:	4631      	mov	r1, r6
 8006652:	ee18 0a10 	vmov	r0, s16
 8006656:	f7ff fa77 	bl	8005b48 <quorem>
 800665a:	4641      	mov	r1, r8
 800665c:	9002      	str	r0, [sp, #8]
 800665e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006662:	ee18 0a10 	vmov	r0, s16
 8006666:	f000 fb85 	bl	8006d74 <__mcmp>
 800666a:	463a      	mov	r2, r7
 800666c:	9003      	str	r0, [sp, #12]
 800666e:	4631      	mov	r1, r6
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fb9b 	bl	8006dac <__mdiff>
 8006676:	68c2      	ldr	r2, [r0, #12]
 8006678:	f109 3bff 	add.w	fp, r9, #4294967295
 800667c:	4605      	mov	r5, r0
 800667e:	bb02      	cbnz	r2, 80066c2 <_dtoa_r+0xa62>
 8006680:	4601      	mov	r1, r0
 8006682:	ee18 0a10 	vmov	r0, s16
 8006686:	f000 fb75 	bl	8006d74 <__mcmp>
 800668a:	4602      	mov	r2, r0
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	9207      	str	r2, [sp, #28]
 8006692:	f000 f92d 	bl	80068f0 <_Bfree>
 8006696:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800669a:	ea43 0102 	orr.w	r1, r3, r2
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	430b      	orrs	r3, r1
 80066a2:	464d      	mov	r5, r9
 80066a4:	d10f      	bne.n	80066c6 <_dtoa_r+0xa66>
 80066a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066aa:	d02a      	beq.n	8006702 <_dtoa_r+0xaa2>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dd02      	ble.n	80066b8 <_dtoa_r+0xa58>
 80066b2:	9b02      	ldr	r3, [sp, #8]
 80066b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80066b8:	f88b a000 	strb.w	sl, [fp]
 80066bc:	e775      	b.n	80065aa <_dtoa_r+0x94a>
 80066be:	4638      	mov	r0, r7
 80066c0:	e7ba      	b.n	8006638 <_dtoa_r+0x9d8>
 80066c2:	2201      	movs	r2, #1
 80066c4:	e7e2      	b.n	800668c <_dtoa_r+0xa2c>
 80066c6:	9b03      	ldr	r3, [sp, #12]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db04      	blt.n	80066d6 <_dtoa_r+0xa76>
 80066cc:	9906      	ldr	r1, [sp, #24]
 80066ce:	430b      	orrs	r3, r1
 80066d0:	9904      	ldr	r1, [sp, #16]
 80066d2:	430b      	orrs	r3, r1
 80066d4:	d122      	bne.n	800671c <_dtoa_r+0xabc>
 80066d6:	2a00      	cmp	r2, #0
 80066d8:	ddee      	ble.n	80066b8 <_dtoa_r+0xa58>
 80066da:	ee18 1a10 	vmov	r1, s16
 80066de:	2201      	movs	r2, #1
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fad7 	bl	8006c94 <__lshift>
 80066e6:	4631      	mov	r1, r6
 80066e8:	ee08 0a10 	vmov	s16, r0
 80066ec:	f000 fb42 	bl	8006d74 <__mcmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	dc03      	bgt.n	80066fc <_dtoa_r+0xa9c>
 80066f4:	d1e0      	bne.n	80066b8 <_dtoa_r+0xa58>
 80066f6:	f01a 0f01 	tst.w	sl, #1
 80066fa:	d0dd      	beq.n	80066b8 <_dtoa_r+0xa58>
 80066fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006700:	d1d7      	bne.n	80066b2 <_dtoa_r+0xa52>
 8006702:	2339      	movs	r3, #57	; 0x39
 8006704:	f88b 3000 	strb.w	r3, [fp]
 8006708:	462b      	mov	r3, r5
 800670a:	461d      	mov	r5, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006712:	2a39      	cmp	r2, #57	; 0x39
 8006714:	d071      	beq.n	80067fa <_dtoa_r+0xb9a>
 8006716:	3201      	adds	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e746      	b.n	80065aa <_dtoa_r+0x94a>
 800671c:	2a00      	cmp	r2, #0
 800671e:	dd07      	ble.n	8006730 <_dtoa_r+0xad0>
 8006720:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006724:	d0ed      	beq.n	8006702 <_dtoa_r+0xaa2>
 8006726:	f10a 0301 	add.w	r3, sl, #1
 800672a:	f88b 3000 	strb.w	r3, [fp]
 800672e:	e73c      	b.n	80065aa <_dtoa_r+0x94a>
 8006730:	9b05      	ldr	r3, [sp, #20]
 8006732:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006736:	4599      	cmp	r9, r3
 8006738:	d047      	beq.n	80067ca <_dtoa_r+0xb6a>
 800673a:	ee18 1a10 	vmov	r1, s16
 800673e:	2300      	movs	r3, #0
 8006740:	220a      	movs	r2, #10
 8006742:	4620      	mov	r0, r4
 8006744:	f000 f8f6 	bl	8006934 <__multadd>
 8006748:	45b8      	cmp	r8, r7
 800674a:	ee08 0a10 	vmov	s16, r0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	f04f 020a 	mov.w	r2, #10
 8006756:	4641      	mov	r1, r8
 8006758:	4620      	mov	r0, r4
 800675a:	d106      	bne.n	800676a <_dtoa_r+0xb0a>
 800675c:	f000 f8ea 	bl	8006934 <__multadd>
 8006760:	4680      	mov	r8, r0
 8006762:	4607      	mov	r7, r0
 8006764:	f109 0901 	add.w	r9, r9, #1
 8006768:	e772      	b.n	8006650 <_dtoa_r+0x9f0>
 800676a:	f000 f8e3 	bl	8006934 <__multadd>
 800676e:	4639      	mov	r1, r7
 8006770:	4680      	mov	r8, r0
 8006772:	2300      	movs	r3, #0
 8006774:	220a      	movs	r2, #10
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f8dc 	bl	8006934 <__multadd>
 800677c:	4607      	mov	r7, r0
 800677e:	e7f1      	b.n	8006764 <_dtoa_r+0xb04>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	9d01      	ldr	r5, [sp, #4]
 8006786:	ee18 0a10 	vmov	r0, s16
 800678a:	4631      	mov	r1, r6
 800678c:	f7ff f9dc 	bl	8005b48 <quorem>
 8006790:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	f805 ab01 	strb.w	sl, [r5], #1
 800679a:	1aea      	subs	r2, r5, r3
 800679c:	9b02      	ldr	r3, [sp, #8]
 800679e:	4293      	cmp	r3, r2
 80067a0:	dd09      	ble.n	80067b6 <_dtoa_r+0xb56>
 80067a2:	ee18 1a10 	vmov	r1, s16
 80067a6:	2300      	movs	r3, #0
 80067a8:	220a      	movs	r2, #10
 80067aa:	4620      	mov	r0, r4
 80067ac:	f000 f8c2 	bl	8006934 <__multadd>
 80067b0:	ee08 0a10 	vmov	s16, r0
 80067b4:	e7e7      	b.n	8006786 <_dtoa_r+0xb26>
 80067b6:	9b02      	ldr	r3, [sp, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bfc8      	it	gt
 80067bc:	461d      	movgt	r5, r3
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	bfd8      	it	le
 80067c2:	2501      	movle	r5, #1
 80067c4:	441d      	add	r5, r3
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	ee18 1a10 	vmov	r1, s16
 80067ce:	2201      	movs	r2, #1
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fa5f 	bl	8006c94 <__lshift>
 80067d6:	4631      	mov	r1, r6
 80067d8:	ee08 0a10 	vmov	s16, r0
 80067dc:	f000 faca 	bl	8006d74 <__mcmp>
 80067e0:	2800      	cmp	r0, #0
 80067e2:	dc91      	bgt.n	8006708 <_dtoa_r+0xaa8>
 80067e4:	d102      	bne.n	80067ec <_dtoa_r+0xb8c>
 80067e6:	f01a 0f01 	tst.w	sl, #1
 80067ea:	d18d      	bne.n	8006708 <_dtoa_r+0xaa8>
 80067ec:	462b      	mov	r3, r5
 80067ee:	461d      	mov	r5, r3
 80067f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f4:	2a30      	cmp	r2, #48	; 0x30
 80067f6:	d0fa      	beq.n	80067ee <_dtoa_r+0xb8e>
 80067f8:	e6d7      	b.n	80065aa <_dtoa_r+0x94a>
 80067fa:	9a01      	ldr	r2, [sp, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d184      	bne.n	800670a <_dtoa_r+0xaaa>
 8006800:	9b00      	ldr	r3, [sp, #0]
 8006802:	3301      	adds	r3, #1
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2331      	movs	r3, #49	; 0x31
 8006808:	7013      	strb	r3, [r2, #0]
 800680a:	e6ce      	b.n	80065aa <_dtoa_r+0x94a>
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <_dtoa_r+0xbd4>)
 800680e:	f7ff ba95 	b.w	8005d3c <_dtoa_r+0xdc>
 8006812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006814:	2b00      	cmp	r3, #0
 8006816:	f47f aa6e 	bne.w	8005cf6 <_dtoa_r+0x96>
 800681a:	4b07      	ldr	r3, [pc, #28]	; (8006838 <_dtoa_r+0xbd8>)
 800681c:	f7ff ba8e 	b.w	8005d3c <_dtoa_r+0xdc>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dcae      	bgt.n	8006784 <_dtoa_r+0xb24>
 8006826:	9b06      	ldr	r3, [sp, #24]
 8006828:	2b02      	cmp	r3, #2
 800682a:	f73f aea8 	bgt.w	800657e <_dtoa_r+0x91e>
 800682e:	e7a9      	b.n	8006784 <_dtoa_r+0xb24>
 8006830:	0800810f 	.word	0x0800810f
 8006834:	0800806c 	.word	0x0800806c
 8006838:	08008090 	.word	0x08008090

0800683c <_localeconv_r>:
 800683c:	4800      	ldr	r0, [pc, #0]	; (8006840 <_localeconv_r+0x4>)
 800683e:	4770      	bx	lr
 8006840:	20000160 	.word	0x20000160

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 bc17 	b.w	800707c <_malloc_r>
 800684e:	bf00      	nop
 8006850:	2000000c 	.word	0x2000000c

08006854 <memcpy>:
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	f100 33ff 	add.w	r3, r0, #4294967295
 800685c:	d100      	bne.n	8006860 <memcpy+0xc>
 800685e:	4770      	bx	lr
 8006860:	b510      	push	{r4, lr}
 8006862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686a:	4291      	cmp	r1, r2
 800686c:	d1f9      	bne.n	8006862 <memcpy+0xe>
 800686e:	bd10      	pop	{r4, pc}

08006870 <_Balloc>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	b976      	cbnz	r6, 8006898 <_Balloc+0x28>
 800687a:	2010      	movs	r0, #16
 800687c:	f7ff ffe2 	bl	8006844 <malloc>
 8006880:	4602      	mov	r2, r0
 8006882:	6260      	str	r0, [r4, #36]	; 0x24
 8006884:	b920      	cbnz	r0, 8006890 <_Balloc+0x20>
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <_Balloc+0x78>)
 8006888:	4818      	ldr	r0, [pc, #96]	; (80068ec <_Balloc+0x7c>)
 800688a:	2166      	movs	r1, #102	; 0x66
 800688c:	f000 fdd6 	bl	800743c <__assert_func>
 8006890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006894:	6006      	str	r6, [r0, #0]
 8006896:	60c6      	str	r6, [r0, #12]
 8006898:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800689a:	68f3      	ldr	r3, [r6, #12]
 800689c:	b183      	cbz	r3, 80068c0 <_Balloc+0x50>
 800689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068a6:	b9b8      	cbnz	r0, 80068d8 <_Balloc+0x68>
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f605 	lsl.w	r6, r1, r5
 80068ae:	1d72      	adds	r2, r6, #5
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fb60 	bl	8006f78 <_calloc_r>
 80068b8:	b160      	cbz	r0, 80068d4 <_Balloc+0x64>
 80068ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068be:	e00e      	b.n	80068de <_Balloc+0x6e>
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	2104      	movs	r1, #4
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fb57 	bl	8006f78 <_calloc_r>
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	60f0      	str	r0, [r6, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <_Balloc+0x2e>
 80068d4:	2000      	movs	r0, #0
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068de:	2300      	movs	r3, #0
 80068e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068e4:	e7f7      	b.n	80068d6 <_Balloc+0x66>
 80068e6:	bf00      	nop
 80068e8:	0800809d 	.word	0x0800809d
 80068ec:	08008120 	.word	0x08008120

080068f0 <_Bfree>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	b976      	cbnz	r6, 8006918 <_Bfree+0x28>
 80068fa:	2010      	movs	r0, #16
 80068fc:	f7ff ffa2 	bl	8006844 <malloc>
 8006900:	4602      	mov	r2, r0
 8006902:	6268      	str	r0, [r5, #36]	; 0x24
 8006904:	b920      	cbnz	r0, 8006910 <_Bfree+0x20>
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <_Bfree+0x3c>)
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <_Bfree+0x40>)
 800690a:	218a      	movs	r1, #138	; 0x8a
 800690c:	f000 fd96 	bl	800743c <__assert_func>
 8006910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006914:	6006      	str	r6, [r0, #0]
 8006916:	60c6      	str	r6, [r0, #12]
 8006918:	b13c      	cbz	r4, 800692a <_Bfree+0x3a>
 800691a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800691c:	6862      	ldr	r2, [r4, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006924:	6021      	str	r1, [r4, #0]
 8006926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	0800809d 	.word	0x0800809d
 8006930:	08008120 	.word	0x08008120

08006934 <__multadd>:
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	690d      	ldr	r5, [r1, #16]
 800693a:	4607      	mov	r7, r0
 800693c:	460c      	mov	r4, r1
 800693e:	461e      	mov	r6, r3
 8006940:	f101 0c14 	add.w	ip, r1, #20
 8006944:	2000      	movs	r0, #0
 8006946:	f8dc 3000 	ldr.w	r3, [ip]
 800694a:	b299      	uxth	r1, r3
 800694c:	fb02 6101 	mla	r1, r2, r1, r6
 8006950:	0c1e      	lsrs	r6, r3, #16
 8006952:	0c0b      	lsrs	r3, r1, #16
 8006954:	fb02 3306 	mla	r3, r2, r6, r3
 8006958:	b289      	uxth	r1, r1
 800695a:	3001      	adds	r0, #1
 800695c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006960:	4285      	cmp	r5, r0
 8006962:	f84c 1b04 	str.w	r1, [ip], #4
 8006966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800696a:	dcec      	bgt.n	8006946 <__multadd+0x12>
 800696c:	b30e      	cbz	r6, 80069b2 <__multadd+0x7e>
 800696e:	68a3      	ldr	r3, [r4, #8]
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc19      	bgt.n	80069a8 <__multadd+0x74>
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	4638      	mov	r0, r7
 8006978:	3101      	adds	r1, #1
 800697a:	f7ff ff79 	bl	8006870 <_Balloc>
 800697e:	4680      	mov	r8, r0
 8006980:	b928      	cbnz	r0, 800698e <__multadd+0x5a>
 8006982:	4602      	mov	r2, r0
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <__multadd+0x84>)
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <__multadd+0x88>)
 8006988:	21b5      	movs	r1, #181	; 0xb5
 800698a:	f000 fd57 	bl	800743c <__assert_func>
 800698e:	6922      	ldr	r2, [r4, #16]
 8006990:	3202      	adds	r2, #2
 8006992:	f104 010c 	add.w	r1, r4, #12
 8006996:	0092      	lsls	r2, r2, #2
 8006998:	300c      	adds	r0, #12
 800699a:	f7ff ff5b 	bl	8006854 <memcpy>
 800699e:	4621      	mov	r1, r4
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ffa5 	bl	80068f0 <_Bfree>
 80069a6:	4644      	mov	r4, r8
 80069a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069ac:	3501      	adds	r5, #1
 80069ae:	615e      	str	r6, [r3, #20]
 80069b0:	6125      	str	r5, [r4, #16]
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	0800810f 	.word	0x0800810f
 80069bc:	08008120 	.word	0x08008120

080069c0 <__hi0bits>:
 80069c0:	0c03      	lsrs	r3, r0, #16
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	b9d3      	cbnz	r3, 80069fc <__hi0bits+0x3c>
 80069c6:	0400      	lsls	r0, r0, #16
 80069c8:	2310      	movs	r3, #16
 80069ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069ce:	bf04      	itt	eq
 80069d0:	0200      	lsleq	r0, r0, #8
 80069d2:	3308      	addeq	r3, #8
 80069d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069d8:	bf04      	itt	eq
 80069da:	0100      	lsleq	r0, r0, #4
 80069dc:	3304      	addeq	r3, #4
 80069de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069e2:	bf04      	itt	eq
 80069e4:	0080      	lsleq	r0, r0, #2
 80069e6:	3302      	addeq	r3, #2
 80069e8:	2800      	cmp	r0, #0
 80069ea:	db05      	blt.n	80069f8 <__hi0bits+0x38>
 80069ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069f0:	f103 0301 	add.w	r3, r3, #1
 80069f4:	bf08      	it	eq
 80069f6:	2320      	moveq	r3, #32
 80069f8:	4618      	mov	r0, r3
 80069fa:	4770      	bx	lr
 80069fc:	2300      	movs	r3, #0
 80069fe:	e7e4      	b.n	80069ca <__hi0bits+0xa>

08006a00 <__lo0bits>:
 8006a00:	6803      	ldr	r3, [r0, #0]
 8006a02:	f013 0207 	ands.w	r2, r3, #7
 8006a06:	4601      	mov	r1, r0
 8006a08:	d00b      	beq.n	8006a22 <__lo0bits+0x22>
 8006a0a:	07da      	lsls	r2, r3, #31
 8006a0c:	d423      	bmi.n	8006a56 <__lo0bits+0x56>
 8006a0e:	0798      	lsls	r0, r3, #30
 8006a10:	bf49      	itett	mi
 8006a12:	085b      	lsrmi	r3, r3, #1
 8006a14:	089b      	lsrpl	r3, r3, #2
 8006a16:	2001      	movmi	r0, #1
 8006a18:	600b      	strmi	r3, [r1, #0]
 8006a1a:	bf5c      	itt	pl
 8006a1c:	600b      	strpl	r3, [r1, #0]
 8006a1e:	2002      	movpl	r0, #2
 8006a20:	4770      	bx	lr
 8006a22:	b298      	uxth	r0, r3
 8006a24:	b9a8      	cbnz	r0, 8006a52 <__lo0bits+0x52>
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	2010      	movs	r0, #16
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	b90a      	cbnz	r2, 8006a32 <__lo0bits+0x32>
 8006a2e:	3008      	adds	r0, #8
 8006a30:	0a1b      	lsrs	r3, r3, #8
 8006a32:	071a      	lsls	r2, r3, #28
 8006a34:	bf04      	itt	eq
 8006a36:	091b      	lsreq	r3, r3, #4
 8006a38:	3004      	addeq	r0, #4
 8006a3a:	079a      	lsls	r2, r3, #30
 8006a3c:	bf04      	itt	eq
 8006a3e:	089b      	lsreq	r3, r3, #2
 8006a40:	3002      	addeq	r0, #2
 8006a42:	07da      	lsls	r2, r3, #31
 8006a44:	d403      	bmi.n	8006a4e <__lo0bits+0x4e>
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	f100 0001 	add.w	r0, r0, #1
 8006a4c:	d005      	beq.n	8006a5a <__lo0bits+0x5a>
 8006a4e:	600b      	str	r3, [r1, #0]
 8006a50:	4770      	bx	lr
 8006a52:	4610      	mov	r0, r2
 8006a54:	e7e9      	b.n	8006a2a <__lo0bits+0x2a>
 8006a56:	2000      	movs	r0, #0
 8006a58:	4770      	bx	lr
 8006a5a:	2020      	movs	r0, #32
 8006a5c:	4770      	bx	lr
	...

08006a60 <__i2b>:
 8006a60:	b510      	push	{r4, lr}
 8006a62:	460c      	mov	r4, r1
 8006a64:	2101      	movs	r1, #1
 8006a66:	f7ff ff03 	bl	8006870 <_Balloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	b928      	cbnz	r0, 8006a7a <__i2b+0x1a>
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <__i2b+0x24>)
 8006a70:	4805      	ldr	r0, [pc, #20]	; (8006a88 <__i2b+0x28>)
 8006a72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a76:	f000 fce1 	bl	800743c <__assert_func>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6144      	str	r4, [r0, #20]
 8006a7e:	6103      	str	r3, [r0, #16]
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	0800810f 	.word	0x0800810f
 8006a88:	08008120 	.word	0x08008120

08006a8c <__multiply>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	4691      	mov	r9, r2
 8006a92:	690a      	ldr	r2, [r1, #16]
 8006a94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	bfb8      	it	lt
 8006a9c:	460b      	movlt	r3, r1
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	bfbc      	itt	lt
 8006aa2:	464c      	movlt	r4, r9
 8006aa4:	4699      	movlt	r9, r3
 8006aa6:	6927      	ldr	r7, [r4, #16]
 8006aa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aac:	68a3      	ldr	r3, [r4, #8]
 8006aae:	6861      	ldr	r1, [r4, #4]
 8006ab0:	eb07 060a 	add.w	r6, r7, sl
 8006ab4:	42b3      	cmp	r3, r6
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	bfb8      	it	lt
 8006aba:	3101      	addlt	r1, #1
 8006abc:	f7ff fed8 	bl	8006870 <_Balloc>
 8006ac0:	b930      	cbnz	r0, 8006ad0 <__multiply+0x44>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b44      	ldr	r3, [pc, #272]	; (8006bd8 <__multiply+0x14c>)
 8006ac6:	4845      	ldr	r0, [pc, #276]	; (8006bdc <__multiply+0x150>)
 8006ac8:	f240 115d 	movw	r1, #349	; 0x15d
 8006acc:	f000 fcb6 	bl	800743c <__assert_func>
 8006ad0:	f100 0514 	add.w	r5, r0, #20
 8006ad4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ad8:	462b      	mov	r3, r5
 8006ada:	2200      	movs	r2, #0
 8006adc:	4543      	cmp	r3, r8
 8006ade:	d321      	bcc.n	8006b24 <__multiply+0x98>
 8006ae0:	f104 0314 	add.w	r3, r4, #20
 8006ae4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ae8:	f109 0314 	add.w	r3, r9, #20
 8006aec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006af0:	9202      	str	r2, [sp, #8]
 8006af2:	1b3a      	subs	r2, r7, r4
 8006af4:	3a15      	subs	r2, #21
 8006af6:	f022 0203 	bic.w	r2, r2, #3
 8006afa:	3204      	adds	r2, #4
 8006afc:	f104 0115 	add.w	r1, r4, #21
 8006b00:	428f      	cmp	r7, r1
 8006b02:	bf38      	it	cc
 8006b04:	2204      	movcc	r2, #4
 8006b06:	9201      	str	r2, [sp, #4]
 8006b08:	9a02      	ldr	r2, [sp, #8]
 8006b0a:	9303      	str	r3, [sp, #12]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d80c      	bhi.n	8006b2a <__multiply+0x9e>
 8006b10:	2e00      	cmp	r6, #0
 8006b12:	dd03      	ble.n	8006b1c <__multiply+0x90>
 8006b14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05a      	beq.n	8006bd2 <__multiply+0x146>
 8006b1c:	6106      	str	r6, [r0, #16]
 8006b1e:	b005      	add	sp, #20
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b24:	f843 2b04 	str.w	r2, [r3], #4
 8006b28:	e7d8      	b.n	8006adc <__multiply+0x50>
 8006b2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b2e:	f1ba 0f00 	cmp.w	sl, #0
 8006b32:	d024      	beq.n	8006b7e <__multiply+0xf2>
 8006b34:	f104 0e14 	add.w	lr, r4, #20
 8006b38:	46a9      	mov	r9, r5
 8006b3a:	f04f 0c00 	mov.w	ip, #0
 8006b3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b42:	f8d9 1000 	ldr.w	r1, [r9]
 8006b46:	fa1f fb82 	uxth.w	fp, r2
 8006b4a:	b289      	uxth	r1, r1
 8006b4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b54:	f8d9 2000 	ldr.w	r2, [r9]
 8006b58:	4461      	add	r1, ip
 8006b5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b66:	b289      	uxth	r1, r1
 8006b68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b6c:	4577      	cmp	r7, lr
 8006b6e:	f849 1b04 	str.w	r1, [r9], #4
 8006b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b76:	d8e2      	bhi.n	8006b3e <__multiply+0xb2>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	f845 c002 	str.w	ip, [r5, r2]
 8006b7e:	9a03      	ldr	r2, [sp, #12]
 8006b80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b84:	3304      	adds	r3, #4
 8006b86:	f1b9 0f00 	cmp.w	r9, #0
 8006b8a:	d020      	beq.n	8006bce <__multiply+0x142>
 8006b8c:	6829      	ldr	r1, [r5, #0]
 8006b8e:	f104 0c14 	add.w	ip, r4, #20
 8006b92:	46ae      	mov	lr, r5
 8006b94:	f04f 0a00 	mov.w	sl, #0
 8006b98:	f8bc b000 	ldrh.w	fp, [ip]
 8006b9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ba0:	fb09 220b 	mla	r2, r9, fp, r2
 8006ba4:	4492      	add	sl, r2
 8006ba6:	b289      	uxth	r1, r1
 8006ba8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006bac:	f84e 1b04 	str.w	r1, [lr], #4
 8006bb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006bb4:	f8be 1000 	ldrh.w	r1, [lr]
 8006bb8:	0c12      	lsrs	r2, r2, #16
 8006bba:	fb09 1102 	mla	r1, r9, r2, r1
 8006bbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006bc2:	4567      	cmp	r7, ip
 8006bc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc8:	d8e6      	bhi.n	8006b98 <__multiply+0x10c>
 8006bca:	9a01      	ldr	r2, [sp, #4]
 8006bcc:	50a9      	str	r1, [r5, r2]
 8006bce:	3504      	adds	r5, #4
 8006bd0:	e79a      	b.n	8006b08 <__multiply+0x7c>
 8006bd2:	3e01      	subs	r6, #1
 8006bd4:	e79c      	b.n	8006b10 <__multiply+0x84>
 8006bd6:	bf00      	nop
 8006bd8:	0800810f 	.word	0x0800810f
 8006bdc:	08008120 	.word	0x08008120

08006be0 <__pow5mult>:
 8006be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	4615      	mov	r5, r2
 8006be6:	f012 0203 	ands.w	r2, r2, #3
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	d007      	beq.n	8006c00 <__pow5mult+0x20>
 8006bf0:	4c25      	ldr	r4, [pc, #148]	; (8006c88 <__pow5mult+0xa8>)
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bfa:	f7ff fe9b 	bl	8006934 <__multadd>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	10ad      	asrs	r5, r5, #2
 8006c02:	d03d      	beq.n	8006c80 <__pow5mult+0xa0>
 8006c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c06:	b97c      	cbnz	r4, 8006c28 <__pow5mult+0x48>
 8006c08:	2010      	movs	r0, #16
 8006c0a:	f7ff fe1b 	bl	8006844 <malloc>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6270      	str	r0, [r6, #36]	; 0x24
 8006c12:	b928      	cbnz	r0, 8006c20 <__pow5mult+0x40>
 8006c14:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <__pow5mult+0xac>)
 8006c16:	481e      	ldr	r0, [pc, #120]	; (8006c90 <__pow5mult+0xb0>)
 8006c18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c1c:	f000 fc0e 	bl	800743c <__assert_func>
 8006c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c24:	6004      	str	r4, [r0, #0]
 8006c26:	60c4      	str	r4, [r0, #12]
 8006c28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c30:	b94c      	cbnz	r4, 8006c46 <__pow5mult+0x66>
 8006c32:	f240 2171 	movw	r1, #625	; 0x271
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff12 	bl	8006a60 <__i2b>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c42:	4604      	mov	r4, r0
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	f04f 0900 	mov.w	r9, #0
 8006c4a:	07eb      	lsls	r3, r5, #31
 8006c4c:	d50a      	bpl.n	8006c64 <__pow5mult+0x84>
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4622      	mov	r2, r4
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7ff ff1a 	bl	8006a8c <__multiply>
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff fe47 	bl	80068f0 <_Bfree>
 8006c62:	4647      	mov	r7, r8
 8006c64:	106d      	asrs	r5, r5, #1
 8006c66:	d00b      	beq.n	8006c80 <__pow5mult+0xa0>
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	b938      	cbnz	r0, 8006c7c <__pow5mult+0x9c>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff ff0b 	bl	8006a8c <__multiply>
 8006c76:	6020      	str	r0, [r4, #0]
 8006c78:	f8c0 9000 	str.w	r9, [r0]
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e7e4      	b.n	8006c4a <__pow5mult+0x6a>
 8006c80:	4638      	mov	r0, r7
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	bf00      	nop
 8006c88:	08008270 	.word	0x08008270
 8006c8c:	0800809d 	.word	0x0800809d
 8006c90:	08008120 	.word	0x08008120

08006c94 <__lshift>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	460c      	mov	r4, r1
 8006c9a:	6849      	ldr	r1, [r1, #4]
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ca2:	68a3      	ldr	r3, [r4, #8]
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cac:	f108 0601 	add.w	r6, r8, #1
 8006cb0:	42b3      	cmp	r3, r6
 8006cb2:	db0b      	blt.n	8006ccc <__lshift+0x38>
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff fddb 	bl	8006870 <_Balloc>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	b948      	cbnz	r0, 8006cd2 <__lshift+0x3e>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b2a      	ldr	r3, [pc, #168]	; (8006d6c <__lshift+0xd8>)
 8006cc2:	482b      	ldr	r0, [pc, #172]	; (8006d70 <__lshift+0xdc>)
 8006cc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cc8:	f000 fbb8 	bl	800743c <__assert_func>
 8006ccc:	3101      	adds	r1, #1
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__lshift+0x1c>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f100 0114 	add.w	r1, r0, #20
 8006cd8:	f100 0210 	add.w	r2, r0, #16
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4553      	cmp	r3, sl
 8006ce0:	db37      	blt.n	8006d52 <__lshift+0xbe>
 8006ce2:	6920      	ldr	r0, [r4, #16]
 8006ce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce8:	f104 0314 	add.w	r3, r4, #20
 8006cec:	f019 091f 	ands.w	r9, r9, #31
 8006cf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cf8:	d02f      	beq.n	8006d5a <__lshift+0xc6>
 8006cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cfe:	468a      	mov	sl, r1
 8006d00:	f04f 0c00 	mov.w	ip, #0
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	fa02 f209 	lsl.w	r2, r2, r9
 8006d0a:	ea42 020c 	orr.w	r2, r2, ip
 8006d0e:	f84a 2b04 	str.w	r2, [sl], #4
 8006d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d16:	4298      	cmp	r0, r3
 8006d18:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d1c:	d8f2      	bhi.n	8006d04 <__lshift+0x70>
 8006d1e:	1b03      	subs	r3, r0, r4
 8006d20:	3b15      	subs	r3, #21
 8006d22:	f023 0303 	bic.w	r3, r3, #3
 8006d26:	3304      	adds	r3, #4
 8006d28:	f104 0215 	add.w	r2, r4, #21
 8006d2c:	4290      	cmp	r0, r2
 8006d2e:	bf38      	it	cc
 8006d30:	2304      	movcc	r3, #4
 8006d32:	f841 c003 	str.w	ip, [r1, r3]
 8006d36:	f1bc 0f00 	cmp.w	ip, #0
 8006d3a:	d001      	beq.n	8006d40 <__lshift+0xac>
 8006d3c:	f108 0602 	add.w	r6, r8, #2
 8006d40:	3e01      	subs	r6, #1
 8006d42:	4638      	mov	r0, r7
 8006d44:	612e      	str	r6, [r5, #16]
 8006d46:	4621      	mov	r1, r4
 8006d48:	f7ff fdd2 	bl	80068f0 <_Bfree>
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d56:	3301      	adds	r3, #1
 8006d58:	e7c1      	b.n	8006cde <__lshift+0x4a>
 8006d5a:	3904      	subs	r1, #4
 8006d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d64:	4298      	cmp	r0, r3
 8006d66:	d8f9      	bhi.n	8006d5c <__lshift+0xc8>
 8006d68:	e7ea      	b.n	8006d40 <__lshift+0xac>
 8006d6a:	bf00      	nop
 8006d6c:	0800810f 	.word	0x0800810f
 8006d70:	08008120 	.word	0x08008120

08006d74 <__mcmp>:
 8006d74:	b530      	push	{r4, r5, lr}
 8006d76:	6902      	ldr	r2, [r0, #16]
 8006d78:	690c      	ldr	r4, [r1, #16]
 8006d7a:	1b12      	subs	r2, r2, r4
 8006d7c:	d10e      	bne.n	8006d9c <__mcmp+0x28>
 8006d7e:	f100 0314 	add.w	r3, r0, #20
 8006d82:	3114      	adds	r1, #20
 8006d84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d003      	beq.n	8006da0 <__mcmp+0x2c>
 8006d98:	d305      	bcc.n	8006da6 <__mcmp+0x32>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	bd30      	pop	{r4, r5, pc}
 8006da0:	4283      	cmp	r3, r0
 8006da2:	d3f3      	bcc.n	8006d8c <__mcmp+0x18>
 8006da4:	e7fa      	b.n	8006d9c <__mcmp+0x28>
 8006da6:	f04f 32ff 	mov.w	r2, #4294967295
 8006daa:	e7f7      	b.n	8006d9c <__mcmp+0x28>

08006dac <__mdiff>:
 8006dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	460c      	mov	r4, r1
 8006db2:	4606      	mov	r6, r0
 8006db4:	4611      	mov	r1, r2
 8006db6:	4620      	mov	r0, r4
 8006db8:	4690      	mov	r8, r2
 8006dba:	f7ff ffdb 	bl	8006d74 <__mcmp>
 8006dbe:	1e05      	subs	r5, r0, #0
 8006dc0:	d110      	bne.n	8006de4 <__mdiff+0x38>
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff fd53 	bl	8006870 <_Balloc>
 8006dca:	b930      	cbnz	r0, 8006dda <__mdiff+0x2e>
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <__mdiff+0x10c>)
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f240 2132 	movw	r1, #562	; 0x232
 8006dd4:	4839      	ldr	r0, [pc, #228]	; (8006ebc <__mdiff+0x110>)
 8006dd6:	f000 fb31 	bl	800743c <__assert_func>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	bfa4      	itt	ge
 8006de6:	4643      	movge	r3, r8
 8006de8:	46a0      	movge	r8, r4
 8006dea:	4630      	mov	r0, r6
 8006dec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006df0:	bfa6      	itte	ge
 8006df2:	461c      	movge	r4, r3
 8006df4:	2500      	movge	r5, #0
 8006df6:	2501      	movlt	r5, #1
 8006df8:	f7ff fd3a 	bl	8006870 <_Balloc>
 8006dfc:	b920      	cbnz	r0, 8006e08 <__mdiff+0x5c>
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <__mdiff+0x10c>)
 8006e00:	4602      	mov	r2, r0
 8006e02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e06:	e7e5      	b.n	8006dd4 <__mdiff+0x28>
 8006e08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e0c:	6926      	ldr	r6, [r4, #16]
 8006e0e:	60c5      	str	r5, [r0, #12]
 8006e10:	f104 0914 	add.w	r9, r4, #20
 8006e14:	f108 0514 	add.w	r5, r8, #20
 8006e18:	f100 0e14 	add.w	lr, r0, #20
 8006e1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e24:	f108 0210 	add.w	r2, r8, #16
 8006e28:	46f2      	mov	sl, lr
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e34:	fa1f f883 	uxth.w	r8, r3
 8006e38:	fa11 f18b 	uxtah	r1, r1, fp
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	eba1 0808 	sub.w	r8, r1, r8
 8006e42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e4a:	fa1f f888 	uxth.w	r8, r8
 8006e4e:	1419      	asrs	r1, r3, #16
 8006e50:	454e      	cmp	r6, r9
 8006e52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e56:	f84a 3b04 	str.w	r3, [sl], #4
 8006e5a:	d8e7      	bhi.n	8006e2c <__mdiff+0x80>
 8006e5c:	1b33      	subs	r3, r6, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	3415      	adds	r4, #21
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	bf38      	it	cc
 8006e6c:	2304      	movcc	r3, #4
 8006e6e:	441d      	add	r5, r3
 8006e70:	4473      	add	r3, lr
 8006e72:	469e      	mov	lr, r3
 8006e74:	462e      	mov	r6, r5
 8006e76:	4566      	cmp	r6, ip
 8006e78:	d30e      	bcc.n	8006e98 <__mdiff+0xec>
 8006e7a:	f10c 0203 	add.w	r2, ip, #3
 8006e7e:	1b52      	subs	r2, r2, r5
 8006e80:	f022 0203 	bic.w	r2, r2, #3
 8006e84:	3d03      	subs	r5, #3
 8006e86:	45ac      	cmp	ip, r5
 8006e88:	bf38      	it	cc
 8006e8a:	2200      	movcc	r2, #0
 8006e8c:	441a      	add	r2, r3
 8006e8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e92:	b17b      	cbz	r3, 8006eb4 <__mdiff+0x108>
 8006e94:	6107      	str	r7, [r0, #16]
 8006e96:	e7a3      	b.n	8006de0 <__mdiff+0x34>
 8006e98:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e9c:	fa11 f288 	uxtah	r2, r1, r8
 8006ea0:	1414      	asrs	r4, r2, #16
 8006ea2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ea6:	b292      	uxth	r2, r2
 8006ea8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006eac:	f84e 2b04 	str.w	r2, [lr], #4
 8006eb0:	1421      	asrs	r1, r4, #16
 8006eb2:	e7e0      	b.n	8006e76 <__mdiff+0xca>
 8006eb4:	3f01      	subs	r7, #1
 8006eb6:	e7ea      	b.n	8006e8e <__mdiff+0xe2>
 8006eb8:	0800810f 	.word	0x0800810f
 8006ebc:	08008120 	.word	0x08008120

08006ec0 <__d2b>:
 8006ec0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ec4:	4689      	mov	r9, r1
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	ec57 6b10 	vmov	r6, r7, d0
 8006ecc:	4690      	mov	r8, r2
 8006ece:	f7ff fccf 	bl	8006870 <_Balloc>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	b930      	cbnz	r0, 8006ee4 <__d2b+0x24>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	4b25      	ldr	r3, [pc, #148]	; (8006f70 <__d2b+0xb0>)
 8006eda:	4826      	ldr	r0, [pc, #152]	; (8006f74 <__d2b+0xb4>)
 8006edc:	f240 310a 	movw	r1, #778	; 0x30a
 8006ee0:	f000 faac 	bl	800743c <__assert_func>
 8006ee4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ee8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eec:	bb35      	cbnz	r5, 8006f3c <__d2b+0x7c>
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	d028      	beq.n	8006f46 <__d2b+0x86>
 8006ef4:	4668      	mov	r0, sp
 8006ef6:	9600      	str	r6, [sp, #0]
 8006ef8:	f7ff fd82 	bl	8006a00 <__lo0bits>
 8006efc:	9900      	ldr	r1, [sp, #0]
 8006efe:	b300      	cbz	r0, 8006f42 <__d2b+0x82>
 8006f00:	9a01      	ldr	r2, [sp, #4]
 8006f02:	f1c0 0320 	rsb	r3, r0, #32
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	40c2      	lsrs	r2, r0
 8006f0e:	6163      	str	r3, [r4, #20]
 8006f10:	9201      	str	r2, [sp, #4]
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	61a3      	str	r3, [r4, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bf14      	ite	ne
 8006f1a:	2202      	movne	r2, #2
 8006f1c:	2201      	moveq	r2, #1
 8006f1e:	6122      	str	r2, [r4, #16]
 8006f20:	b1d5      	cbz	r5, 8006f58 <__d2b+0x98>
 8006f22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f26:	4405      	add	r5, r0
 8006f28:	f8c9 5000 	str.w	r5, [r9]
 8006f2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f30:	f8c8 0000 	str.w	r0, [r8]
 8006f34:	4620      	mov	r0, r4
 8006f36:	b003      	add	sp, #12
 8006f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f40:	e7d5      	b.n	8006eee <__d2b+0x2e>
 8006f42:	6161      	str	r1, [r4, #20]
 8006f44:	e7e5      	b.n	8006f12 <__d2b+0x52>
 8006f46:	a801      	add	r0, sp, #4
 8006f48:	f7ff fd5a 	bl	8006a00 <__lo0bits>
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	6163      	str	r3, [r4, #20]
 8006f50:	2201      	movs	r2, #1
 8006f52:	6122      	str	r2, [r4, #16]
 8006f54:	3020      	adds	r0, #32
 8006f56:	e7e3      	b.n	8006f20 <__d2b+0x60>
 8006f58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f60:	f8c9 0000 	str.w	r0, [r9]
 8006f64:	6918      	ldr	r0, [r3, #16]
 8006f66:	f7ff fd2b 	bl	80069c0 <__hi0bits>
 8006f6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f6e:	e7df      	b.n	8006f30 <__d2b+0x70>
 8006f70:	0800810f 	.word	0x0800810f
 8006f74:	08008120 	.word	0x08008120

08006f78 <_calloc_r>:
 8006f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f7a:	fba1 2402 	umull	r2, r4, r1, r2
 8006f7e:	b94c      	cbnz	r4, 8006f94 <_calloc_r+0x1c>
 8006f80:	4611      	mov	r1, r2
 8006f82:	9201      	str	r2, [sp, #4]
 8006f84:	f000 f87a 	bl	800707c <_malloc_r>
 8006f88:	9a01      	ldr	r2, [sp, #4]
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	b930      	cbnz	r0, 8006f9c <_calloc_r+0x24>
 8006f8e:	4628      	mov	r0, r5
 8006f90:	b003      	add	sp, #12
 8006f92:	bd30      	pop	{r4, r5, pc}
 8006f94:	220c      	movs	r2, #12
 8006f96:	6002      	str	r2, [r0, #0]
 8006f98:	2500      	movs	r5, #0
 8006f9a:	e7f8      	b.n	8006f8e <_calloc_r+0x16>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	f7fe f941 	bl	8005224 <memset>
 8006fa2:	e7f4      	b.n	8006f8e <_calloc_r+0x16>

08006fa4 <_free_r>:
 8006fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d044      	beq.n	8007034 <_free_r+0x90>
 8006faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fae:	9001      	str	r0, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fb6:	bfb8      	it	lt
 8006fb8:	18e4      	addlt	r4, r4, r3
 8006fba:	f000 fa9b 	bl	80074f4 <__malloc_lock>
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <_free_r+0x94>)
 8006fc0:	9801      	ldr	r0, [sp, #4]
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	b933      	cbnz	r3, 8006fd4 <_free_r+0x30>
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	b003      	add	sp, #12
 8006fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fd0:	f000 ba96 	b.w	8007500 <__malloc_unlock>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d908      	bls.n	8006fea <_free_r+0x46>
 8006fd8:	6825      	ldr	r5, [r4, #0]
 8006fda:	1961      	adds	r1, r4, r5
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf01      	itttt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	1949      	addeq	r1, r1, r5
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	e7ed      	b.n	8006fc6 <_free_r+0x22>
 8006fea:	461a      	mov	r2, r3
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b10b      	cbz	r3, 8006ff4 <_free_r+0x50>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d9fa      	bls.n	8006fea <_free_r+0x46>
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	1855      	adds	r5, r2, r1
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d10b      	bne.n	8007014 <_free_r+0x70>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	4421      	add	r1, r4
 8007000:	1854      	adds	r4, r2, r1
 8007002:	42a3      	cmp	r3, r4
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	d1e0      	bne.n	8006fca <_free_r+0x26>
 8007008:	681c      	ldr	r4, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	6053      	str	r3, [r2, #4]
 800700e:	4421      	add	r1, r4
 8007010:	6011      	str	r1, [r2, #0]
 8007012:	e7da      	b.n	8006fca <_free_r+0x26>
 8007014:	d902      	bls.n	800701c <_free_r+0x78>
 8007016:	230c      	movs	r3, #12
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	e7d6      	b.n	8006fca <_free_r+0x26>
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	1961      	adds	r1, r4, r5
 8007020:	428b      	cmp	r3, r1
 8007022:	bf04      	itt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	bf04      	itt	eq
 800702c:	1949      	addeq	r1, r1, r5
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	6054      	str	r4, [r2, #4]
 8007032:	e7ca      	b.n	8006fca <_free_r+0x26>
 8007034:	b003      	add	sp, #12
 8007036:	bd30      	pop	{r4, r5, pc}
 8007038:	200003d8 	.word	0x200003d8

0800703c <sbrk_aligned>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4e0e      	ldr	r6, [pc, #56]	; (8007078 <sbrk_aligned+0x3c>)
 8007040:	460c      	mov	r4, r1
 8007042:	6831      	ldr	r1, [r6, #0]
 8007044:	4605      	mov	r5, r0
 8007046:	b911      	cbnz	r1, 800704e <sbrk_aligned+0x12>
 8007048:	f000 f9e8 	bl	800741c <_sbrk_r>
 800704c:	6030      	str	r0, [r6, #0]
 800704e:	4621      	mov	r1, r4
 8007050:	4628      	mov	r0, r5
 8007052:	f000 f9e3 	bl	800741c <_sbrk_r>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d00a      	beq.n	8007070 <sbrk_aligned+0x34>
 800705a:	1cc4      	adds	r4, r0, #3
 800705c:	f024 0403 	bic.w	r4, r4, #3
 8007060:	42a0      	cmp	r0, r4
 8007062:	d007      	beq.n	8007074 <sbrk_aligned+0x38>
 8007064:	1a21      	subs	r1, r4, r0
 8007066:	4628      	mov	r0, r5
 8007068:	f000 f9d8 	bl	800741c <_sbrk_r>
 800706c:	3001      	adds	r0, #1
 800706e:	d101      	bne.n	8007074 <sbrk_aligned+0x38>
 8007070:	f04f 34ff 	mov.w	r4, #4294967295
 8007074:	4620      	mov	r0, r4
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	200003dc 	.word	0x200003dc

0800707c <_malloc_r>:
 800707c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007080:	1ccd      	adds	r5, r1, #3
 8007082:	f025 0503 	bic.w	r5, r5, #3
 8007086:	3508      	adds	r5, #8
 8007088:	2d0c      	cmp	r5, #12
 800708a:	bf38      	it	cc
 800708c:	250c      	movcc	r5, #12
 800708e:	2d00      	cmp	r5, #0
 8007090:	4607      	mov	r7, r0
 8007092:	db01      	blt.n	8007098 <_malloc_r+0x1c>
 8007094:	42a9      	cmp	r1, r5
 8007096:	d905      	bls.n	80070a4 <_malloc_r+0x28>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	2600      	movs	r6, #0
 800709e:	4630      	mov	r0, r6
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a4:	4e2e      	ldr	r6, [pc, #184]	; (8007160 <_malloc_r+0xe4>)
 80070a6:	f000 fa25 	bl	80074f4 <__malloc_lock>
 80070aa:	6833      	ldr	r3, [r6, #0]
 80070ac:	461c      	mov	r4, r3
 80070ae:	bb34      	cbnz	r4, 80070fe <_malloc_r+0x82>
 80070b0:	4629      	mov	r1, r5
 80070b2:	4638      	mov	r0, r7
 80070b4:	f7ff ffc2 	bl	800703c <sbrk_aligned>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	4604      	mov	r4, r0
 80070bc:	d14d      	bne.n	800715a <_malloc_r+0xde>
 80070be:	6834      	ldr	r4, [r6, #0]
 80070c0:	4626      	mov	r6, r4
 80070c2:	2e00      	cmp	r6, #0
 80070c4:	d140      	bne.n	8007148 <_malloc_r+0xcc>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	4631      	mov	r1, r6
 80070ca:	4638      	mov	r0, r7
 80070cc:	eb04 0803 	add.w	r8, r4, r3
 80070d0:	f000 f9a4 	bl	800741c <_sbrk_r>
 80070d4:	4580      	cmp	r8, r0
 80070d6:	d13a      	bne.n	800714e <_malloc_r+0xd2>
 80070d8:	6821      	ldr	r1, [r4, #0]
 80070da:	3503      	adds	r5, #3
 80070dc:	1a6d      	subs	r5, r5, r1
 80070de:	f025 0503 	bic.w	r5, r5, #3
 80070e2:	3508      	adds	r5, #8
 80070e4:	2d0c      	cmp	r5, #12
 80070e6:	bf38      	it	cc
 80070e8:	250c      	movcc	r5, #12
 80070ea:	4629      	mov	r1, r5
 80070ec:	4638      	mov	r0, r7
 80070ee:	f7ff ffa5 	bl	800703c <sbrk_aligned>
 80070f2:	3001      	adds	r0, #1
 80070f4:	d02b      	beq.n	800714e <_malloc_r+0xd2>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	442b      	add	r3, r5
 80070fa:	6023      	str	r3, [r4, #0]
 80070fc:	e00e      	b.n	800711c <_malloc_r+0xa0>
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	1b52      	subs	r2, r2, r5
 8007102:	d41e      	bmi.n	8007142 <_malloc_r+0xc6>
 8007104:	2a0b      	cmp	r2, #11
 8007106:	d916      	bls.n	8007136 <_malloc_r+0xba>
 8007108:	1961      	adds	r1, r4, r5
 800710a:	42a3      	cmp	r3, r4
 800710c:	6025      	str	r5, [r4, #0]
 800710e:	bf18      	it	ne
 8007110:	6059      	strne	r1, [r3, #4]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	bf08      	it	eq
 8007116:	6031      	streq	r1, [r6, #0]
 8007118:	5162      	str	r2, [r4, r5]
 800711a:	604b      	str	r3, [r1, #4]
 800711c:	4638      	mov	r0, r7
 800711e:	f104 060b 	add.w	r6, r4, #11
 8007122:	f000 f9ed 	bl	8007500 <__malloc_unlock>
 8007126:	f026 0607 	bic.w	r6, r6, #7
 800712a:	1d23      	adds	r3, r4, #4
 800712c:	1af2      	subs	r2, r6, r3
 800712e:	d0b6      	beq.n	800709e <_malloc_r+0x22>
 8007130:	1b9b      	subs	r3, r3, r6
 8007132:	50a3      	str	r3, [r4, r2]
 8007134:	e7b3      	b.n	800709e <_malloc_r+0x22>
 8007136:	6862      	ldr	r2, [r4, #4]
 8007138:	42a3      	cmp	r3, r4
 800713a:	bf0c      	ite	eq
 800713c:	6032      	streq	r2, [r6, #0]
 800713e:	605a      	strne	r2, [r3, #4]
 8007140:	e7ec      	b.n	800711c <_malloc_r+0xa0>
 8007142:	4623      	mov	r3, r4
 8007144:	6864      	ldr	r4, [r4, #4]
 8007146:	e7b2      	b.n	80070ae <_malloc_r+0x32>
 8007148:	4634      	mov	r4, r6
 800714a:	6876      	ldr	r6, [r6, #4]
 800714c:	e7b9      	b.n	80070c2 <_malloc_r+0x46>
 800714e:	230c      	movs	r3, #12
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4638      	mov	r0, r7
 8007154:	f000 f9d4 	bl	8007500 <__malloc_unlock>
 8007158:	e7a1      	b.n	800709e <_malloc_r+0x22>
 800715a:	6025      	str	r5, [r4, #0]
 800715c:	e7de      	b.n	800711c <_malloc_r+0xa0>
 800715e:	bf00      	nop
 8007160:	200003d8 	.word	0x200003d8

08007164 <__ssputs_r>:
 8007164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	688e      	ldr	r6, [r1, #8]
 800716a:	429e      	cmp	r6, r3
 800716c:	4682      	mov	sl, r0
 800716e:	460c      	mov	r4, r1
 8007170:	4690      	mov	r8, r2
 8007172:	461f      	mov	r7, r3
 8007174:	d838      	bhi.n	80071e8 <__ssputs_r+0x84>
 8007176:	898a      	ldrh	r2, [r1, #12]
 8007178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800717c:	d032      	beq.n	80071e4 <__ssputs_r+0x80>
 800717e:	6825      	ldr	r5, [r4, #0]
 8007180:	6909      	ldr	r1, [r1, #16]
 8007182:	eba5 0901 	sub.w	r9, r5, r1
 8007186:	6965      	ldr	r5, [r4, #20]
 8007188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800718c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007190:	3301      	adds	r3, #1
 8007192:	444b      	add	r3, r9
 8007194:	106d      	asrs	r5, r5, #1
 8007196:	429d      	cmp	r5, r3
 8007198:	bf38      	it	cc
 800719a:	461d      	movcc	r5, r3
 800719c:	0553      	lsls	r3, r2, #21
 800719e:	d531      	bpl.n	8007204 <__ssputs_r+0xa0>
 80071a0:	4629      	mov	r1, r5
 80071a2:	f7ff ff6b 	bl	800707c <_malloc_r>
 80071a6:	4606      	mov	r6, r0
 80071a8:	b950      	cbnz	r0, 80071c0 <__ssputs_r+0x5c>
 80071aa:	230c      	movs	r3, #12
 80071ac:	f8ca 3000 	str.w	r3, [sl]
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c0:	6921      	ldr	r1, [r4, #16]
 80071c2:	464a      	mov	r2, r9
 80071c4:	f7ff fb46 	bl	8006854 <memcpy>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	6126      	str	r6, [r4, #16]
 80071d6:	6165      	str	r5, [r4, #20]
 80071d8:	444e      	add	r6, r9
 80071da:	eba5 0509 	sub.w	r5, r5, r9
 80071de:	6026      	str	r6, [r4, #0]
 80071e0:	60a5      	str	r5, [r4, #8]
 80071e2:	463e      	mov	r6, r7
 80071e4:	42be      	cmp	r6, r7
 80071e6:	d900      	bls.n	80071ea <__ssputs_r+0x86>
 80071e8:	463e      	mov	r6, r7
 80071ea:	6820      	ldr	r0, [r4, #0]
 80071ec:	4632      	mov	r2, r6
 80071ee:	4641      	mov	r1, r8
 80071f0:	f000 f966 	bl	80074c0 <memmove>
 80071f4:	68a3      	ldr	r3, [r4, #8]
 80071f6:	1b9b      	subs	r3, r3, r6
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	4433      	add	r3, r6
 80071fe:	6023      	str	r3, [r4, #0]
 8007200:	2000      	movs	r0, #0
 8007202:	e7db      	b.n	80071bc <__ssputs_r+0x58>
 8007204:	462a      	mov	r2, r5
 8007206:	f000 f981 	bl	800750c <_realloc_r>
 800720a:	4606      	mov	r6, r0
 800720c:	2800      	cmp	r0, #0
 800720e:	d1e1      	bne.n	80071d4 <__ssputs_r+0x70>
 8007210:	6921      	ldr	r1, [r4, #16]
 8007212:	4650      	mov	r0, sl
 8007214:	f7ff fec6 	bl	8006fa4 <_free_r>
 8007218:	e7c7      	b.n	80071aa <__ssputs_r+0x46>
	...

0800721c <_svfiprintf_r>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	4698      	mov	r8, r3
 8007222:	898b      	ldrh	r3, [r1, #12]
 8007224:	061b      	lsls	r3, r3, #24
 8007226:	b09d      	sub	sp, #116	; 0x74
 8007228:	4607      	mov	r7, r0
 800722a:	460d      	mov	r5, r1
 800722c:	4614      	mov	r4, r2
 800722e:	d50e      	bpl.n	800724e <_svfiprintf_r+0x32>
 8007230:	690b      	ldr	r3, [r1, #16]
 8007232:	b963      	cbnz	r3, 800724e <_svfiprintf_r+0x32>
 8007234:	2140      	movs	r1, #64	; 0x40
 8007236:	f7ff ff21 	bl	800707c <_malloc_r>
 800723a:	6028      	str	r0, [r5, #0]
 800723c:	6128      	str	r0, [r5, #16]
 800723e:	b920      	cbnz	r0, 800724a <_svfiprintf_r+0x2e>
 8007240:	230c      	movs	r3, #12
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	e0d1      	b.n	80073ee <_svfiprintf_r+0x1d2>
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	616b      	str	r3, [r5, #20]
 800724e:	2300      	movs	r3, #0
 8007250:	9309      	str	r3, [sp, #36]	; 0x24
 8007252:	2320      	movs	r3, #32
 8007254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007258:	f8cd 800c 	str.w	r8, [sp, #12]
 800725c:	2330      	movs	r3, #48	; 0x30
 800725e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007408 <_svfiprintf_r+0x1ec>
 8007262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007266:	f04f 0901 	mov.w	r9, #1
 800726a:	4623      	mov	r3, r4
 800726c:	469a      	mov	sl, r3
 800726e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007272:	b10a      	cbz	r2, 8007278 <_svfiprintf_r+0x5c>
 8007274:	2a25      	cmp	r2, #37	; 0x25
 8007276:	d1f9      	bne.n	800726c <_svfiprintf_r+0x50>
 8007278:	ebba 0b04 	subs.w	fp, sl, r4
 800727c:	d00b      	beq.n	8007296 <_svfiprintf_r+0x7a>
 800727e:	465b      	mov	r3, fp
 8007280:	4622      	mov	r2, r4
 8007282:	4629      	mov	r1, r5
 8007284:	4638      	mov	r0, r7
 8007286:	f7ff ff6d 	bl	8007164 <__ssputs_r>
 800728a:	3001      	adds	r0, #1
 800728c:	f000 80aa 	beq.w	80073e4 <_svfiprintf_r+0x1c8>
 8007290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007292:	445a      	add	r2, fp
 8007294:	9209      	str	r2, [sp, #36]	; 0x24
 8007296:	f89a 3000 	ldrb.w	r3, [sl]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80a2 	beq.w	80073e4 <_svfiprintf_r+0x1c8>
 80072a0:	2300      	movs	r3, #0
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295
 80072a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072aa:	f10a 0a01 	add.w	sl, sl, #1
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072b6:	931a      	str	r3, [sp, #104]	; 0x68
 80072b8:	4654      	mov	r4, sl
 80072ba:	2205      	movs	r2, #5
 80072bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c0:	4851      	ldr	r0, [pc, #324]	; (8007408 <_svfiprintf_r+0x1ec>)
 80072c2:	f7f8 ff95 	bl	80001f0 <memchr>
 80072c6:	9a04      	ldr	r2, [sp, #16]
 80072c8:	b9d8      	cbnz	r0, 8007302 <_svfiprintf_r+0xe6>
 80072ca:	06d0      	lsls	r0, r2, #27
 80072cc:	bf44      	itt	mi
 80072ce:	2320      	movmi	r3, #32
 80072d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d4:	0711      	lsls	r1, r2, #28
 80072d6:	bf44      	itt	mi
 80072d8:	232b      	movmi	r3, #43	; 0x2b
 80072da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072de:	f89a 3000 	ldrb.w	r3, [sl]
 80072e2:	2b2a      	cmp	r3, #42	; 0x2a
 80072e4:	d015      	beq.n	8007312 <_svfiprintf_r+0xf6>
 80072e6:	9a07      	ldr	r2, [sp, #28]
 80072e8:	4654      	mov	r4, sl
 80072ea:	2000      	movs	r0, #0
 80072ec:	f04f 0c0a 	mov.w	ip, #10
 80072f0:	4621      	mov	r1, r4
 80072f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072f6:	3b30      	subs	r3, #48	; 0x30
 80072f8:	2b09      	cmp	r3, #9
 80072fa:	d94e      	bls.n	800739a <_svfiprintf_r+0x17e>
 80072fc:	b1b0      	cbz	r0, 800732c <_svfiprintf_r+0x110>
 80072fe:	9207      	str	r2, [sp, #28]
 8007300:	e014      	b.n	800732c <_svfiprintf_r+0x110>
 8007302:	eba0 0308 	sub.w	r3, r0, r8
 8007306:	fa09 f303 	lsl.w	r3, r9, r3
 800730a:	4313      	orrs	r3, r2
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	46a2      	mov	sl, r4
 8007310:	e7d2      	b.n	80072b8 <_svfiprintf_r+0x9c>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	1d19      	adds	r1, r3, #4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	9103      	str	r1, [sp, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	bfbb      	ittet	lt
 800731e:	425b      	neglt	r3, r3
 8007320:	f042 0202 	orrlt.w	r2, r2, #2
 8007324:	9307      	strge	r3, [sp, #28]
 8007326:	9307      	strlt	r3, [sp, #28]
 8007328:	bfb8      	it	lt
 800732a:	9204      	strlt	r2, [sp, #16]
 800732c:	7823      	ldrb	r3, [r4, #0]
 800732e:	2b2e      	cmp	r3, #46	; 0x2e
 8007330:	d10c      	bne.n	800734c <_svfiprintf_r+0x130>
 8007332:	7863      	ldrb	r3, [r4, #1]
 8007334:	2b2a      	cmp	r3, #42	; 0x2a
 8007336:	d135      	bne.n	80073a4 <_svfiprintf_r+0x188>
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	9203      	str	r2, [sp, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	bfb8      	it	lt
 8007344:	f04f 33ff 	movlt.w	r3, #4294967295
 8007348:	3402      	adds	r4, #2
 800734a:	9305      	str	r3, [sp, #20]
 800734c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007418 <_svfiprintf_r+0x1fc>
 8007350:	7821      	ldrb	r1, [r4, #0]
 8007352:	2203      	movs	r2, #3
 8007354:	4650      	mov	r0, sl
 8007356:	f7f8 ff4b 	bl	80001f0 <memchr>
 800735a:	b140      	cbz	r0, 800736e <_svfiprintf_r+0x152>
 800735c:	2340      	movs	r3, #64	; 0x40
 800735e:	eba0 000a 	sub.w	r0, r0, sl
 8007362:	fa03 f000 	lsl.w	r0, r3, r0
 8007366:	9b04      	ldr	r3, [sp, #16]
 8007368:	4303      	orrs	r3, r0
 800736a:	3401      	adds	r4, #1
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007372:	4826      	ldr	r0, [pc, #152]	; (800740c <_svfiprintf_r+0x1f0>)
 8007374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007378:	2206      	movs	r2, #6
 800737a:	f7f8 ff39 	bl	80001f0 <memchr>
 800737e:	2800      	cmp	r0, #0
 8007380:	d038      	beq.n	80073f4 <_svfiprintf_r+0x1d8>
 8007382:	4b23      	ldr	r3, [pc, #140]	; (8007410 <_svfiprintf_r+0x1f4>)
 8007384:	bb1b      	cbnz	r3, 80073ce <_svfiprintf_r+0x1b2>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	3307      	adds	r3, #7
 800738a:	f023 0307 	bic.w	r3, r3, #7
 800738e:	3308      	adds	r3, #8
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007394:	4433      	add	r3, r6
 8007396:	9309      	str	r3, [sp, #36]	; 0x24
 8007398:	e767      	b.n	800726a <_svfiprintf_r+0x4e>
 800739a:	fb0c 3202 	mla	r2, ip, r2, r3
 800739e:	460c      	mov	r4, r1
 80073a0:	2001      	movs	r0, #1
 80073a2:	e7a5      	b.n	80072f0 <_svfiprintf_r+0xd4>
 80073a4:	2300      	movs	r3, #0
 80073a6:	3401      	adds	r4, #1
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	4619      	mov	r1, r3
 80073ac:	f04f 0c0a 	mov.w	ip, #10
 80073b0:	4620      	mov	r0, r4
 80073b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073b6:	3a30      	subs	r2, #48	; 0x30
 80073b8:	2a09      	cmp	r2, #9
 80073ba:	d903      	bls.n	80073c4 <_svfiprintf_r+0x1a8>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0c5      	beq.n	800734c <_svfiprintf_r+0x130>
 80073c0:	9105      	str	r1, [sp, #20]
 80073c2:	e7c3      	b.n	800734c <_svfiprintf_r+0x130>
 80073c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c8:	4604      	mov	r4, r0
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7f0      	b.n	80073b0 <_svfiprintf_r+0x194>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <_svfiprintf_r+0x1f8>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4638      	mov	r0, r7
 80073da:	f7fd ffcb 	bl	8005374 <_printf_float>
 80073de:	1c42      	adds	r2, r0, #1
 80073e0:	4606      	mov	r6, r0
 80073e2:	d1d6      	bne.n	8007392 <_svfiprintf_r+0x176>
 80073e4:	89ab      	ldrh	r3, [r5, #12]
 80073e6:	065b      	lsls	r3, r3, #25
 80073e8:	f53f af2c 	bmi.w	8007244 <_svfiprintf_r+0x28>
 80073ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073ee:	b01d      	add	sp, #116	; 0x74
 80073f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f4:	ab03      	add	r3, sp, #12
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	462a      	mov	r2, r5
 80073fa:	4b06      	ldr	r3, [pc, #24]	; (8007414 <_svfiprintf_r+0x1f8>)
 80073fc:	a904      	add	r1, sp, #16
 80073fe:	4638      	mov	r0, r7
 8007400:	f7fe fa5c 	bl	80058bc <_printf_i>
 8007404:	e7eb      	b.n	80073de <_svfiprintf_r+0x1c2>
 8007406:	bf00      	nop
 8007408:	0800827c 	.word	0x0800827c
 800740c:	08008286 	.word	0x08008286
 8007410:	08005375 	.word	0x08005375
 8007414:	08007165 	.word	0x08007165
 8007418:	08008282 	.word	0x08008282

0800741c <_sbrk_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_sbrk_r+0x1c>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7fa fef0 	bl	800220c <_sbrk>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_sbrk_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_sbrk_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	200003e0 	.word	0x200003e0

0800743c <__assert_func>:
 800743c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800743e:	4614      	mov	r4, r2
 8007440:	461a      	mov	r2, r3
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <__assert_func+0x2c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4605      	mov	r5, r0
 8007448:	68d8      	ldr	r0, [r3, #12]
 800744a:	b14c      	cbz	r4, 8007460 <__assert_func+0x24>
 800744c:	4b07      	ldr	r3, [pc, #28]	; (800746c <__assert_func+0x30>)
 800744e:	9100      	str	r1, [sp, #0]
 8007450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007454:	4906      	ldr	r1, [pc, #24]	; (8007470 <__assert_func+0x34>)
 8007456:	462b      	mov	r3, r5
 8007458:	f000 f80e 	bl	8007478 <fiprintf>
 800745c:	f000 faac 	bl	80079b8 <abort>
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <__assert_func+0x38>)
 8007462:	461c      	mov	r4, r3
 8007464:	e7f3      	b.n	800744e <__assert_func+0x12>
 8007466:	bf00      	nop
 8007468:	2000000c 	.word	0x2000000c
 800746c:	0800828d 	.word	0x0800828d
 8007470:	0800829a 	.word	0x0800829a
 8007474:	080082c8 	.word	0x080082c8

08007478 <fiprintf>:
 8007478:	b40e      	push	{r1, r2, r3}
 800747a:	b503      	push	{r0, r1, lr}
 800747c:	4601      	mov	r1, r0
 800747e:	ab03      	add	r3, sp, #12
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <fiprintf+0x20>)
 8007482:	f853 2b04 	ldr.w	r2, [r3], #4
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f000 f897 	bl	80075bc <_vfiprintf_r>
 800748e:	b002      	add	sp, #8
 8007490:	f85d eb04 	ldr.w	lr, [sp], #4
 8007494:	b003      	add	sp, #12
 8007496:	4770      	bx	lr
 8007498:	2000000c 	.word	0x2000000c

0800749c <__ascii_mbtowc>:
 800749c:	b082      	sub	sp, #8
 800749e:	b901      	cbnz	r1, 80074a2 <__ascii_mbtowc+0x6>
 80074a0:	a901      	add	r1, sp, #4
 80074a2:	b142      	cbz	r2, 80074b6 <__ascii_mbtowc+0x1a>
 80074a4:	b14b      	cbz	r3, 80074ba <__ascii_mbtowc+0x1e>
 80074a6:	7813      	ldrb	r3, [r2, #0]
 80074a8:	600b      	str	r3, [r1, #0]
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	1e10      	subs	r0, r2, #0
 80074ae:	bf18      	it	ne
 80074b0:	2001      	movne	r0, #1
 80074b2:	b002      	add	sp, #8
 80074b4:	4770      	bx	lr
 80074b6:	4610      	mov	r0, r2
 80074b8:	e7fb      	b.n	80074b2 <__ascii_mbtowc+0x16>
 80074ba:	f06f 0001 	mvn.w	r0, #1
 80074be:	e7f8      	b.n	80074b2 <__ascii_mbtowc+0x16>

080074c0 <memmove>:
 80074c0:	4288      	cmp	r0, r1
 80074c2:	b510      	push	{r4, lr}
 80074c4:	eb01 0402 	add.w	r4, r1, r2
 80074c8:	d902      	bls.n	80074d0 <memmove+0x10>
 80074ca:	4284      	cmp	r4, r0
 80074cc:	4623      	mov	r3, r4
 80074ce:	d807      	bhi.n	80074e0 <memmove+0x20>
 80074d0:	1e43      	subs	r3, r0, #1
 80074d2:	42a1      	cmp	r1, r4
 80074d4:	d008      	beq.n	80074e8 <memmove+0x28>
 80074d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074de:	e7f8      	b.n	80074d2 <memmove+0x12>
 80074e0:	4402      	add	r2, r0
 80074e2:	4601      	mov	r1, r0
 80074e4:	428a      	cmp	r2, r1
 80074e6:	d100      	bne.n	80074ea <memmove+0x2a>
 80074e8:	bd10      	pop	{r4, pc}
 80074ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074f2:	e7f7      	b.n	80074e4 <memmove+0x24>

080074f4 <__malloc_lock>:
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <__malloc_lock+0x8>)
 80074f6:	f000 bc1f 	b.w	8007d38 <__retarget_lock_acquire_recursive>
 80074fa:	bf00      	nop
 80074fc:	200003e4 	.word	0x200003e4

08007500 <__malloc_unlock>:
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <__malloc_unlock+0x8>)
 8007502:	f000 bc1a 	b.w	8007d3a <__retarget_lock_release_recursive>
 8007506:	bf00      	nop
 8007508:	200003e4 	.word	0x200003e4

0800750c <_realloc_r>:
 800750c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007510:	4680      	mov	r8, r0
 8007512:	4614      	mov	r4, r2
 8007514:	460e      	mov	r6, r1
 8007516:	b921      	cbnz	r1, 8007522 <_realloc_r+0x16>
 8007518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751c:	4611      	mov	r1, r2
 800751e:	f7ff bdad 	b.w	800707c <_malloc_r>
 8007522:	b92a      	cbnz	r2, 8007530 <_realloc_r+0x24>
 8007524:	f7ff fd3e 	bl	8006fa4 <_free_r>
 8007528:	4625      	mov	r5, r4
 800752a:	4628      	mov	r0, r5
 800752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007530:	f000 fc6a 	bl	8007e08 <_malloc_usable_size_r>
 8007534:	4284      	cmp	r4, r0
 8007536:	4607      	mov	r7, r0
 8007538:	d802      	bhi.n	8007540 <_realloc_r+0x34>
 800753a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800753e:	d812      	bhi.n	8007566 <_realloc_r+0x5a>
 8007540:	4621      	mov	r1, r4
 8007542:	4640      	mov	r0, r8
 8007544:	f7ff fd9a 	bl	800707c <_malloc_r>
 8007548:	4605      	mov	r5, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d0ed      	beq.n	800752a <_realloc_r+0x1e>
 800754e:	42bc      	cmp	r4, r7
 8007550:	4622      	mov	r2, r4
 8007552:	4631      	mov	r1, r6
 8007554:	bf28      	it	cs
 8007556:	463a      	movcs	r2, r7
 8007558:	f7ff f97c 	bl	8006854 <memcpy>
 800755c:	4631      	mov	r1, r6
 800755e:	4640      	mov	r0, r8
 8007560:	f7ff fd20 	bl	8006fa4 <_free_r>
 8007564:	e7e1      	b.n	800752a <_realloc_r+0x1e>
 8007566:	4635      	mov	r5, r6
 8007568:	e7df      	b.n	800752a <_realloc_r+0x1e>

0800756a <__sfputc_r>:
 800756a:	6893      	ldr	r3, [r2, #8]
 800756c:	3b01      	subs	r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	b410      	push	{r4}
 8007572:	6093      	str	r3, [r2, #8]
 8007574:	da08      	bge.n	8007588 <__sfputc_r+0x1e>
 8007576:	6994      	ldr	r4, [r2, #24]
 8007578:	42a3      	cmp	r3, r4
 800757a:	db01      	blt.n	8007580 <__sfputc_r+0x16>
 800757c:	290a      	cmp	r1, #10
 800757e:	d103      	bne.n	8007588 <__sfputc_r+0x1e>
 8007580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007584:	f000 b94a 	b.w	800781c <__swbuf_r>
 8007588:	6813      	ldr	r3, [r2, #0]
 800758a:	1c58      	adds	r0, r3, #1
 800758c:	6010      	str	r0, [r2, #0]
 800758e:	7019      	strb	r1, [r3, #0]
 8007590:	4608      	mov	r0, r1
 8007592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007596:	4770      	bx	lr

08007598 <__sfputs_r>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	4614      	mov	r4, r2
 80075a0:	18d5      	adds	r5, r2, r3
 80075a2:	42ac      	cmp	r4, r5
 80075a4:	d101      	bne.n	80075aa <__sfputs_r+0x12>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e007      	b.n	80075ba <__sfputs_r+0x22>
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	463a      	mov	r2, r7
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7ff ffda 	bl	800756a <__sfputc_r>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d1f3      	bne.n	80075a2 <__sfputs_r+0xa>
 80075ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075bc <_vfiprintf_r>:
 80075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c0:	460d      	mov	r5, r1
 80075c2:	b09d      	sub	sp, #116	; 0x74
 80075c4:	4614      	mov	r4, r2
 80075c6:	4698      	mov	r8, r3
 80075c8:	4606      	mov	r6, r0
 80075ca:	b118      	cbz	r0, 80075d4 <_vfiprintf_r+0x18>
 80075cc:	6983      	ldr	r3, [r0, #24]
 80075ce:	b90b      	cbnz	r3, 80075d4 <_vfiprintf_r+0x18>
 80075d0:	f000 fb14 	bl	8007bfc <__sinit>
 80075d4:	4b89      	ldr	r3, [pc, #548]	; (80077fc <_vfiprintf_r+0x240>)
 80075d6:	429d      	cmp	r5, r3
 80075d8:	d11b      	bne.n	8007612 <_vfiprintf_r+0x56>
 80075da:	6875      	ldr	r5, [r6, #4]
 80075dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075de:	07d9      	lsls	r1, r3, #31
 80075e0:	d405      	bmi.n	80075ee <_vfiprintf_r+0x32>
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	059a      	lsls	r2, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_vfiprintf_r+0x32>
 80075e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ea:	f000 fba5 	bl	8007d38 <__retarget_lock_acquire_recursive>
 80075ee:	89ab      	ldrh	r3, [r5, #12]
 80075f0:	071b      	lsls	r3, r3, #28
 80075f2:	d501      	bpl.n	80075f8 <_vfiprintf_r+0x3c>
 80075f4:	692b      	ldr	r3, [r5, #16]
 80075f6:	b9eb      	cbnz	r3, 8007634 <_vfiprintf_r+0x78>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4630      	mov	r0, r6
 80075fc:	f000 f96e 	bl	80078dc <__swsetup_r>
 8007600:	b1c0      	cbz	r0, 8007634 <_vfiprintf_r+0x78>
 8007602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007604:	07dc      	lsls	r4, r3, #31
 8007606:	d50e      	bpl.n	8007626 <_vfiprintf_r+0x6a>
 8007608:	f04f 30ff 	mov.w	r0, #4294967295
 800760c:	b01d      	add	sp, #116	; 0x74
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007612:	4b7b      	ldr	r3, [pc, #492]	; (8007800 <_vfiprintf_r+0x244>)
 8007614:	429d      	cmp	r5, r3
 8007616:	d101      	bne.n	800761c <_vfiprintf_r+0x60>
 8007618:	68b5      	ldr	r5, [r6, #8]
 800761a:	e7df      	b.n	80075dc <_vfiprintf_r+0x20>
 800761c:	4b79      	ldr	r3, [pc, #484]	; (8007804 <_vfiprintf_r+0x248>)
 800761e:	429d      	cmp	r5, r3
 8007620:	bf08      	it	eq
 8007622:	68f5      	ldreq	r5, [r6, #12]
 8007624:	e7da      	b.n	80075dc <_vfiprintf_r+0x20>
 8007626:	89ab      	ldrh	r3, [r5, #12]
 8007628:	0598      	lsls	r0, r3, #22
 800762a:	d4ed      	bmi.n	8007608 <_vfiprintf_r+0x4c>
 800762c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800762e:	f000 fb84 	bl	8007d3a <__retarget_lock_release_recursive>
 8007632:	e7e9      	b.n	8007608 <_vfiprintf_r+0x4c>
 8007634:	2300      	movs	r3, #0
 8007636:	9309      	str	r3, [sp, #36]	; 0x24
 8007638:	2320      	movs	r3, #32
 800763a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800763e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007642:	2330      	movs	r3, #48	; 0x30
 8007644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007808 <_vfiprintf_r+0x24c>
 8007648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800764c:	f04f 0901 	mov.w	r9, #1
 8007650:	4623      	mov	r3, r4
 8007652:	469a      	mov	sl, r3
 8007654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007658:	b10a      	cbz	r2, 800765e <_vfiprintf_r+0xa2>
 800765a:	2a25      	cmp	r2, #37	; 0x25
 800765c:	d1f9      	bne.n	8007652 <_vfiprintf_r+0x96>
 800765e:	ebba 0b04 	subs.w	fp, sl, r4
 8007662:	d00b      	beq.n	800767c <_vfiprintf_r+0xc0>
 8007664:	465b      	mov	r3, fp
 8007666:	4622      	mov	r2, r4
 8007668:	4629      	mov	r1, r5
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff ff94 	bl	8007598 <__sfputs_r>
 8007670:	3001      	adds	r0, #1
 8007672:	f000 80aa 	beq.w	80077ca <_vfiprintf_r+0x20e>
 8007676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007678:	445a      	add	r2, fp
 800767a:	9209      	str	r2, [sp, #36]	; 0x24
 800767c:	f89a 3000 	ldrb.w	r3, [sl]
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80a2 	beq.w	80077ca <_vfiprintf_r+0x20e>
 8007686:	2300      	movs	r3, #0
 8007688:	f04f 32ff 	mov.w	r2, #4294967295
 800768c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007690:	f10a 0a01 	add.w	sl, sl, #1
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769c:	931a      	str	r3, [sp, #104]	; 0x68
 800769e:	4654      	mov	r4, sl
 80076a0:	2205      	movs	r2, #5
 80076a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a6:	4858      	ldr	r0, [pc, #352]	; (8007808 <_vfiprintf_r+0x24c>)
 80076a8:	f7f8 fda2 	bl	80001f0 <memchr>
 80076ac:	9a04      	ldr	r2, [sp, #16]
 80076ae:	b9d8      	cbnz	r0, 80076e8 <_vfiprintf_r+0x12c>
 80076b0:	06d1      	lsls	r1, r2, #27
 80076b2:	bf44      	itt	mi
 80076b4:	2320      	movmi	r3, #32
 80076b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076ba:	0713      	lsls	r3, r2, #28
 80076bc:	bf44      	itt	mi
 80076be:	232b      	movmi	r3, #43	; 0x2b
 80076c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ca:	d015      	beq.n	80076f8 <_vfiprintf_r+0x13c>
 80076cc:	9a07      	ldr	r2, [sp, #28]
 80076ce:	4654      	mov	r4, sl
 80076d0:	2000      	movs	r0, #0
 80076d2:	f04f 0c0a 	mov.w	ip, #10
 80076d6:	4621      	mov	r1, r4
 80076d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076dc:	3b30      	subs	r3, #48	; 0x30
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d94e      	bls.n	8007780 <_vfiprintf_r+0x1c4>
 80076e2:	b1b0      	cbz	r0, 8007712 <_vfiprintf_r+0x156>
 80076e4:	9207      	str	r2, [sp, #28]
 80076e6:	e014      	b.n	8007712 <_vfiprintf_r+0x156>
 80076e8:	eba0 0308 	sub.w	r3, r0, r8
 80076ec:	fa09 f303 	lsl.w	r3, r9, r3
 80076f0:	4313      	orrs	r3, r2
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	46a2      	mov	sl, r4
 80076f6:	e7d2      	b.n	800769e <_vfiprintf_r+0xe2>
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	1d19      	adds	r1, r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	9103      	str	r1, [sp, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	bfbb      	ittet	lt
 8007704:	425b      	neglt	r3, r3
 8007706:	f042 0202 	orrlt.w	r2, r2, #2
 800770a:	9307      	strge	r3, [sp, #28]
 800770c:	9307      	strlt	r3, [sp, #28]
 800770e:	bfb8      	it	lt
 8007710:	9204      	strlt	r2, [sp, #16]
 8007712:	7823      	ldrb	r3, [r4, #0]
 8007714:	2b2e      	cmp	r3, #46	; 0x2e
 8007716:	d10c      	bne.n	8007732 <_vfiprintf_r+0x176>
 8007718:	7863      	ldrb	r3, [r4, #1]
 800771a:	2b2a      	cmp	r3, #42	; 0x2a
 800771c:	d135      	bne.n	800778a <_vfiprintf_r+0x1ce>
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	9203      	str	r2, [sp, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfb8      	it	lt
 800772a:	f04f 33ff 	movlt.w	r3, #4294967295
 800772e:	3402      	adds	r4, #2
 8007730:	9305      	str	r3, [sp, #20]
 8007732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007818 <_vfiprintf_r+0x25c>
 8007736:	7821      	ldrb	r1, [r4, #0]
 8007738:	2203      	movs	r2, #3
 800773a:	4650      	mov	r0, sl
 800773c:	f7f8 fd58 	bl	80001f0 <memchr>
 8007740:	b140      	cbz	r0, 8007754 <_vfiprintf_r+0x198>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	eba0 000a 	sub.w	r0, r0, sl
 8007748:	fa03 f000 	lsl.w	r0, r3, r0
 800774c:	9b04      	ldr	r3, [sp, #16]
 800774e:	4303      	orrs	r3, r0
 8007750:	3401      	adds	r4, #1
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007758:	482c      	ldr	r0, [pc, #176]	; (800780c <_vfiprintf_r+0x250>)
 800775a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800775e:	2206      	movs	r2, #6
 8007760:	f7f8 fd46 	bl	80001f0 <memchr>
 8007764:	2800      	cmp	r0, #0
 8007766:	d03f      	beq.n	80077e8 <_vfiprintf_r+0x22c>
 8007768:	4b29      	ldr	r3, [pc, #164]	; (8007810 <_vfiprintf_r+0x254>)
 800776a:	bb1b      	cbnz	r3, 80077b4 <_vfiprintf_r+0x1f8>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	3308      	adds	r3, #8
 8007776:	9303      	str	r3, [sp, #12]
 8007778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777a:	443b      	add	r3, r7
 800777c:	9309      	str	r3, [sp, #36]	; 0x24
 800777e:	e767      	b.n	8007650 <_vfiprintf_r+0x94>
 8007780:	fb0c 3202 	mla	r2, ip, r2, r3
 8007784:	460c      	mov	r4, r1
 8007786:	2001      	movs	r0, #1
 8007788:	e7a5      	b.n	80076d6 <_vfiprintf_r+0x11a>
 800778a:	2300      	movs	r3, #0
 800778c:	3401      	adds	r4, #1
 800778e:	9305      	str	r3, [sp, #20]
 8007790:	4619      	mov	r1, r3
 8007792:	f04f 0c0a 	mov.w	ip, #10
 8007796:	4620      	mov	r0, r4
 8007798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800779c:	3a30      	subs	r2, #48	; 0x30
 800779e:	2a09      	cmp	r2, #9
 80077a0:	d903      	bls.n	80077aa <_vfiprintf_r+0x1ee>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c5      	beq.n	8007732 <_vfiprintf_r+0x176>
 80077a6:	9105      	str	r1, [sp, #20]
 80077a8:	e7c3      	b.n	8007732 <_vfiprintf_r+0x176>
 80077aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80077ae:	4604      	mov	r4, r0
 80077b0:	2301      	movs	r3, #1
 80077b2:	e7f0      	b.n	8007796 <_vfiprintf_r+0x1da>
 80077b4:	ab03      	add	r3, sp, #12
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	462a      	mov	r2, r5
 80077ba:	4b16      	ldr	r3, [pc, #88]	; (8007814 <_vfiprintf_r+0x258>)
 80077bc:	a904      	add	r1, sp, #16
 80077be:	4630      	mov	r0, r6
 80077c0:	f7fd fdd8 	bl	8005374 <_printf_float>
 80077c4:	4607      	mov	r7, r0
 80077c6:	1c78      	adds	r0, r7, #1
 80077c8:	d1d6      	bne.n	8007778 <_vfiprintf_r+0x1bc>
 80077ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077cc:	07d9      	lsls	r1, r3, #31
 80077ce:	d405      	bmi.n	80077dc <_vfiprintf_r+0x220>
 80077d0:	89ab      	ldrh	r3, [r5, #12]
 80077d2:	059a      	lsls	r2, r3, #22
 80077d4:	d402      	bmi.n	80077dc <_vfiprintf_r+0x220>
 80077d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d8:	f000 faaf 	bl	8007d3a <__retarget_lock_release_recursive>
 80077dc:	89ab      	ldrh	r3, [r5, #12]
 80077de:	065b      	lsls	r3, r3, #25
 80077e0:	f53f af12 	bmi.w	8007608 <_vfiprintf_r+0x4c>
 80077e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077e6:	e711      	b.n	800760c <_vfiprintf_r+0x50>
 80077e8:	ab03      	add	r3, sp, #12
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	462a      	mov	r2, r5
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <_vfiprintf_r+0x258>)
 80077f0:	a904      	add	r1, sp, #16
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7fe f862 	bl	80058bc <_printf_i>
 80077f8:	e7e4      	b.n	80077c4 <_vfiprintf_r+0x208>
 80077fa:	bf00      	nop
 80077fc:	080083f4 	.word	0x080083f4
 8007800:	08008414 	.word	0x08008414
 8007804:	080083d4 	.word	0x080083d4
 8007808:	0800827c 	.word	0x0800827c
 800780c:	08008286 	.word	0x08008286
 8007810:	08005375 	.word	0x08005375
 8007814:	08007599 	.word	0x08007599
 8007818:	08008282 	.word	0x08008282

0800781c <__swbuf_r>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	460e      	mov	r6, r1
 8007820:	4614      	mov	r4, r2
 8007822:	4605      	mov	r5, r0
 8007824:	b118      	cbz	r0, 800782e <__swbuf_r+0x12>
 8007826:	6983      	ldr	r3, [r0, #24]
 8007828:	b90b      	cbnz	r3, 800782e <__swbuf_r+0x12>
 800782a:	f000 f9e7 	bl	8007bfc <__sinit>
 800782e:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <__swbuf_r+0x98>)
 8007830:	429c      	cmp	r4, r3
 8007832:	d12b      	bne.n	800788c <__swbuf_r+0x70>
 8007834:	686c      	ldr	r4, [r5, #4]
 8007836:	69a3      	ldr	r3, [r4, #24]
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	89a3      	ldrh	r3, [r4, #12]
 800783c:	071a      	lsls	r2, r3, #28
 800783e:	d52f      	bpl.n	80078a0 <__swbuf_r+0x84>
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	b36b      	cbz	r3, 80078a0 <__swbuf_r+0x84>
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	1ac0      	subs	r0, r0, r3
 800784a:	6963      	ldr	r3, [r4, #20]
 800784c:	b2f6      	uxtb	r6, r6
 800784e:	4283      	cmp	r3, r0
 8007850:	4637      	mov	r7, r6
 8007852:	dc04      	bgt.n	800785e <__swbuf_r+0x42>
 8007854:	4621      	mov	r1, r4
 8007856:	4628      	mov	r0, r5
 8007858:	f000 f93c 	bl	8007ad4 <_fflush_r>
 800785c:	bb30      	cbnz	r0, 80078ac <__swbuf_r+0x90>
 800785e:	68a3      	ldr	r3, [r4, #8]
 8007860:	3b01      	subs	r3, #1
 8007862:	60a3      	str	r3, [r4, #8]
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	701e      	strb	r6, [r3, #0]
 800786c:	6963      	ldr	r3, [r4, #20]
 800786e:	3001      	adds	r0, #1
 8007870:	4283      	cmp	r3, r0
 8007872:	d004      	beq.n	800787e <__swbuf_r+0x62>
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	07db      	lsls	r3, r3, #31
 8007878:	d506      	bpl.n	8007888 <__swbuf_r+0x6c>
 800787a:	2e0a      	cmp	r6, #10
 800787c:	d104      	bne.n	8007888 <__swbuf_r+0x6c>
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 f927 	bl	8007ad4 <_fflush_r>
 8007886:	b988      	cbnz	r0, 80078ac <__swbuf_r+0x90>
 8007888:	4638      	mov	r0, r7
 800788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <__swbuf_r+0x9c>)
 800788e:	429c      	cmp	r4, r3
 8007890:	d101      	bne.n	8007896 <__swbuf_r+0x7a>
 8007892:	68ac      	ldr	r4, [r5, #8]
 8007894:	e7cf      	b.n	8007836 <__swbuf_r+0x1a>
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <__swbuf_r+0xa0>)
 8007898:	429c      	cmp	r4, r3
 800789a:	bf08      	it	eq
 800789c:	68ec      	ldreq	r4, [r5, #12]
 800789e:	e7ca      	b.n	8007836 <__swbuf_r+0x1a>
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f81a 	bl	80078dc <__swsetup_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d0cb      	beq.n	8007844 <__swbuf_r+0x28>
 80078ac:	f04f 37ff 	mov.w	r7, #4294967295
 80078b0:	e7ea      	b.n	8007888 <__swbuf_r+0x6c>
 80078b2:	bf00      	nop
 80078b4:	080083f4 	.word	0x080083f4
 80078b8:	08008414 	.word	0x08008414
 80078bc:	080083d4 	.word	0x080083d4

080078c0 <__ascii_wctomb>:
 80078c0:	b149      	cbz	r1, 80078d6 <__ascii_wctomb+0x16>
 80078c2:	2aff      	cmp	r2, #255	; 0xff
 80078c4:	bf85      	ittet	hi
 80078c6:	238a      	movhi	r3, #138	; 0x8a
 80078c8:	6003      	strhi	r3, [r0, #0]
 80078ca:	700a      	strbls	r2, [r1, #0]
 80078cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80078d0:	bf98      	it	ls
 80078d2:	2001      	movls	r0, #1
 80078d4:	4770      	bx	lr
 80078d6:	4608      	mov	r0, r1
 80078d8:	4770      	bx	lr
	...

080078dc <__swsetup_r>:
 80078dc:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <__swsetup_r+0xcc>)
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	681d      	ldr	r5, [r3, #0]
 80078e2:	4606      	mov	r6, r0
 80078e4:	460c      	mov	r4, r1
 80078e6:	b125      	cbz	r5, 80078f2 <__swsetup_r+0x16>
 80078e8:	69ab      	ldr	r3, [r5, #24]
 80078ea:	b913      	cbnz	r3, 80078f2 <__swsetup_r+0x16>
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f985 	bl	8007bfc <__sinit>
 80078f2:	4b2e      	ldr	r3, [pc, #184]	; (80079ac <__swsetup_r+0xd0>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	d10f      	bne.n	8007918 <__swsetup_r+0x3c>
 80078f8:	686c      	ldr	r4, [r5, #4]
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007900:	0719      	lsls	r1, r3, #28
 8007902:	d42c      	bmi.n	800795e <__swsetup_r+0x82>
 8007904:	06dd      	lsls	r5, r3, #27
 8007906:	d411      	bmi.n	800792c <__swsetup_r+0x50>
 8007908:	2309      	movs	r3, #9
 800790a:	6033      	str	r3, [r6, #0]
 800790c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007910:	81a3      	strh	r3, [r4, #12]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	e03e      	b.n	8007996 <__swsetup_r+0xba>
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <__swsetup_r+0xd4>)
 800791a:	429c      	cmp	r4, r3
 800791c:	d101      	bne.n	8007922 <__swsetup_r+0x46>
 800791e:	68ac      	ldr	r4, [r5, #8]
 8007920:	e7eb      	b.n	80078fa <__swsetup_r+0x1e>
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <__swsetup_r+0xd8>)
 8007924:	429c      	cmp	r4, r3
 8007926:	bf08      	it	eq
 8007928:	68ec      	ldreq	r4, [r5, #12]
 800792a:	e7e6      	b.n	80078fa <__swsetup_r+0x1e>
 800792c:	0758      	lsls	r0, r3, #29
 800792e:	d512      	bpl.n	8007956 <__swsetup_r+0x7a>
 8007930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007932:	b141      	cbz	r1, 8007946 <__swsetup_r+0x6a>
 8007934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007938:	4299      	cmp	r1, r3
 800793a:	d002      	beq.n	8007942 <__swsetup_r+0x66>
 800793c:	4630      	mov	r0, r6
 800793e:	f7ff fb31 	bl	8006fa4 <_free_r>
 8007942:	2300      	movs	r3, #0
 8007944:	6363      	str	r3, [r4, #52]	; 0x34
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800794c:	81a3      	strh	r3, [r4, #12]
 800794e:	2300      	movs	r3, #0
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f043 0308 	orr.w	r3, r3, #8
 800795c:	81a3      	strh	r3, [r4, #12]
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	b94b      	cbnz	r3, 8007976 <__swsetup_r+0x9a>
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d003      	beq.n	8007976 <__swsetup_r+0x9a>
 800796e:	4621      	mov	r1, r4
 8007970:	4630      	mov	r0, r6
 8007972:	f000 fa09 	bl	8007d88 <__smakebuf_r>
 8007976:	89a0      	ldrh	r0, [r4, #12]
 8007978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800797c:	f010 0301 	ands.w	r3, r0, #1
 8007980:	d00a      	beq.n	8007998 <__swsetup_r+0xbc>
 8007982:	2300      	movs	r3, #0
 8007984:	60a3      	str	r3, [r4, #8]
 8007986:	6963      	ldr	r3, [r4, #20]
 8007988:	425b      	negs	r3, r3
 800798a:	61a3      	str	r3, [r4, #24]
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	b943      	cbnz	r3, 80079a2 <__swsetup_r+0xc6>
 8007990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007994:	d1ba      	bne.n	800790c <__swsetup_r+0x30>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	0781      	lsls	r1, r0, #30
 800799a:	bf58      	it	pl
 800799c:	6963      	ldrpl	r3, [r4, #20]
 800799e:	60a3      	str	r3, [r4, #8]
 80079a0:	e7f4      	b.n	800798c <__swsetup_r+0xb0>
 80079a2:	2000      	movs	r0, #0
 80079a4:	e7f7      	b.n	8007996 <__swsetup_r+0xba>
 80079a6:	bf00      	nop
 80079a8:	2000000c 	.word	0x2000000c
 80079ac:	080083f4 	.word	0x080083f4
 80079b0:	08008414 	.word	0x08008414
 80079b4:	080083d4 	.word	0x080083d4

080079b8 <abort>:
 80079b8:	b508      	push	{r3, lr}
 80079ba:	2006      	movs	r0, #6
 80079bc:	f000 fa54 	bl	8007e68 <raise>
 80079c0:	2001      	movs	r0, #1
 80079c2:	f7fa fbab 	bl	800211c <_exit>
	...

080079c8 <__sflush_r>:
 80079c8:	898a      	ldrh	r2, [r1, #12]
 80079ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	4605      	mov	r5, r0
 80079d0:	0710      	lsls	r0, r2, #28
 80079d2:	460c      	mov	r4, r1
 80079d4:	d458      	bmi.n	8007a88 <__sflush_r+0xc0>
 80079d6:	684b      	ldr	r3, [r1, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc05      	bgt.n	80079e8 <__sflush_r+0x20>
 80079dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	dc02      	bgt.n	80079e8 <__sflush_r+0x20>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d0f9      	beq.n	80079e2 <__sflush_r+0x1a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079f4:	682f      	ldr	r7, [r5, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	d032      	beq.n	8007a60 <__sflush_r+0x98>
 80079fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	075a      	lsls	r2, r3, #29
 8007a00:	d505      	bpl.n	8007a0e <__sflush_r+0x46>
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a08:	b10b      	cbz	r3, 8007a0e <__sflush_r+0x46>
 8007a0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a0c:	1ac0      	subs	r0, r0, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4602      	mov	r2, r0
 8007a12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a14:	6a21      	ldr	r1, [r4, #32]
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b0      	blx	r6
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	d106      	bne.n	8007a2e <__sflush_r+0x66>
 8007a20:	6829      	ldr	r1, [r5, #0]
 8007a22:	291d      	cmp	r1, #29
 8007a24:	d82c      	bhi.n	8007a80 <__sflush_r+0xb8>
 8007a26:	4a2a      	ldr	r2, [pc, #168]	; (8007ad0 <__sflush_r+0x108>)
 8007a28:	40ca      	lsrs	r2, r1
 8007a2a:	07d6      	lsls	r6, r2, #31
 8007a2c:	d528      	bpl.n	8007a80 <__sflush_r+0xb8>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	6062      	str	r2, [r4, #4]
 8007a32:	04d9      	lsls	r1, r3, #19
 8007a34:	6922      	ldr	r2, [r4, #16]
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	d504      	bpl.n	8007a44 <__sflush_r+0x7c>
 8007a3a:	1c42      	adds	r2, r0, #1
 8007a3c:	d101      	bne.n	8007a42 <__sflush_r+0x7a>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b903      	cbnz	r3, 8007a44 <__sflush_r+0x7c>
 8007a42:	6560      	str	r0, [r4, #84]	; 0x54
 8007a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a46:	602f      	str	r7, [r5, #0]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d0ca      	beq.n	80079e2 <__sflush_r+0x1a>
 8007a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <__sflush_r+0x92>
 8007a54:	4628      	mov	r0, r5
 8007a56:	f7ff faa5 	bl	8006fa4 <_free_r>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a5e:	e7c1      	b.n	80079e4 <__sflush_r+0x1c>
 8007a60:	6a21      	ldr	r1, [r4, #32]
 8007a62:	2301      	movs	r3, #1
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b0      	blx	r6
 8007a68:	1c41      	adds	r1, r0, #1
 8007a6a:	d1c7      	bne.n	80079fc <__sflush_r+0x34>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0c4      	beq.n	80079fc <__sflush_r+0x34>
 8007a72:	2b1d      	cmp	r3, #29
 8007a74:	d001      	beq.n	8007a7a <__sflush_r+0xb2>
 8007a76:	2b16      	cmp	r3, #22
 8007a78:	d101      	bne.n	8007a7e <__sflush_r+0xb6>
 8007a7a:	602f      	str	r7, [r5, #0]
 8007a7c:	e7b1      	b.n	80079e2 <__sflush_r+0x1a>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7ad      	b.n	80079e4 <__sflush_r+0x1c>
 8007a88:	690f      	ldr	r7, [r1, #16]
 8007a8a:	2f00      	cmp	r7, #0
 8007a8c:	d0a9      	beq.n	80079e2 <__sflush_r+0x1a>
 8007a8e:	0793      	lsls	r3, r2, #30
 8007a90:	680e      	ldr	r6, [r1, #0]
 8007a92:	bf08      	it	eq
 8007a94:	694b      	ldreq	r3, [r1, #20]
 8007a96:	600f      	str	r7, [r1, #0]
 8007a98:	bf18      	it	ne
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	eba6 0807 	sub.w	r8, r6, r7
 8007aa0:	608b      	str	r3, [r1, #8]
 8007aa2:	f1b8 0f00 	cmp.w	r8, #0
 8007aa6:	dd9c      	ble.n	80079e2 <__sflush_r+0x1a>
 8007aa8:	6a21      	ldr	r1, [r4, #32]
 8007aaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aac:	4643      	mov	r3, r8
 8007aae:	463a      	mov	r2, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b0      	blx	r6
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	dc06      	bgt.n	8007ac6 <__sflush_r+0xfe>
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007abe:	81a3      	strh	r3, [r4, #12]
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	e78e      	b.n	80079e4 <__sflush_r+0x1c>
 8007ac6:	4407      	add	r7, r0
 8007ac8:	eba8 0800 	sub.w	r8, r8, r0
 8007acc:	e7e9      	b.n	8007aa2 <__sflush_r+0xda>
 8007ace:	bf00      	nop
 8007ad0:	20400001 	.word	0x20400001

08007ad4 <_fflush_r>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	690b      	ldr	r3, [r1, #16]
 8007ad8:	4605      	mov	r5, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	b913      	cbnz	r3, 8007ae4 <_fflush_r+0x10>
 8007ade:	2500      	movs	r5, #0
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	b118      	cbz	r0, 8007aee <_fflush_r+0x1a>
 8007ae6:	6983      	ldr	r3, [r0, #24]
 8007ae8:	b90b      	cbnz	r3, 8007aee <_fflush_r+0x1a>
 8007aea:	f000 f887 	bl	8007bfc <__sinit>
 8007aee:	4b14      	ldr	r3, [pc, #80]	; (8007b40 <_fflush_r+0x6c>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d11b      	bne.n	8007b2c <_fflush_r+0x58>
 8007af4:	686c      	ldr	r4, [r5, #4]
 8007af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0ef      	beq.n	8007ade <_fflush_r+0xa>
 8007afe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b00:	07d0      	lsls	r0, r2, #31
 8007b02:	d404      	bmi.n	8007b0e <_fflush_r+0x3a>
 8007b04:	0599      	lsls	r1, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_fflush_r+0x3a>
 8007b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0a:	f000 f915 	bl	8007d38 <__retarget_lock_acquire_recursive>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	4621      	mov	r1, r4
 8007b12:	f7ff ff59 	bl	80079c8 <__sflush_r>
 8007b16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b18:	07da      	lsls	r2, r3, #31
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	d4e0      	bmi.n	8007ae0 <_fflush_r+0xc>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	059b      	lsls	r3, r3, #22
 8007b22:	d4dd      	bmi.n	8007ae0 <_fflush_r+0xc>
 8007b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b26:	f000 f908 	bl	8007d3a <__retarget_lock_release_recursive>
 8007b2a:	e7d9      	b.n	8007ae0 <_fflush_r+0xc>
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <_fflush_r+0x70>)
 8007b2e:	429c      	cmp	r4, r3
 8007b30:	d101      	bne.n	8007b36 <_fflush_r+0x62>
 8007b32:	68ac      	ldr	r4, [r5, #8]
 8007b34:	e7df      	b.n	8007af6 <_fflush_r+0x22>
 8007b36:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <_fflush_r+0x74>)
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	bf08      	it	eq
 8007b3c:	68ec      	ldreq	r4, [r5, #12]
 8007b3e:	e7da      	b.n	8007af6 <_fflush_r+0x22>
 8007b40:	080083f4 	.word	0x080083f4
 8007b44:	08008414 	.word	0x08008414
 8007b48:	080083d4 	.word	0x080083d4

08007b4c <std>:
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	4604      	mov	r4, r0
 8007b52:	e9c0 3300 	strd	r3, r3, [r0]
 8007b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b5a:	6083      	str	r3, [r0, #8]
 8007b5c:	8181      	strh	r1, [r0, #12]
 8007b5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b60:	81c2      	strh	r2, [r0, #14]
 8007b62:	6183      	str	r3, [r0, #24]
 8007b64:	4619      	mov	r1, r3
 8007b66:	2208      	movs	r2, #8
 8007b68:	305c      	adds	r0, #92	; 0x5c
 8007b6a:	f7fd fb5b 	bl	8005224 <memset>
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x38>)
 8007b70:	6263      	str	r3, [r4, #36]	; 0x24
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x3c>)
 8007b74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <std+0x40>)
 8007b78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <std+0x44>)
 8007b7c:	6224      	str	r4, [r4, #32]
 8007b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	08007ea1 	.word	0x08007ea1
 8007b88:	08007ec3 	.word	0x08007ec3
 8007b8c:	08007efb 	.word	0x08007efb
 8007b90:	08007f1f 	.word	0x08007f1f

08007b94 <_cleanup_r>:
 8007b94:	4901      	ldr	r1, [pc, #4]	; (8007b9c <_cleanup_r+0x8>)
 8007b96:	f000 b8af 	b.w	8007cf8 <_fwalk_reent>
 8007b9a:	bf00      	nop
 8007b9c:	08007ad5 	.word	0x08007ad5

08007ba0 <__sfmoreglue>:
 8007ba0:	b570      	push	{r4, r5, r6, lr}
 8007ba2:	2268      	movs	r2, #104	; 0x68
 8007ba4:	1e4d      	subs	r5, r1, #1
 8007ba6:	4355      	muls	r5, r2
 8007ba8:	460e      	mov	r6, r1
 8007baa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bae:	f7ff fa65 	bl	800707c <_malloc_r>
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	b140      	cbz	r0, 8007bc8 <__sfmoreglue+0x28>
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bbc:	300c      	adds	r0, #12
 8007bbe:	60a0      	str	r0, [r4, #8]
 8007bc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bc4:	f7fd fb2e 	bl	8005224 <memset>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bd70      	pop	{r4, r5, r6, pc}

08007bcc <__sfp_lock_acquire>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	; (8007bd4 <__sfp_lock_acquire+0x8>)
 8007bce:	f000 b8b3 	b.w	8007d38 <__retarget_lock_acquire_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	200003e5 	.word	0x200003e5

08007bd8 <__sfp_lock_release>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	; (8007be0 <__sfp_lock_release+0x8>)
 8007bda:	f000 b8ae 	b.w	8007d3a <__retarget_lock_release_recursive>
 8007bde:	bf00      	nop
 8007be0:	200003e5 	.word	0x200003e5

08007be4 <__sinit_lock_acquire>:
 8007be4:	4801      	ldr	r0, [pc, #4]	; (8007bec <__sinit_lock_acquire+0x8>)
 8007be6:	f000 b8a7 	b.w	8007d38 <__retarget_lock_acquire_recursive>
 8007bea:	bf00      	nop
 8007bec:	200003e6 	.word	0x200003e6

08007bf0 <__sinit_lock_release>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	; (8007bf8 <__sinit_lock_release+0x8>)
 8007bf2:	f000 b8a2 	b.w	8007d3a <__retarget_lock_release_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	200003e6 	.word	0x200003e6

08007bfc <__sinit>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	4604      	mov	r4, r0
 8007c00:	f7ff fff0 	bl	8007be4 <__sinit_lock_acquire>
 8007c04:	69a3      	ldr	r3, [r4, #24]
 8007c06:	b11b      	cbz	r3, 8007c10 <__sinit+0x14>
 8007c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c0c:	f7ff bff0 	b.w	8007bf0 <__sinit_lock_release>
 8007c10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c14:	6523      	str	r3, [r4, #80]	; 0x50
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <__sinit+0x68>)
 8007c18:	4a13      	ldr	r2, [pc, #76]	; (8007c68 <__sinit+0x6c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	bf04      	itt	eq
 8007c22:	2301      	moveq	r3, #1
 8007c24:	61a3      	streq	r3, [r4, #24]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f820 	bl	8007c6c <__sfp>
 8007c2c:	6060      	str	r0, [r4, #4]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f81c 	bl	8007c6c <__sfp>
 8007c34:	60a0      	str	r0, [r4, #8]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f818 	bl	8007c6c <__sfp>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	60e0      	str	r0, [r4, #12]
 8007c40:	2104      	movs	r1, #4
 8007c42:	6860      	ldr	r0, [r4, #4]
 8007c44:	f7ff ff82 	bl	8007b4c <std>
 8007c48:	68a0      	ldr	r0, [r4, #8]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	2109      	movs	r1, #9
 8007c4e:	f7ff ff7d 	bl	8007b4c <std>
 8007c52:	68e0      	ldr	r0, [r4, #12]
 8007c54:	2202      	movs	r2, #2
 8007c56:	2112      	movs	r1, #18
 8007c58:	f7ff ff78 	bl	8007b4c <std>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	61a3      	str	r3, [r4, #24]
 8007c60:	e7d2      	b.n	8007c08 <__sinit+0xc>
 8007c62:	bf00      	nop
 8007c64:	08008058 	.word	0x08008058
 8007c68:	08007b95 	.word	0x08007b95

08007c6c <__sfp>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	4607      	mov	r7, r0
 8007c70:	f7ff ffac 	bl	8007bcc <__sfp_lock_acquire>
 8007c74:	4b1e      	ldr	r3, [pc, #120]	; (8007cf0 <__sfp+0x84>)
 8007c76:	681e      	ldr	r6, [r3, #0]
 8007c78:	69b3      	ldr	r3, [r6, #24]
 8007c7a:	b913      	cbnz	r3, 8007c82 <__sfp+0x16>
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7ff ffbd 	bl	8007bfc <__sinit>
 8007c82:	3648      	adds	r6, #72	; 0x48
 8007c84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	d503      	bpl.n	8007c94 <__sfp+0x28>
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	b30b      	cbz	r3, 8007cd4 <__sfp+0x68>
 8007c90:	6836      	ldr	r6, [r6, #0]
 8007c92:	e7f7      	b.n	8007c84 <__sfp+0x18>
 8007c94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c98:	b9d5      	cbnz	r5, 8007cd0 <__sfp+0x64>
 8007c9a:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <__sfp+0x88>)
 8007c9c:	60e3      	str	r3, [r4, #12]
 8007c9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ca2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ca4:	f000 f847 	bl	8007d36 <__retarget_lock_init_recursive>
 8007ca8:	f7ff ff96 	bl	8007bd8 <__sfp_lock_release>
 8007cac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cb4:	6025      	str	r5, [r4, #0]
 8007cb6:	61a5      	str	r5, [r4, #24]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cc0:	f7fd fab0 	bl	8005224 <memset>
 8007cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ccc:	4620      	mov	r0, r4
 8007cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd0:	3468      	adds	r4, #104	; 0x68
 8007cd2:	e7d9      	b.n	8007c88 <__sfp+0x1c>
 8007cd4:	2104      	movs	r1, #4
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f7ff ff62 	bl	8007ba0 <__sfmoreglue>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	6030      	str	r0, [r6, #0]
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d1d5      	bne.n	8007c90 <__sfp+0x24>
 8007ce4:	f7ff ff78 	bl	8007bd8 <__sfp_lock_release>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	e7ee      	b.n	8007ccc <__sfp+0x60>
 8007cee:	bf00      	nop
 8007cf0:	08008058 	.word	0x08008058
 8007cf4:	ffff0001 	.word	0xffff0001

08007cf8 <_fwalk_reent>:
 8007cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	4688      	mov	r8, r1
 8007d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d04:	2700      	movs	r7, #0
 8007d06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d0a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d0e:	d505      	bpl.n	8007d1c <_fwalk_reent+0x24>
 8007d10:	6824      	ldr	r4, [r4, #0]
 8007d12:	2c00      	cmp	r4, #0
 8007d14:	d1f7      	bne.n	8007d06 <_fwalk_reent+0xe>
 8007d16:	4638      	mov	r0, r7
 8007d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1c:	89ab      	ldrh	r3, [r5, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d907      	bls.n	8007d32 <_fwalk_reent+0x3a>
 8007d22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d26:	3301      	adds	r3, #1
 8007d28:	d003      	beq.n	8007d32 <_fwalk_reent+0x3a>
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	47c0      	blx	r8
 8007d30:	4307      	orrs	r7, r0
 8007d32:	3568      	adds	r5, #104	; 0x68
 8007d34:	e7e9      	b.n	8007d0a <_fwalk_reent+0x12>

08007d36 <__retarget_lock_init_recursive>:
 8007d36:	4770      	bx	lr

08007d38 <__retarget_lock_acquire_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <__retarget_lock_release_recursive>:
 8007d3a:	4770      	bx	lr

08007d3c <__swhatbuf_r>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	460e      	mov	r6, r1
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	2900      	cmp	r1, #0
 8007d46:	b096      	sub	sp, #88	; 0x58
 8007d48:	4614      	mov	r4, r2
 8007d4a:	461d      	mov	r5, r3
 8007d4c:	da08      	bge.n	8007d60 <__swhatbuf_r+0x24>
 8007d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	602a      	str	r2, [r5, #0]
 8007d56:	061a      	lsls	r2, r3, #24
 8007d58:	d410      	bmi.n	8007d7c <__swhatbuf_r+0x40>
 8007d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d5e:	e00e      	b.n	8007d7e <__swhatbuf_r+0x42>
 8007d60:	466a      	mov	r2, sp
 8007d62:	f000 f903 	bl	8007f6c <_fstat_r>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	dbf1      	blt.n	8007d4e <__swhatbuf_r+0x12>
 8007d6a:	9a01      	ldr	r2, [sp, #4]
 8007d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d74:	425a      	negs	r2, r3
 8007d76:	415a      	adcs	r2, r3
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	e7ee      	b.n	8007d5a <__swhatbuf_r+0x1e>
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	2000      	movs	r0, #0
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	b016      	add	sp, #88	; 0x58
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d88 <__smakebuf_r>:
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d8c:	079d      	lsls	r5, r3, #30
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	d507      	bpl.n	8007da4 <__smakebuf_r+0x1c>
 8007d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	b002      	add	sp, #8
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	ab01      	add	r3, sp, #4
 8007da6:	466a      	mov	r2, sp
 8007da8:	f7ff ffc8 	bl	8007d3c <__swhatbuf_r>
 8007dac:	9900      	ldr	r1, [sp, #0]
 8007dae:	4605      	mov	r5, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff f963 	bl	800707c <_malloc_r>
 8007db6:	b948      	cbnz	r0, 8007dcc <__smakebuf_r+0x44>
 8007db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbc:	059a      	lsls	r2, r3, #22
 8007dbe:	d4ef      	bmi.n	8007da0 <__smakebuf_r+0x18>
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	f043 0302 	orr.w	r3, r3, #2
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	e7e3      	b.n	8007d94 <__smakebuf_r+0xc>
 8007dcc:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <__smakebuf_r+0x7c>)
 8007dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	6020      	str	r0, [r4, #0]
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	9b00      	ldr	r3, [sp, #0]
 8007ddc:	6163      	str	r3, [r4, #20]
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	6120      	str	r0, [r4, #16]
 8007de2:	b15b      	cbz	r3, 8007dfc <__smakebuf_r+0x74>
 8007de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de8:	4630      	mov	r0, r6
 8007dea:	f000 f8d1 	bl	8007f90 <_isatty_r>
 8007dee:	b128      	cbz	r0, 8007dfc <__smakebuf_r+0x74>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	81a3      	strh	r3, [r4, #12]
 8007dfc:	89a0      	ldrh	r0, [r4, #12]
 8007dfe:	4305      	orrs	r5, r0
 8007e00:	81a5      	strh	r5, [r4, #12]
 8007e02:	e7cd      	b.n	8007da0 <__smakebuf_r+0x18>
 8007e04:	08007b95 	.word	0x08007b95

08007e08 <_malloc_usable_size_r>:
 8007e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e0c:	1f18      	subs	r0, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bfbc      	itt	lt
 8007e12:	580b      	ldrlt	r3, [r1, r0]
 8007e14:	18c0      	addlt	r0, r0, r3
 8007e16:	4770      	bx	lr

08007e18 <_raise_r>:
 8007e18:	291f      	cmp	r1, #31
 8007e1a:	b538      	push	{r3, r4, r5, lr}
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	460d      	mov	r5, r1
 8007e20:	d904      	bls.n	8007e2c <_raise_r+0x14>
 8007e22:	2316      	movs	r3, #22
 8007e24:	6003      	str	r3, [r0, #0]
 8007e26:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e2e:	b112      	cbz	r2, 8007e36 <_raise_r+0x1e>
 8007e30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e34:	b94b      	cbnz	r3, 8007e4a <_raise_r+0x32>
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f830 	bl	8007e9c <_getpid_r>
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4601      	mov	r1, r0
 8007e40:	4620      	mov	r0, r4
 8007e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e46:	f000 b817 	b.w	8007e78 <_kill_r>
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d00a      	beq.n	8007e64 <_raise_r+0x4c>
 8007e4e:	1c59      	adds	r1, r3, #1
 8007e50:	d103      	bne.n	8007e5a <_raise_r+0x42>
 8007e52:	2316      	movs	r3, #22
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	2001      	movs	r0, #1
 8007e58:	e7e7      	b.n	8007e2a <_raise_r+0x12>
 8007e5a:	2400      	movs	r4, #0
 8007e5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e60:	4628      	mov	r0, r5
 8007e62:	4798      	blx	r3
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7e0      	b.n	8007e2a <_raise_r+0x12>

08007e68 <raise>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <raise+0xc>)
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f7ff bfd3 	b.w	8007e18 <_raise_r>
 8007e72:	bf00      	nop
 8007e74:	2000000c 	.word	0x2000000c

08007e78 <_kill_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d07      	ldr	r5, [pc, #28]	; (8007e98 <_kill_r+0x20>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f7fa f939 	bl	80020fc <_kill>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d102      	bne.n	8007e94 <_kill_r+0x1c>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b103      	cbz	r3, 8007e94 <_kill_r+0x1c>
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
 8007e96:	bf00      	nop
 8007e98:	200003e0 	.word	0x200003e0

08007e9c <_getpid_r>:
 8007e9c:	f7fa b926 	b.w	80020ec <_getpid>

08007ea0 <__sread>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	f000 f894 	bl	8007fd4 <_read_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	bfab      	itete	ge
 8007eb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007eb4:	181b      	addge	r3, r3, r0
 8007eb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eba:	bfac      	ite	ge
 8007ebc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ebe:	81a3      	strhlt	r3, [r4, #12]
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <__swrite>:
 8007ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec6:	461f      	mov	r7, r3
 8007ec8:	898b      	ldrh	r3, [r1, #12]
 8007eca:	05db      	lsls	r3, r3, #23
 8007ecc:	4605      	mov	r5, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	4616      	mov	r6, r2
 8007ed2:	d505      	bpl.n	8007ee0 <__swrite+0x1e>
 8007ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	2200      	movs	r2, #0
 8007edc:	f000 f868 	bl	8007fb0 <_lseek_r>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eea:	81a3      	strh	r3, [r4, #12]
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef6:	f000 b817 	b.w	8007f28 <_write_r>

08007efa <__sseek>:
 8007efa:	b510      	push	{r4, lr}
 8007efc:	460c      	mov	r4, r1
 8007efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f02:	f000 f855 	bl	8007fb0 <_lseek_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	bf15      	itete	ne
 8007f0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f16:	81a3      	strheq	r3, [r4, #12]
 8007f18:	bf18      	it	ne
 8007f1a:	81a3      	strhne	r3, [r4, #12]
 8007f1c:	bd10      	pop	{r4, pc}

08007f1e <__sclose>:
 8007f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f22:	f000 b813 	b.w	8007f4c <_close_r>
	...

08007f28 <_write_r>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	4d07      	ldr	r5, [pc, #28]	; (8007f48 <_write_r+0x20>)
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	4608      	mov	r0, r1
 8007f30:	4611      	mov	r1, r2
 8007f32:	2200      	movs	r2, #0
 8007f34:	602a      	str	r2, [r5, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f7fa f917 	bl	800216a <_write>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_write_r+0x1e>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_write_r+0x1e>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	200003e0 	.word	0x200003e0

08007f4c <_close_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d06      	ldr	r5, [pc, #24]	; (8007f68 <_close_r+0x1c>)
 8007f50:	2300      	movs	r3, #0
 8007f52:	4604      	mov	r4, r0
 8007f54:	4608      	mov	r0, r1
 8007f56:	602b      	str	r3, [r5, #0]
 8007f58:	f7fa f923 	bl	80021a2 <_close>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	d102      	bne.n	8007f66 <_close_r+0x1a>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b103      	cbz	r3, 8007f66 <_close_r+0x1a>
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	bd38      	pop	{r3, r4, r5, pc}
 8007f68:	200003e0 	.word	0x200003e0

08007f6c <_fstat_r>:
 8007f6c:	b538      	push	{r3, r4, r5, lr}
 8007f6e:	4d07      	ldr	r5, [pc, #28]	; (8007f8c <_fstat_r+0x20>)
 8007f70:	2300      	movs	r3, #0
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	602b      	str	r3, [r5, #0]
 8007f7a:	f7fa f91e 	bl	80021ba <_fstat>
 8007f7e:	1c43      	adds	r3, r0, #1
 8007f80:	d102      	bne.n	8007f88 <_fstat_r+0x1c>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	b103      	cbz	r3, 8007f88 <_fstat_r+0x1c>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	bd38      	pop	{r3, r4, r5, pc}
 8007f8a:	bf00      	nop
 8007f8c:	200003e0 	.word	0x200003e0

08007f90 <_isatty_r>:
 8007f90:	b538      	push	{r3, r4, r5, lr}
 8007f92:	4d06      	ldr	r5, [pc, #24]	; (8007fac <_isatty_r+0x1c>)
 8007f94:	2300      	movs	r3, #0
 8007f96:	4604      	mov	r4, r0
 8007f98:	4608      	mov	r0, r1
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	f7fa f91d 	bl	80021da <_isatty>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_isatty_r+0x1a>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_isatty_r+0x1a>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200003e0 	.word	0x200003e0

08007fb0 <_lseek_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_lseek_r+0x20>)
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4611      	mov	r1, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7fa f916 	bl	80021f0 <_lseek>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_lseek_r+0x1e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_lseek_r+0x1e>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	200003e0 	.word	0x200003e0

08007fd4 <_read_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	; (8007ff4 <_read_r+0x20>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7fa f8a4 	bl	8002130 <_read>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_read_r+0x1e>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_read_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	200003e0 	.word	0x200003e0

08007ff8 <_init>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	bf00      	nop
 8007ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffe:	bc08      	pop	{r3}
 8008000:	469e      	mov	lr, r3
 8008002:	4770      	bx	lr

08008004 <_fini>:
 8008004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008006:	bf00      	nop
 8008008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800800a:	bc08      	pop	{r3}
 800800c:	469e      	mov	lr, r3
 800800e:	4770      	bx	lr
